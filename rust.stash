<metadata>index: tags<>
# <#>Rust<> Sheet
<metadata>index: None<>
<b>Find it faster.<>


This is an interactive <b>Rust<> cheat sheet. Covers the core Rust programming language. Use the search to get instant answers.

<table><col><b>Basics<>

<*><link "?q=hello+world">Hello World<>
<link "?q=fundamentals-only">Language Fundamentals<>
<link "?q=conventions-only">Naming Conventions<><>

<*><link "?q=attributes-only">Attributes<>
<link "?q=closure-only">Closures<>
<link "?q=control-structure-only">Control Structures<>
<link "?q=errors-only">Error Handling<>
<link "?q=files-only">Files<>
<link "?q=file+io">File IO<>
<link "?q=functions-only">Functions<>
<link "?q=lifetimes-only">Lifetimes<>
<link "?q=module-only">Modules<>
<link "?q=operators-only">Operators<>
<link "?q=operator+precedence">Operator Precedence<>
<link "?q=ownership-only">Ownership<>
<link "?q=reference-only">Pointers<>
<link "?q=smart-pointers-only">Smart Pointers<>
<link "?q=tests-only">Testing<>
<link "?q=traits-only">Traits<><>

<b>Control Structures<>

<*><link "?q=if-else-only">If Else<>
<link "?q=if-let-only">If let<>
<link "?q=ternary-only">If / Inline<>
<link "?q=for-only#for_-_basics">For Loop<>
<link "?q=let-else-only">Let Else<>
<link "?q=loop-only">Loop<>
<link "?q=match-only#match_-_basics">Match<>
<link "?q=while-only#while_-_basics">While<><>

<b>Running Rust<>

<*><link "?q=command-line-only">Command Line<>
<link "?q=configuration-only">Configuration<><>

<b>Reference<>

<*><link "?q=online-docs-only">Online Docs<>
<link "?q=reserved-only">Reserved Words<>
<link "?q=patterns-only">Rust Patterns<>
<link "?q=terms-only">Rust Terms<>
<link "?q=symbols-only">Symbol Lookup<><>

<><col><b>Data Types<>

<*><link "?q=variables-only">Variables<>
<link "?q=ownership-only">Ownership<>
<link "?q=literals-only">Literals<>
<link "?q=data-types-only">Data Types<><>

<*><link "?q=boolean-only">Bool<>
<link "?q=byte-only">Byte<>
<link "?q=char-only">Char<>
<link "?q=float-only">Float<>
<link "?q=integer-only">Integer<>
<link "?q=str-only">Str<>
<link "?q=string-only">String<><>

<*><link "?q=array-only">Array<><>

<*><link "?q=unit-only">Unit<>
<link "?q=range-only">Range<><>

<*><link "?q=enum-only">Enum<>
<link "?q=struct-only">Struct<>
<link "?q=tuple-only">Tuple<>
<link "?q=tuple-struct-only">Tuple Struct<><>

<b>Collections<>

<*><link "?q=binaryheap-only">BinaryHeap<>
<link "?q=btreemap-only">BTreeMap<>
<link "?q=btreeset-only">BTreeSet<>
<link "?q=hashmap-only">HashMap<>
<link "?q=hashset-only">HashSet<>
<link "?q=linkedlist-only">LinkedList<>
<link "?q=vec-only">Vec<>
<link "?q=vecdeque-only">VecDeque<><>

<b>Smart Pointers<>

<*><link "?q=arc-only">Arc<>
<link "?q=box-only">Box<>
<link "?q=cell-only">Cell<>
<link "?q=cow-only">Cow<>
<link "?q=rc-only">Rc<>
<link "?q=ref-only">Ref<>
<link "?q=refcell-only">RefCell<>
<link "?q=refmut-only">RefMut<>
<link "?q=rwlock-only">RwLock<>
<link "?q=weak-only">Weak<><><><>


# Online Documents
@
@ links, online, online-docs-only, docs-only

##### Rust Official Site
<l>https://www.rust-lang.org/<>

##### Rust Documents
<l>https://doc.rust-lang.org/book/title-page.html<>
@
@ documentation

##### Rust Reference
<l>https://doc.rust-lang.org/std/<>
@
@ documents

##### Rust - Download / Install Page
<l>https://www.rust-lang.org/tools/install<>

##### Rust - Online Playground
<l>https://play.rust-lang.org/<>

Code interactively on this page, no setup required.
@
@ repl, interactively

##### Rust - Source Code
<l>https://github.com/rust-lang/rust<>
@
@ github

##### Rust - Crates.io
<l>crates.io<>

The official Rust package registry.

##### Rust - Rustup
<l>https://rustup.rs/<>

## Rust Online Community

##### Rust Community - Official Forums
<l>https://users.rust-lang.org/<>

##### Rust Community - Official Discord
<l>https://discord.gg/rust-lang<>

##### Rust Community - Unofficial Discord
<l>https://bit.ly/rust-community<>

##### Rust Community - Reddit
<l>https://www.reddit.com/r/rust<>

<l https://www.reddit.com/r/rust/new/>new<>  |  <l https://www.reddit.com/r/rust/rising/>rising<>  |  <l https://www.reddit.com/r/rust/top/>top<>  |  <l https://www.reddit.com/r/rust/top/?sort=top&t=all>all-time<>



# Hello World
@
@ examples



### Hello World - Basic

File Name:

<cb>main.rs<>

File Contents:

<cb>fn main() {
	println!("Hello world!");
}<>

Compile:

<cb>rustc main.rs<>

Run:

<cb>main<>
@
@ Examples



### Hello World - Input Name

File Name:

<cb>hello.rs<>

<cb>use std::io::stdin;

fn main() {

    let mut <v>name<> = String::new();

    println!("name: ");

    if let Err(<v>error<>) = stdin().read_line(&mut <v>name<>) {
        println!("Error: {}", <v>error<>);
        return;
    }

    <v>name<>.pop(); <#>// Remove the newline character.<>

    println!("Hello, {}!", <v>name<>);
}<>

Run:

<cb>rustc hello.rs
./hello<>



### Hello World - Command Line Name

File Name:

<cb>hello.rs<>

<cb>use std::env::args;

fn main() {

    let <v>args<>: Vec\<String> = args().collect();

    if <v>args<>.len() < 2 {
        println!("Usage: {} NAME", <v>args<>[0]);
        return;
    }

    let <v>name<> = &args[1..].join(" ");;

    println!("Hello, {}!", <v>name<>);
}<>

Run:

<cb>rustc hello.rs
./hello <v>your_name_here<><>



# Language Fundamentals
@
@ language-fundamentals-only, fundamentals-only



### Comments

<cb><#>// This is a comment.<><>

Start a comment with '<c>//<>'.
@
@ //



### Comments - Inline

<cb><#>/* inline comment */<><>


A comment embedded in a statement.


Example

<cb>let a <#>/* Type determined by inferencing */<> = 42.<>
@
@ /*, */, /**/



### Comments - Multiline

<cb><#>/*

Multiline Comment

*/<><>

Start a multiline comment with '<c>/*<>'.
End with '<c>*/>'
@
@ /*, */, /**/



### Doc Comments

<cb><#>/// This is a doc comment.<><>

<cb><#>/// This doc comment
/// adds content to the
/// following function.<>
fn <v>documented_function<>() {
	<v>...<>
}<>

Doc comments are placed before the item being commented on.
Use a triple forward slash (<#><c>///<><>) on each line.
@
@ code, documentation, docstring-only, docstr-only, doc-string-only, doc-str-only
@ ///



### Doc Comments - Markdown Format

<cb><#>/// # Heading 1
/// ## Heading 2
///
/// In **<b>bold<>** or __<b>bold<>__
/// In *<i>italics<>* or _<i>italics<>_
/// In ~~<->strikethrough<>~~
///
/// [Link](<l>http//speedsheet.io<>)<><>


Doc comments support CommonMark Markdown.

CommonMark:
<l>https://commonmark.org/help/<>
@
@ code, documentation, docstring-only, docstr-only, doc-string-only, doc-str-only
@ ///



### Block

<cb>{
	<v>...<>
}<>


A block of code with it's own scope separate from the local scope.


Example:

<cb>let <v>a<> = <v>10<>;

{
	let <v>a<> = <v>5<> + <v>a<>;
	println!("a = {}", <v>a<>);
}

println!("a = {}", <v>a<>);

<#>// Prints:
//
//    a = 15
//    a = 10<><>



### Block Expression

<cb>= {
	<v>...<>
	<v>return_value<>
}<>


Defines a block that returns a value.
Return a value like any other expression, leave the semicolon (;) off.


Example:

<cb>let <v>value<> = {
	<v>10<>_i32.pow(<v>2<>)
};

println!("value = {}", <v>value<>);

<#>// Prints: "value = 100"<><>



### Identifiers

<cb>( <v>letter<> | <v>unicode_letter<> | _ )   ( <v>digit<> | <v>letter<> | <v>unicode_letter<> | _ ) *<>

<cb>[_a-zA-Z<v>unicode<>][_0-9a-zA-Z<v>unicode<>]*<>

Case sensitive.

The first character must be an alphabet letter, Unicode letter or underscore.
The first character can not be a digit.
All other characters can be alphabet letters, Unicode letters, underscores or digits.
A single underscore ('_') is not allowed.


Examples:

<cb><v>_identifier
identifier
식별자
item_1<><>

Invalid:

<cb><v>_
3_items
🎈 <><>
@
@ rust names, variable names, module names, class names
@ rules, Valid, Name, Correct



### Program Root File

For Applications:

<cb>src/main.rs<>


For Libraries:

<cb>src/lib.rs<>


For Tests<super><#>1<><>:

<cb>tests/tests.rs<>


1 - not required to run tests in root tests directory
@
@ main.rs, lib.rs, tests.rs



### Program Entry Point / Main Function

Application File:

<cb>main.rs<>

<cb>fn main() {

}<>
@
@ main(), main.rs



### Program Test Entry Point / Main Function

<cb>tests.rs<>

Used to define utility functions for tests and to identify tests in sub folders.
@
@ tests



### Program Directory Structure

<cb>.<v>project_name<>/
│
├── .gitignore
├── Cargo.toml
├── Cargo.lock
│
├── .git/
│
├── src/
│   ├── main.rs | lib.rs
│   └── *.rs
│
├── tests/
│   ├── tests.rs
│   └── *.rs
│
└── target/
	│
	├── doc/
	│   └── current/
	│       ├── index.html
	│       └── *.html
	│
	├── debug/
	│   └── <v>project_name<>
	│
	└── release/
		└── <v>project_name<><>



### Statement Terminator

<cb><v>statement<>;<>

Terminate commands with a semicolon.


Example:

<cb>println!("<v>This statement is terminated with a semicolon.<>");<>
@
@ ;, command, line



### Rust File Extension

<cb>.rs<>

<cb><v>filename<>.rs<>
@
@ .rs



### Rust Environment Variable - Cargo Home

<cb>CARGO_HOME<>

Locates the Cargo directory.

Typically:

<cb>$HOME/.cargo<>
@
@ RUSTUP_HOME
@ Rust Path, .cargo



### Rust Environment Variable - Rustup Home

<cb>RUSTUP_HOME<>

Locates the Rustup directory.

Typically:

<cb>$HOME/.rustup<>
@
@ RUSTUP_HOME
@ Rust Path, .rustup



### Runtime Data Types

Rust does not store data types at runtime.

Rust does not need to know the data types at runtime as the compiler has exhaustively checked that everything is correct.



# Install

Install Page:
<l>https://www.rust-lang.org/tools/install<>


### Rustup - Mac Homebrew - Install

From Terminal:

<cb>brew install rust<>

Formula:
<l>https://formulae.brew.sh/formula/rust<>


### Rustup - Linux / Mac - Install

From Terminal:

<cb>curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh<>


### Rustup - Linux / Mac - Uninstall

<cb>rustup self uninstall<>


### Rustup - Windows - Install

<l>https://www.rust-lang.org/tools/install<>

Download <c>rustup<> installer from the official download page.



## Rust IDEs


### Rust IDE - Visual Studio Code

Visual Studio Code (free):
<l>https://code.visualstudio.com/download<>


Plugins:

<cb>rust-analyzer
CodeLLDB<>



### Rust IDE - RustRover

Jetbrains RustRover (paid):
<l>https://www.jetbrains.com/rust/<>



# Command-line
@
@ commandline, command line, cli, cli-only, command-line-only, commandline-only, commands-only



### Rust - Update

<cb>rustup update<>

Update to the latest version.
@
@ rustup, upgrade



### Rust - Version

<cb>rustc -V<>

<cb>rustc --version<>
@
@ rustc



## Cargo
@
@ cargo-only


### Cargo - Create Application

<cb>cargo new <v>application_name<><>

Creates a skeleton program complete with source folder, git files and Cargo.toml.

Creates a new directory for all these files.


Creates:

<cb><v>application_name<>/
├── .gitignore
├── Cargo.toml
├── .git/
└── src/
	└── main.rs<>
@
@ cargo new, skeleton, scaffolding, program, project



### Cargo - Create Application In Directory

<cb>cargo init<>


Creates a skeleton program complete with source folder, git files and Cargo.toml.

Creates the files in the current directory.


Creates:

<cb>./
├── .gitignore
├── Cargo.toml
├── .git/
└── src/
	└── main.rs<>
@
@ cargo new, skeleton, scaffolding, program, project, init



### Cargo - Create Library

<cb>cargo new --lib <v>library_name<><>

Creates a skeleton library complete with source folder, git files and Cargo.toml.


Creates:

<cb><v>library_name<>/
├── .gitignore
├── Cargo.toml
├── .git/
└── src/
	└── lib.rs<>
@
@ cargo new, skeleton, scaffolding, crate



### Cargo - Add Library / Crate

<cb>cargo add <v>crate_name<><>

Adds the crate dependency to the cargo.toml file.
@
@ dependency, dependencies, crates, libraries, install



### Cargo - Build / Debug

<cb>cargo build<>

Compiles the program.

The build includes debugging code and will create a bigger, slower executable vs. the release version.


Directory:

<cb><v>project<>/
└── target/
	└── debug/<>
@
@ cargo, compile, create, executable



### Cargo - Build / Release

<cb>cargo build -r<>

<cb>cargo build --release<>

Compiles the program for release.

This strips all debugging code from the executable resulting in a faster, smaller build.


Directory:

<cb><v>project<>/target/release<>
@
@ cargo, compile, create, release, production, executable, -r, --release



### Cargo - Build / To Target

<cb>cargo build --target <v>target_name<><>


Creates an executable for the given target.

Requires the target be added with rustup.
@
@ cargo, compile, create, executable, --target
@ target-only, targets-only



### Cargo - Check Dependencies

<cb>cargo check<>

Checks that all the dependencies are present and have the correct versions.



### Cargo - Clean

<cb>cargo clean<>

Deletes the <c>target<> directory (contains the build and binary files).



### Cargo - List Tests

<cb>cargo test -- --list<>

Lists all tests in a project.
@
@ all, every



### Cargo - Run

<cb>cargo run<>

Compiles and runs the application.
@
@ project, application



### Cargo - Run Tests

<cb>cargo test<>

Runs unit tests in src modules and any tests in /tests.

Stops when a test fails.

Tests Directory:

<cb><v>project<>/
└── tests/<>
@
@ project, application



### Cargo - Run All Tests

<cb>cargo test --no-fail-fast<>

Runs unit tests in src modules and any tests in /tests.

Runs all tests regardless of outcomes.

Tests Directory:

<cb><v>project<>/
└── tests/<>
@
@ project, application
@ --no-fail-fast



### Cargo - Run Individual Test

<cb>cargo test --test <v>file_name<> <v>test_1<><>

Runs an individual test.

Runs '<c>test_1()<>' in file '<c>/tests/<v>file_name<>.rs'.
@
@ function



### Cargo - Update Library

<cb>cargo update -p <v>library_name<><>


Updates a library or crate.

Lists any changes.
@
@ crates



### Cargo - Update Libraries

<cb>cargo update<>


Updates all libraries and crates.

Lists the changes.
@
@ crates, all



### Cargo - Generate Assembly

<cb>cargo rustc -- --emit asm<>

or:

<cb>RUSTFLAGS="--emit asm" cargo build<>
@
@ --emit asm, rustc



### Cargo - Generate Docs

<cb>cargo doc<>

Converts Rust code doc comments and converts them into html.

Docs Directory:

<cb><v>project<>/
└── target/
	└── doc/
		└── current/<>



### Cargo - Generate Docs / Skip Dependency Check

<cb>cargo rustdoc<>

Converts Rust code doc comments and converts them into html.

rustdoc will not perform a dependency check before generating.

Docs Directory:

<cb><v>project<>/
└── target/
	└── doc/
		└── current/<>



## Cargo - Workspace


### Cargo - Workspace - Clean All

<cb>cargo clean --all<>

Removes all target directories in all workspace projects and libraries.
@
@ subprojects, sub-projects, included
@ --all, targets



### Cargo - Workspace - Run All Tests

<cb>cargo test --all<>

Runs all tests in all workspace projects and libraries.
@
@ subprojects, sub-projects, included
@ test --all



## Cargo - Crates


### Cargo - Crate - Build Crate

<cb>cargo package<>

Creates a publishable crate.

Crate Directory:

<cb><v>project<>/
└── target/
	└── package/<>
@
@ package



### Cargo - Crate - Build Crate - Ignore Unchecked Files

<cb>cargo package --allow-dirty<>

Creates a publishable crate.

Ignores any files not checked into git.
@
@ package, --allow-dirty



### Cargo - Crate - Publish

<cb>cargo login <v>repository_authentication_token<>

cargo publish<>
@
@ publish, login



### Cargo - Crate - Yank

<cb>cargo yank --version <v>x<>.<v>x<>.<v>x<> <v>crate_name<><>



## Rustc


### Program - Compile Executable

<cb>rustc <v>program_name.rs<><>

Creates a binary file that can be executed.

Contains all compiler debug code and will create a relatively larger executable.
@
@ rustc, create binary



### Program - Compile Executable for Release

<cb>rustc -O <v>program_name.rs<><>

Creates a binary file that can be executed.

Creates a production ready version with compiler debug code removed.
@
@ rustc, create binary, -O



### Program - Compile Library

<cb>rustc --crate-type=lib <v>program_name.rs<><>

Creates a library file (extension .lib).
@
@ rustc, create, .lib, crate



### Program - Compile Test

<cb>rustc --test <v>program_name.rs<><>
@
@ rustc, test, -t, --test



### Program - Run

<cb><v>program_name<><>

Run after compiling with <c>rustc<>.



### Program - Run Tests

<cb><v>program_name<><>

Run after compiling with <c>rustc --test<>.


## Rustup
@
@ rustup-only


### Rustup - Components - List Installed

<cb>rustup component list --installed<>

Lists all installed Rustup components.
@
@ --installed



### Rustup - Configuration - Show

<cb>rustup show<>

Shows rustup configuration including available targets, default target and current tool chains.



### Rustup - Targets
@
@ target-only, targets-only, compile


#### Rustup - Target - Install Target

<cb>rustup target add <v>target_name<><>



#### Rustup - Target - Install Target - MacOS Apple Silicon

<cb>rustup target add aarch64-apple-darwin<>

Usage:

<cb>rustup target add aarch64-apple-darwin
cargo build --release --target aarch64-apple-darwin<>
@
@ apple, darwin
@ add, install
@ aarch64-apple-darwin, m1, m2



#### Rustup - Target - Install Target - MacOS x86

<cb>rustup target add x86_64-apple-darwin<>

Usage:

<cb>rustup target add x86_64-apple-darwin
cargo build --release --target x86_64-apple-darwin<>
@
@ apple, darwin
@ add, install
@ x86_64-apple-darwin



#### Rustup - Target - Install Target - Raspberry Pi (32 bit)

<cb>rustup target add arm-unknown-linux-gnueabihf<>

Usage:

<cb>rustup target add arm-unknown-linux-gnueabihf
cargo build --release --target arm-unknown-linux-gnueabihf<>


Requires:

<cb>arm-linux-gnueabihf-binutils<>

<cb>brew install arm-linux-gnueabihf-binutils<>


Notes:

<card>ARMv6 Linux, hardfloat (kernel 3.2, glibc 2.17)<>
@
@ add, install
@ arm-unknown-linux-gnueabihf



#### Rustup - Target - Install Target - Raspberry Pi 4 (64 bit)

<cb>rustup target add armv7-unknown-linux-gnueabihf<>

Usage:

<cb>rustup target add armv7-unknown-linux-gnueabihf
cargo build --release --target armv7-unknown-linux-gnueabihf<>


Requires:

<cb>arm-linux-gnueabihf-binutils<>

<cb>brew install arm-linux-gnueabihf-binutils<>


Notes:

<cb>ARMv7-A Linux, hardfloat (kernel 3.2, glibc 2.17)<>
@
@ add, install
@ armv7-unknown-linux-gnueabihf, arm-linux-gnueabihf-binutils



#### Rustup - Target - Install Target - Web Assembly

<cb>rustup target add wasm32-unknown-unknown<>

Usage:

<cb>rustup target add wasm32-unknown-unknown
cargo build --release --target wasm32-unknown-unknown<>

<m>Untested. I'm sure it is incomplete.<>
@
@ add, install
@ wasm
@ wasm32-unknown-unknown



#### Rustup - Target - Install Target - Windows ARM

<cb>rustup target add i686-pc-windows-msvc<>

Usage:

<cb>rustup target add i686-pc-windows-msvc
rustup toolchain install stable-i686-pc-windows-msvc
cargo build --release --target i686-pc-windows-msvc<>


Requires:

<cb>stable-i686-pc-windows-msvc<>

<cb>brew install stable-i686-pc-windows-msvc

	<#># Or...<>

rustup toolchain install stable-i686-pc-windows-msvc<>
@
@ add, install
@ i686-pc-windows-msvc, stable-i686-pc-windows-msvc



#### Rustup - Target - Install Target - Windows Intel

Preferred:

<cb>rustup target add x86_64-pc-windows-msvc<>

From Non Windows System:

<cb>rustup target add x86_64-pc-windows-gnu<>

Usage:

<cb>rustup target add x86_64-pc-windows-msvc
rustup toolchain install stable-x86_64-pc-windows-msvc
cargo build --release --target stable-x86_64-pc-windows-msvc<>


Requires:

<cb>stable-x86_64-pc-windows-msvc<>

<cb>brew install stable-x86_64-pc-windows-msvc

	<#># Or...<>

rustup toolchain install stable-x86_64-pc-windows-msvc<>
@
@ add, install
@ x86_64-pc-windows-msvc, stable-x86_64-pc-windows-msvc
@ x86_64-pc-windows-gnu, stable-x86_64-pc-windows-gnu



#### Rustup - Target - Uninstall Target

<cb>rustup target remove <v>target_name<><>
@
@ remove, delete



#### Rustup - Targets - List All

<cb>rustup target list<>


Lists all available targets.



## Clippy
@
@ clippy-only


### Clippy - Help

<cb>cargo clippy -- -h<>
@
@ cargo clippy, --, -h, --help



### Clippy - Lint

<cb>cargo clippy<>
@
@ cargo clippy



### Clippy - Lint Pedantic

<cb>cargo clippy -- -W clippy::pedantic<>
@
@ cargo clippy, --, -W, clippy::pedantic, pedantic



# Configuration
@
@ cargo.toml, cargo.toml-only, toml-only, config-only, configuration-only


### Configuration File

<cb>Cargo.toml<>



### Configuration File - Sample

Cargo.Toml:

<cb><#># Comments<>

[package]
name = "<v>AppName<>"
version = "<v>v<>.<v>v<>.<v>v<>"
edition = "<v>yyyy<>"

[dependencies]
<v>library_1<> = "<v>v<>.<v>v<>.<v>v<>"
<v>library_2<> = "^<v>v<>.<v>v<>"<>


# Compiler


### Silence Dead Code Warnings

<cb>#[allow(dead_code)]<>


Place in front of unused function.


Example:

<cb>#[allow(dead_code)]
fn <v>unused_function<>() {
	<v>...<>
}<>
@
@ #[allow(dead_code)], allow dead_code



# Operators
@
@ Operators, Operations, Expressions
@ operators-only


## Arithmetic Operators

<in><table><col><c><v>a<> + <v>b<><>    <><col>Add<>
<col><c><v>a<> - <v>b<><><><col>Subtract<>
<col><c><v>a<> * <v>b<><><><col>Multiply<>
<col><c><v>a<> / <v>b<><><><col>Divide<>
<col><c><v>a<> % <v>b<><><><col>Modulo / Remainder<><><>
@
@ +, -, *, /, %
@ add, plus, subtract, minus, multiply, divide, modulo, modulus



## Arithmetic Assignment Operators

<in><table><col><c><v>a<> += <v>b<><>   <><col>Add<>
<col><c><v>a<> -= <v>b<><><><col>Subtract<>
<col><c><v>a<> *= <v>b<><><><col>Multiply<>
<col><c><v>a<> /= <v>b<><><><col>Divide<>
<col><c><v>a<> %= <v>b<><><><col>Modulo / Remainder<><><>

Calculate the operation and save the result in <c><v>a<><>.
@
@ +=, -=, *=, /= %=
@ add, plus, subtract, minus, multiply, divide, modulo, modulus



## Bitwise Operators

<in><table><col><c>!<v>a<><><><col>Complement / Inverse<>
<col> <>
<col><c><v>a<> & <v>b<><><><col>Bitwise AND<>
<col><c><v>a<> | <v>b<><><><col>Bitwise OR<>
<col><c><v>a<> ^ <v>b<><><><col>Bitwise XOR<>
<col> <>
<col><c><v>a<> \<\< <v>shift_count<><><><col>Bitwise Shift Left<>
<col><c><v>a<> >> <v>shift_count<><><><col>Bitwise Shift Right<><><>
@
@ !, &, |, ^, \<\<, >>, binary
@ shift left, shift right



## Bitwise Assignment Operators

Calculate the operation and save the result in <c><v>a<><>:

<in><table><col><c><v>a<> &= <v>b<><><><col>Bitwise AND<>
<col><c><v>a<> |= <v>b<><><><col>Bitwise OR<>
<col><c><v>a<> ^= <v>b<><><><col>Bitwise XOR<>
<col> <>
<col><c><v>a<> \<\<= <v>shift_count<><><><col>Bitwise Shift Left<>
<col><c><v>a<> >>= <v>shift_count<><><><col>Bitwise Shift Right<><><>
@
@ &=, |=, ^=, \<\<=, >>=, binary
@ and, or, xor, shift left, shift right



## Comparison Operators

<in><table><col><c><v>a<> == <v>b<><>     <><col>Equals<>
<col><c><v>a<> != <v>b<><><><col>Not Equals<>
<col><c><v>a<> > <v>b<><><><col>Greater Than<>
<col><c><v>a<> \< <v>b<><><><col>Less Than<>
<col><c><v>a<> >= <v>b<><><><col>Greater Than or Equals<>
<col><c><v>a<> \<= <v>b<><><><col>Less Than or Equals<><><>
@
@ Boolean, ==, !=, \<>, \<, \<=, >, >/
@ less than, greater than, less that or equal, greater than or equal, compare



## Logical Operators

<in><table><col><c>!<v>a<><><><col>Not<>
<col> <>
<col><c><v>a<> && <v>b<><><><col>And<>
<col><c><v>a<> || <v>b<><><><col>Or<><><>
@
@ Boolean, !, &&, ||
@ and, or, not, negation, bang



## Ternary Operator / Inline If

<cb>= if <v>expression<> { <v>true_value<> } else { <v>false_value<> }<>

Full Form:

<cb>let <v>value<> = if <v>expression<> { <v>true_value<> } else { <v>false_value<> };<>


Evaluates a conditional if expression to a value.
Must be terminated with a semicolon (;).

Really this is just a regular if else statement on one line.


Example:

<cb>let <v>a<> = 10;
let <v>more_or_less<> = if <v>a<> > 5 {"more"} else {"less"};

println!("{} is {} than 5.", <v>a<>, <v>more_or_less<>);

<#>// Prints "10 is more than 5."<><>
@
@ Ternary conditional operator, tertiary, expression
@ Inline If, iif, if else
@ ternary-only



## Operator / Expression Precedence

From Highest to Lowest:


<table><col><c>::<><><col>Paths<>
<col> <>
<col><c>.<v>method<>()<><><col>Methods<>
<col> <>
<col><c>.<v>field<><><><col>Fields<><col><s>left to right<><>
<col> <>
<col><c><v>function<>(), <v>array<>[]<><><col>Functions, Array Indexes<>
<col> <>
<col><c>-  *  !  &  &mut<><><col>Unary Operators<>
<col> <>
<col><c>as  :<><><col>Casting, : Operator<><col><s>left to right<><>
<col> <>
<col><c>*  /  %<><><col>Multiplicative<><col><s>left to right<><>
<col> <>
<col><c>+  -<><><col>Additive<><col><s>left to right<><>
<col> <>
<col><c>\<\<  >><><><col>Bitwise Shift<><col><s>left to right<><>
<col> <>
<col><c>&<><><col>Bitwise AND<><col><s>left to right<><>
<col> <>
<col><c>^<><><col>Bitwise XOR<><col><s>left to right<><>
<col> <>
<col><c>|<><><col>Bitwise OR<><col><s>left to right<><>
<col> <>
<col><c>==  !=  \<  \<=  >  >=<><><col>Comparison<><col><s>use parenthesis<><>
<col> <>
<col><c>&&<><><col>Logical AND<><col><s>left to right<><>
<col> <>
<col><c>||<><><col>Logical OR<><col><s>left to right<><>
<col> <>
<col><c>..  ..=<><><col>Range<><col><s>use parenthenis<><>
<col> <>
<col><c>=  +=  -=  *=  /=  %= 
\<\<=  >>=  &=  ^=  |=<><><col>Assignment<><col><s>left to right<><>
<col> <>
<col><c>return  break  ||<><><col>Flow Control, Closures<><>
@
@ order of operations



# Operator Overloading / Implementing


### Implement Equals - Using Derive

<cb>#[derive(eq)]
struct <v>Type<> { <v>...<> }<>


To support the == and != operators, use the derive attribute.


Example:

<cb>#[derive(PartialEq)]
struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>point_1<> = <v>Point<> { x: 10, y: 20 };
let <v>point_2<> = <v>Point<> { x: 20, y: 10 };

println!("Point 1 == 2?: {}", <v>point_1<> == <v>point_2<>);

<#>// Prints: Point 1 == 2?: false<><>
@
@ ==, !=, #derive, #[derive(PartialEq)], partialeq



### Implement Equals - Using Trait

<cb>impl PartialEq\<<v>Type<>> for <v>Type<> {

	fn eq(&self, other: &<v>Type<>) -> bool {
		self.<v>...<> == other.<v>...<>
	}
}<>


To support the == and != operators, implement the PartialEq trait.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

impl PartialEq\<<v>Point<>> for <v>Point<> {

	fn eq(&self, other: &<v>Point<>) -> bool {
		self.<v>x<> == other.<v>x<> && self.<v>y<> == other.<v>y<>
	}
}

let <v>point_1<> = <v>Point<> { x: 10, y: 20 };
let <v>point_2<> = <v>Point<> { x: 20, y: 10 };

println!("Point 1 == 2?: {}", <v>point_1<> == <v>point_2<>);

<#>// Prints: Point 1 == 2?: false<><>
@
@ ==, !=, partialeq, impl



# Control Structures
@
@ statements, flow
@ control-only, control-structure-only, control-structures-only
@ control-statements-only



## Control Structures - Basics

<table><col>If Else     <><col><c>if <v>expression<> {
	<v>...<>
}<><>
<col> <>
<col> <>
<col><><col><c>if <v>expression<> {
	<v>...<>
}
else if <v>expression<> {
	<v>...<>
}
else {
	<v>...<>
}<><>
<col> <>
<col> <>
<col>For<><col><c>for <v>value<> in <v>start<>..<v>end_plus_one<> {
	<v>...<>
}<><>
<col> <>
<col> <>
<col><><col><c>for <v>value<> in <v>start<>..=<v>end<> {
	<v>...<>
}<><>
<col> <>
<col> <>
<col><><col><c>for <v>value<> in <v>iterator<> {
	<v>...<>
}<><>
<col> <>
<col> <>
<col>Loop<><col><c>loop {
	<v>...<>
}<><>
<col> <>
<col> <>
<col><><col><c>loop {
	<v>...<>
	continue;
	<v>...<>
	break;
	<v>...<>
}<><>
<col> <>
<col> <>
<col>Match<><col><c>match <v>item<> {
	<v>value_1<> => {
		<v>...<>
	}
	<v>value_2<> | <v>value_3<> => {
		<v>...<>
	}
	<v>min_1<>..<v>max_plus_one_1<> => {
		<v>...<>
	}
	<v>bind_value<> @ <v>min_2<>..<v>max_plus_one_2<> => {
		<v>...<>
	}
	_ => {
		<v>...<>
	}
}<><>
<col> <>
<col> <>
<col>While<><col><c>while <v>expression<> {
	<v>...<>
}<><><>
@
@ summary



## If Else
@
@ else, if-only, if-else, if-else-only


### If - If Else


<cb>if <v>expression<> {
	<v>...<>
}<>

<cb>if <v>expression<> {
	<v>...<>
}
else if <v>expression<> {
	<v>...<>
}
else {
	<v>...<>
}<>


Example:

<cb>let <v>value<> = 42;

if <v>value<> \< 42 {
	println!("{} is less than 42.", <v>value<>);
}
else if <v>value<> == 42 {
	println!("{} is 42.", <v>value<>);
}
else  {
	println!("{} is greater than 42.", <v>value<>);
}<>



### If - If Let

<cb>if let <v>pattern<> = <v>expression<> {
	<v>...<>
}
else {
	<v>...<>
}<>


Uses pattern matching to evaluate an expression.

If the expression matches, the true part of the if clause is executed.

Use where you need to test for a single value of an enum and instead of using a more verbose match statement.
(e.g. where Some() is involved)

Uses <c>let<>'s refutability test.


Above is Equivalent To:

<cb>match <v>expression<> {
	<v>pattern<> => {
		<v>...<>
	}
	_ => {
		<v>...<>
	}
}<>



Example:

<cb>let <v>numbers<> = [Some(1), None, Some(3), None, Some(5)];

for <v>number<> in <v>numbers<> {

	if let Some(<v>value<>) = <v>number<> {
		println!("{}", <v>value<>);
	}
	else {
		println!("[none]");
	}
}

<#>// Prints:
//
// 1
// [none]
// 3
// [none]
// 5<><>
@
@ pattern matching
@ if-let-only



## For
@
@ for-only, fors-only, for-in, for-in-only



### For - In Range

<cb>for <v>value<> in <v>start<>..<v>end_plus_one<> {
	<v>...<>
}<>

<cb>for <v>value<> in <v>start<>..=<v>end<> {
	<v>...<>
}<>


Example:

For With <c>..<> :

<cb>for <v>value<> in <v>0<>..<v>3<> {
	println!("{}", <v>value<>);
}

<#>// Prints Values: 0, 1, 2<><>

For With <c>..=<> :

<cb>for <v>value<> in <v>0<>..=<v>3<> {
	println!("{}", <v>value<>);
}

<#>// Prints Values: 0, 1, 2, 3<><>
@
@ .., ..=



### For - In Collection

<cb>for <v>value<> in <v>collection<> {
	<v>...<>
}<>


Iterates over each item in the collection using its iterator.


Example:

<cb>let <v>vec_1<> = vec!["<v>one<>", "<v>two<>", "<v>three<>"];

for <v>item<> in <v>vec_1<> {
	println!("{} ", <v>item<>);
}

<#>// Prints:
//
//    one
//    two
//    three<><>
@
@ foreach, for-each, collection, .iter()



### For - In Iterator

<cb>for <v>value<> in <v>iterator<> {
	<v>...<>
}<>


Iterates over each item in the iterator.


Example:

<cb>let <v>vec_1<> = vec!["<v>one<>", "<v>two<>", "<v>three<>"];
let <v>iterator<> = <v>vec_1<>.iter();

for <v>item<> in <v>iterator<> {
	println!("{} ", <v>item<>);
}

<#>// Prints:
//
//    one
//    two
//    three<><>
@
@ iterator, iterate



### For - Break, Continue

<cb>for <v>...<> {
	<v>...<>
	continue;
	<v>...<>
	break;
	<v>...<>
}<>



## Let
@
@ let-only


### Let - Let Else

<cb>let <v>pattern<> = <v>expression<> else {
	<#>// Handle exception here.<>
	return;
};<>


Implements a guard around the pattern if the pattern doesn't match.

Results are passed to the surrounding scope.
The else block must have a <c>return<> or other divergent expression.


Example:

<cb>let <v>some_value<> = Some(<v>42<>);

let Some(<v>value<>) = <v>some_value<> else {
	println!("No value found");
	return;
};

println!("value = {}", <v>value<>);

<#>// Prints: value = 42<><>
@
@ guard expression, pattern matching
@ let-else-only



## Loop
@
@ loop-only, loops-only


### Loop

<cb>loop {
	<v>...<>
}<>

<cb>loop {
	<v>...<>
	continue;
	<v>...<>
	break;
	<v>...<>
}<>


Loops continuously until break is called.
Use to create an infinite loop.


Example:

<cb>let mut <v>value<> = <v>0<>;

loop {
	<v>value<> += 1;
	println!("{}", <v>value<>);

	if <v>value<> > 4 {
		break;
	}
}

<#>// Prints values 1, 2, 3, 4.<><>
@
@ break, continue, infinite



### Loop - Loop Expression / Return Value

<cb>let <v>returned_value<> = loop {
	<v>...<>
	break <v>return_value<>;
	<v>...<>
};<>


Loops and then returns a value on break.

Loops continuously until break is called.
Requires a semicolon (;) after the block.


Example:

<cb>let mut <v>value<> = <v>0<>;

let <v>result<> = loop {

	<v>value<> += 1;
	if <v>value<> > 4 {
		break <v>value<>;
	}
};

println!("Result = {}.", <v>result<>);

<#>// Prints: "Result = 5."<><>
@
@ break
@ loop-only, expression, with return value



### Loop - Named / Nested Loop

<cb>'<v>name<>: loop {
	<v>...<>
	continue <v>name<>;
	<v>...<>
	break <v>name<>;
	<v>...<>
}<>

Nested:

<cb>'<v>outer_name<>: loop {

	'<v>inner_name<>: loop {
		<v>...<>
		continue <v>outer_name<>;
		<v>...<>
		break <v>outer_name<>;
		<v>...<>
	}
}<>


Labels each loop with a name.
Allows break and continue statements to operate on an outer loop.
@
@ break, continue, labeled


## Match
@
@ match-only, matches-only, pattern matching, =>


### Match - Basics

<cb>match <v>item<> {
	<v>value_1<> => {
		<v>...<>
	},
	<v>value_2<> | <v>value_3<> => {
		<v>...<>
	},
	<v>value_3<> if <v>condition<> => {
		<v>...<>
	}
	<v>min_1<>..<v>max_plus_one_1<> => {
		<v>...<>
	},
	<v>bind_value<> @ <v>min_2<>..<v>max_plus_one_2<> => {
		<v>...<>
	},
	_ => {
		<v>...<>
	}
}<>


Match Expression:

<cb>let <v>value<> = match <v>item<> {
	<v>value_1<> => { <v>...<> },
	<v>value_2<> => { <v>...<> }
};<>


Match Statement Parts:

<cb>match <v>expression<> {
	<v>match_arm<>,
	<v>match_arm<>,
	<v>pattern<> => <v>code<>
	<v>pattern<> => <v>code<>
	<v>pattern<> if <v>condition<> => <v>code<>
}<>


### Match - Details


#### Match - Single Value

<cb>match <v>item<> {
	<v>value_1<> => {
		<v>...<>
	},
	<v>value_2<> => {
		<v>...<>
	},
	_ => {
		<v>...<>
	}
}<>



#### Match - Multiple Values

<cb>match <v>item<> {
	<v>value_1<> | <v>value_2<> => {
		<v>...<>
	},
	<v>value_3<> | <v>value_4<> => {
		<v>...<>
	},
	<v>...<>
}<>
@
@ | or



#### Match - Value If

<cb>match <v>item<> {
	<v>value<> if <v>condition<> => {
		<v>...<>
	},
	<v>...<>
}<>
@
@ conditional



#### Match - Value Range

<cb>match <v>item<> {
	<v>min<>..<v>max_plus_one<> => {
		<v>...<>
	},
	<v>min<>..=<v>max<> => {
		<v>...<>
	},
	<v>...<>
}<>
@
@ .., ..=



#### Match - Bind To Value

<cb>match <v>item<> {
	<v>bind_value<> @ <v>min_2<>..<v>max_plus_one_2<> => {
		<v>...<>
	},
	<v>...<>
}<>



#### Match - Match Expression

Match Expression:

<cb>let <v>value<> = match <v>item<> {
	<v>value_1<> => { <v>...<> },
	<v>value_2<> => { <v>...<> },
	<v>...<>
};<>


Returns a value from a match expression.


Example:

<cb>let <v>value<> = 200;

let <v>returned_value<> = match <v>value<> {
	200 => { "OK" },
	400 => { "Bad Request" },
	500 => { "Server Error" },
	_ => { "Unknown" }
};

println!("Returns {}.", <v>returned_value<>);

<#>// Prints ""><><>
@
@ return value



#### Match - Match Enum

<cb>match <v>enum_value<> {
	Enum1::Value1 => { <v>...<> },
	Enum1::Value2 => { <v>...<> },
	Enum1::Value3 => { <v>...<> },
	<v>...<>
};<>
@
@ enums



#### Match - Match Enum Tuple

<cb>match <v>enum_value<> {
	Enum1::Value1 (<v>field_1<>) => { <v>...<> },
	Enum1::Value2 (<v>field_2<>) => { <v>...<> },
	Enum1::Value3 (<v>field_3<>, <v>field_4<>) => { <v>...<> },
	<v>...<>
};<>
@
@ enums, fields, values, elements



#### Match - Match Enum Struct

<cb>match <v>enum_value<> {
	Enum1::Value1 {<v>field_1<>} => { <v>...<> },
	Enum1::Value2 {<v>field_2<>} => { <v>...<> },
	Enum1::Value3 {<v>field_3<>, <v>field_4<>} => { <v>...<> },
	<v>...<>
};<>
@
@ enums, fields, values, elements



## While
@
@ while-only



### While

<cb>while <v>expression<> {
	<v>...<>
}<>

Loops until the expression evaluates to true.


Example:

<cb>let mut <v>value<> = 0;

while <v>value<> \< 5 {
	println!("{}", <v>value<>);
	<v>value<> += 1;
}

<#>\\ Prints values 0, 1, 2, 3, 4.<><>



### While - Break, Continue

<cb>while <v>expression<> {
	<v>...<>
	continue;
	<v>...<>
	break;
	<v>...<>
}<>



### While - While Let

<cb>while let <v>value<> = <v>item<> {
	<v>...<>
}<>



# Literals
@
@ literals-only, lit-only, literal-only


## Literals - Basics

<t>Boolean (<c>bool<>)		<|><c>= true | false<>
 
Byte (<c>u8<>)<|><c>= b'<v>C'<><>
 
Binary<|><c>= 0b<v>1111_0000<><>
Hex<|><c>= 0x<v>ff<><>
Octal<|><c>= 0o<v>77<><>
 
Integer<|><c>= <v>-11<><>
Integer<|><c>= <v>11<><>
Integer<|><c>= <v>12_345<><>
Integer / i32<|><c>= <v>11<>_i32<>
 
Float<|><c>= <v>11.23<><>
Float<|><c>= <v>-11.23<><>
Float<|><c>= <v>12_345.23_45<><>
Float / f32<|><c>= <v>11.23<>_f32<>
Float / f64<|><c>= <v>11.23<>_f64<>
 
Character<|><c>= '<v>c'<><>
String (<c>str<>)<|><c>= "<v>string"<><>
 
Array<|><c>= [<v>item_1<>, <v>item_2<>, <v>item_3<>]<>
Tuple<|><c>= (<v>item_1<>, <v>item_2<>, <v>item_3<>)<><>


Integer - One of:

<in><c>i8, i16, i32, i64, i128, isize
u8, u16, u32, u64, u128, usize<><>

Float - One of:

<in><c>f32, f64<><>
@
@ summary



## Literals - Details


### Boolean Literal

<cb>= true<>

<cb>= false<>

Returns:

<cb>bool<>
@
@ true, false



### Byte Literals

<cb>= b'<v>A<>'<>

Returns:

<cb>u8<>
@
@ b'', u8



### Bytes Literals

<cb>= b"<v>A Byte Array<>"<>

Returns:

<cb>[u8]<>
@
@ b"", [u8], u8, array



### Character Literal

<cb>= '<v>c<>'<>

Returns:

<cb>char<>
@
@ '', char



### Character Literal - Hex Character

<cb>'\\x<v>7f<>'<>


Defines an 7-bit character.


Range: 0 - 7f


Equivalent:

<cb>= '\\x<v>41<>''

= 'A'<>
@
@ ascii code, hex code, hexadecimal value, escaped
@ '\\x', \\x



### Character Literal - Unicode Hex Character

<cb>'\\u{<v>f<>}'
'\\u{<v>ffffff<>}'<>


Defines a Unicode character.

Must be a valid code point.


Range: 0 ... 0x10FFFF



Equivalent:

<cb>= '\\u{<v>41<>}'

= 'A'<>
@
@ unicode, ascii code, hex code, hexadecimal value, escaped
@ '\\u{}', \\u{}



### Float Literal

<cb>= <v>11.23<><>

<cb>= <v>-11.23<><>

<cb>= <v>12_345.67<><>

Type Explicitly Declared:

<cb>= <v>11.23<>f32<>

<cb>= <v>11.23<>_f32<>

Returns: Float Type

The return type depends on the type inference engine or the declared variable type but must be a float type.

@
@ f64, f32



### Integer Literal

<cb>= <v>11<><>

<cb>= <v>-11<><>

<cb>= <v>12_345<><>

Type Explicitly Declared:

<cb>= <v>11<>i32<>

<cb>= <v>11<>_i32<>

Returns: Integer Type

The return type depends on the type inference engine or the declared variable type.



### Integer Literal - Binary

<cb>= 0b<v>1100<><>

<cb>= 0b<v>_1111_0000<><>

Returns: Integer Type

The return type depends on the type inference engine or the declared variable type.
@
@ 0b



### Integer Literal - Hex

<cb>= 0x<v>ff<><>

Returns: Integer Type

The return type depends on the type inference engine or the declared variable type.
@
@ 0x, hexadecimal, value



### Integer Literal - Octal

<cb>= 0o<v>77<><>

Returns: Integer Type

The return type depends on the type inference engine or the declared variable type.
@
@ 0o



### String Literal

<cb>= "<v>A String<>"<>

Returns:

<cb>str<>

Stored in the code.
@
@ "", str



### String Literal - Escapes

<cb>"\\<v>x<>"<>

<table><col>Escape Syntax<><col><c>\\<v>x<><><>
<col> <>
<col>Backslash<><col><c>\\\\<><>
<col>Carriage Return<><col><c>\\r<><>
<col>Newline<><col><c>\\n<><>
<col>Tab<><col><c>\\t<><>
<col> <>
<col>Null<><col><c>\\0<><><>
@
@ tab, newline, backslash, carriage return, null
@ \\\\, \\r, \\n, \\t, \\0, "\\"



### String Literal - Hex Character

<cb>"\\x<v>7f<>"<>


Defines an 7-bit character.


Range: 0 - 7f


Equivalent:

<cb>= "\\x<v>41<>"

= "A"<>
@
@ ascii code, hex code, hexadecimal value, escaped
@ "\\x", \\x



### String Literal - Unicode Hex Character

<cb>"\\u{<v>f<>}"
"\\u{<v>ffffff<>}"<>


Defines a Unicode character.

Must be a valid code point.


Range: 0 ... 0x10FFFF



Equivalent:

<cb>= "\\u{<v>41<>}"

= "A"<>
@
@ unicode, ascii code, hex code, hexadecimal value, escaped
@ "\\u{}", \\u{}



### String Literal - Multiline

<cb>= "<v>Line 1
Line 2
Line 3<>"<>

Returns:

<cb>str<>


Returns a multiline string.

Use a normal string literal with embedded new lines to create a multiline string. 
@
@ "", str



### String Literal - Raw Escape

<cb>r"<#>text<>"
r#"<#>text<>"#
r###"<#>text<>"###<>


Defines a string with the exact contents between the start and end quotes.

No escapes required for characters that normally require them (e.g. ", \\). 
Define the starting and ending quotes with hashes (#) to allow quote and hash characters inside the string.


Examples:

<cb>= "<#>Text \\t using escapes.<>"			<s>// \\t -> tab character<>
= r"<#>Text \\t ignoring escapes<>"		<s>// \\t -> "\\t" (unchanged)<>

= "<#>Quotes \\" \\" requiring escapes.<>"
= r#"<#>Qoutes " " without escapes.<>"#

= r##"<#>Qoutes " " and single # hashes # without escapes.<>"##<>
@
@ r", r#", r##"



# Variables
@
@ vars-only, var-only, variable-only, variables-only, assignment


## Variables - Basics

Declare Only:

<cb>let <v>name<>: <v>type<>;<>

Constant:

<cb>const <v>name<>: <v>type<> = <v>value<>;<>

Immutable:

<cb>let <v>name<>: <v>type<> = <v>value<>;<>

With Type Inferencing:

<cb>let <v>name<> = <v>value<>;<>

Mutable:

<cb>let mut <v>name<>: <v>type<> = <v>value<>;<>

Update Mutable:

<cb><v>name<> = <v>new_value<>;<>
@
@ summary



## Variable - Create
@
@ create, new, instantiate


### Variable - Constant - Create

<cb>const <v>name<>: <v>type<> = <v>value<>;<>


Defines a constant, an immutable variable.

Constants can be declared globally outside a function.
The type must be declared (no type inferencing).

The compiler replaces the constant identifier with the actual value at compile time.


Example:

<cb>const <v>OK_STATUS_CODE<>: i32 = 200;

fn main() {
	println!("OK Status = {}", <v>OK_STATUS_CODE<>);
}
<>
@
@ const, global



### Variable - Local - Create

<cb>let <v>name<>: <v>type<> = <v>value<>;<>

<cb>let <v>name<> = <v>value<>;<>


Creates an immutable variable.

If the type is not included, the inference engine will try to determine it from the use of the variable.


Example:

<cb>let <v>int_1<>: i32 = 42;<>
@
@ immutable, let, scope#



### Variable - Static - Create

<cb>static <v>STATIC_1<>: <v>type<> = <v>value<>;<>


Creates a global immutable variable.

Static data is stored in the compiled binary.
Statics can be created inside or outside functions.
You <b>must<> declare the type for a static variable (no type inferencing).


Example:

<cb>static <v>INT_1<>: i32 = 42;

println!("{}", <v>INT_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.static.html">Static<>
@
@ immutable, static, global, scope



### Variable - Static - Create With 'static

<cb>static <v>STATIC_1<>: &'static <v>type<> = &<v>value<>;<>


Creates a global immutable variable.

<c>'static<> indicates the value lives for the entire life of the program.

Static data is stored in the compiled binary.
Statics can be created inside or outside functions.
You must declare the type for a static variable (no type inferencing).


Examples:

<cb>static <v>INT_1<>: &'static i32 = &42;

println!("{}", <v>INT_1<>);

<#>// Prints: "42"<><>

<cb>static <v>STR_1<>: &'static str = "42";

println!("{}", <v>STR_1<>);

<#>// Prints: "42"<><>
@
@ static, 'static
@ immutable, static, global, scope



### Variable - Mutable - Create

<cb>let mut <v>name<>: <v>type<> = <v>value<>;<>


Creates a mutable variable.


Example:

<cb>let mut <v>int_1<>: i32 = 42;
<v>int_1<> = int_1 + 10;<>
@
@ let, mut



### Variable - Create With Type Inferencing

<cb>let <v>name<> = <v>value<>;<>


This will create a variable of type matching the value.


Example:

<cb>let <v>int_1<> = 42;

<#>// Assigns int_1 as type i32;<><>
@
@ let



### Variable - Define Before Use

<cb>let <v>name<>: <v>type<>;<>

<cb>let mut <v>name<>: <v>type<>;<>


Define a variable before assiging a value.
The value must be assigned at some point afterwards.


Example:

<cb>let <v>value<>:i32;

let <v>flag<> = true;

if <v>flag<> {
	<v>value<> = 1;
}
else {
	<v>value<> = -1;
}

<#>// Sets value to 1.<><>
@
@ predefine



## Variable Operations



### Variable - Cast

<cb>= <v>value<> as <v>type<><>


Converts a value from one type to another.

Casting never happens implicitly.
You must always explicitly cast your variables.


Example:

<cb>let <v>value<> = 10_i32;

<v>value_i8<> = <v>value<> as i8;

println!("Value is {}", <v>value_i8<>)<>
@
@ as type, change, convert, conversion



### Variable - Memory Size

<cb>= size_of_val(&<v>value_1<>)<>

<cb>use std::mem::size_of_val;

= size_of_val(&<v>value_1<>)<>


Returns the memory used by a variable in bytes.


Example:

<cb>use std::mem::size_of_val;

let <v>value<>: i64 = <v>42<>;

println!("Size of value = {}.", size_of_val(&<v>value<>));

<#>// Prints: "Size of value = 8."<><>
@
@ get, retrieve, std::mem::size_of_val(), size_of_val()



### Variable - Type - Get Type

<cb>= type_name::\<<v>T<>>()<>

Use as a Function:

<cb>use std::any::type_name;

fn type_of\<<v>T<>>(_: <v>T<>) -> &'static str {
	type_name::\<<v>T<>>()
}

let <v>type_1<> = type_of(<v>variable_1<>);<>


Returns the variable type as a string.

Not guaranteed to give consistent results.
Use for testing only.


Example:

<cb>use std::any::type_name;

fn type_of\<<v>T<>>(_: <v>T<>) -> &'static str {
	type_name::\<<v>T<>>()
}

let <v>type_name<> = type_of(<v>1<>_i32);
println! ("Type = {}", <v>type_name<>);

<#>// Prints "Type = i32"<><>
@
@ std::any::type_name, type_name, get, retrieve, type of



## Variable Scope


### Variable Scope - Basics

Global, Local, Block:

<cb>static <v>global_variable<>:i32 = 1;

fn <v>func1<>() {

	let <v>local_variable<> = 2;

	{
		let <v>block_variable<> = 3;
	}
}<>

Shadowing:

<cb>fn <v>func1<>() {

	let <v>variable_1<> = 1;

	{
		<#>// Block, Shadows Outer Variable:<>
		let <v>variable_1<> = 2;
	}
}<>
@
@ summary



### Variable Scope - Shadowing

Shadowing happens when a block variable overshadows a local variable of the same name.
The local variable is not accessable while the block variable is in scope.

Global (static) variables can NOT be shadowed.


Example:

<cb>let <v>a<> = <v>1<>;
println!("local a = {}", <v>a<>);

{
	let <v>a<> = <v>2<>;
	println!("block a = {}", <v>a<>);
}

println!("local a = {}", <v>a<>);<>



## Variables - let vs const vs static

let:

<in>Defines a variable with local scope.<>

static:

<in>Defines a variable with global scope.<>

const:

<in>Defines a value.
The compiler replace every use of the constant with the actual value at compile time.<>
@
@ versus, scope



## Let - Refutability Test

Let runs a refutability test before assigning a value.

It checks to see if the new value is (or can be) different to the current value.
If is different, then it is <b>refutable<>.
If not, it is <b>irrefutable<>.

<card><table><col>Refutable		<><col>Returns <c>true<><>
<col>Irrefutable<><col>Returns <c>false<><><><>
@
@ refutable, irrefutable



# References / Pointers
@
@ reference-only, references-only
@ ptr-only, pointer-only, pointers-only


### Reference - Basics

<b>Declaration:<>

<table><col>Value<><col><v>T<><>
<col>Value, Mutable<><col>mut <v>T<><>
<col> <>
<col>Reference (Pointer)<><col>&<v>T<><>
<col>Reference (Pointer), Mutable<><col>&mut <v>T<><>
<col> <>
<col>Raw Pointer<><col>*const <v>T<><><col>Unsafe Read Access<>
<col>Raw Pointer, Mutable<><col>*mut <v>T<><>
<col> <>
<col>Heap Allocated Value<><col>Box\<<v>T<>><><col>Single Read / Write Owner<>
<col>Heap Allocated Value<><col>Rc\<<v>T<>><><col>Single Owner / Multiple Readers<>
<col>Heap Allocated Value<><col>Arc\<<v>T<>><><col>Single Owner / Multiple Readers / Thread Safe<><>


<b>Assignment:<>

<table><col>Value<><col>= <v>var_1<><>
<col>Borrow (Reference, Pointer)<><col>= &<v>var_1<><>
<col>Borrow, mutable (Reference, Pointer)<><col>= &mut <v>var_1<><>
<col>Dereferenced Pointer<><col>= *<v>var_1<><><>

<image "pointers.png">
@
@ summary



### Reference - Dereference

<cb>= *<v>item_1<>;<>

Returns:

<cb>\<<v>T<>><>


Access the data stored in <c>item1<>'s memory address.


Visualized:

<cb><v>item1<> ───▶ pointer ───▶ data
						 ▲
						 │
*<v>item<> ───────────────────┘<>
@
@ *, memory



### Reference - Double Reference

<cb>= &&<v>item_1<><>

<cb>let <v>item_1<> : &&<v>T<> = <v>...<><>


Defines a pointer to a pointer to a value.


Visualized:

<cb><v>item1<> ───▶ pointer ───▶ pointer ───▶ data<>
@
@ &&, double ampersand, pointer to a pointer, memory



### Reference - Double Reference - Dereference

<cb>= *<v>double_ref_item_1<><>

Returns:

<cb>&\<<v>T<>><>

Usage:

<cb>= (*<v>double_ref_item_1<>).<v>method<>()<>


Drops the first pointer and returning the second.


Visualized:

<cb><v>double_ref_item_1<> ───▶ pointer ───▶ pointer ───▶ data
									   ▲
									   │
*<v>double_ref_item_1<> ────────────────────┘<>
@
@ *
@ &&, double ampersand, pointer to a pointer, memory



### Reference - Print Memory Location

<cb>println!("{:p}", &<v>item<>);<>
@
@ {:p}, :p



### Reference - Borrow Error - Dangling Reference

<cb>let <v>outer_scope<>;

{
	let <v>inner_scope<> = 42;
	<v>outer_scope<> = &<v>inner_scope<>;
}

println!("{}", <v>outer_scope<>);<>

Here <c>outer_scope<> tries to borrow and then access a value after it goes out of scope.

Returns this error:

<cb><!>borrowed value does not live long enough<><>



# Ownership
@
@ ownership-only


### Ownership - Rules - Owner

1. Resources have one and only one owner.
2. When the owner goes out of scope, the resource is freed.
3. Ownership is movable (transferable).



### Ownership - Rules - Borrow Immutable

1. There is no limit on the number of borrowers.
2. Immutable borrowers prevents any mutable borrows.



### Ownership - Rules - Borrow Mutable

1. One and only one mutable borrower at a time.
2. Mutable borrow is not allowed while there are immutable borrowers.



### Ownership - Syntax - Borrow Immutable

<cb>&<v>owner<><>

By Assignment:

<cb>let <v>borrower<> = &<v>owner<>;<>

When Passing:

<cb><v>function_1<>(&<v>owner<>);<>


Borrow (pass) a resource without passing ownership of it.

Use ampersand (<c>&<>) to denote borrowing.
There is no limit on the number of borrowers for an immutable resource.


Examples:

<cb>let <v>owner<> = Box::new(<v>42<>_i32);

let <v>borrower<> = &<v>owner<>;

println!("{}", &<v>owner<>);
println!("{}", <v>borrower<>);

<#>// Prints:
//
//    "42"
//    "42"<><>
@
@ &, borrowing



### Ownership - Syntax - Borrow Mutable

<cb>&mut <v>owner<><>

By Assignment:

<cb>let <v>borrower<> = &mut <v>owner<>;<>

When Passing:

<cb><v>function_1<>(&mut <v>owner<>);<>


Borrow (pass) a mutable resource without passing ownership of it.

Use ampersand mut (<c>&mut<>) to denote borrowing.
There can only be one mutable borrower at a time for a mutable resource.
There can be any number of immutable borrowers, but if there are, no mutable borrowers are allowed.


Examples:

<cb>let mut <v>owner<> = Box::new(<v>42<>_i32);

let <v>borrower<> = &mut <v>owner<>;

println!("{}", <v>borrower<>);

<#>// Prints:
//
//    "42"
//    "42"<><>
@
@ &, mut



### Ownership - Moving Ownership

By Assignment:

<cb>let <v>new_owner<> = <v>owner<>;<>

When Passing:

<cb><v>function_1<>(<v>owner<>);<>


Passes ownership of the resource to the new variable or to the called function.

After a move, <v>owner<> can not be referenced.


Examples:

By Assignment:

<cb>let <v>owner<> = Box::new(<v>42<>_i32);

let <v>new_owner<> = <v>owner<>;

<#>// NO:
// println!("{}", owner);<>

<#>// YES:<>
println!("{}", <v>new_owner<>);

<#>// Prints: "42"<><>

By Passing:

<cb>fn <v>take_ownership<>(<v>value<>: Box\<i32>) {
	println!("{}", <v>value<>);
}

let <v>owner<> = Box::new(<v>42<>_i32);

<v>take_ownership<>(<v>owner<>);
<#>// Prints: "42"<>

<#>// NO!
// println!("{}", owner);<><>
@
@ move, take



# Pattern Matching


### Pattern Matching - Own

Example:

<cb>if let Some(<v>value<>) = <v>option_value_1<> { <v>...<> }<>


Takes ownership of the wrapped value.

Without either ref or ref mut, the right hand value is moved out of the wrapping item and ownership is moved to the variable on the left of the =.



### Pattern Matching - Reference

Example:

<cb>if let Some(ref <v>value<>) = <v>option_value_1<> { <v>...<> }<>


Borrows the wrapped value.
@
@ borrow
@ ref



### Pattern Matching - Reference Mutably

Example:

<cb>if let Some(<v>value<>) = <v>option_value_1<> {
	*<v>value<> = <v>...<>;
}<>


Borrows and mutates the wrapped  value.
@
@ mutate, borrow
@ ref mut



# Types


### Type - Type Aliasing

<cb>type <v>Alias1<> = <v>Type<>;<>


Allows you to create an alias for a type for readability.


Example:

<cb>type <v>Kilometers<> = usize;

let <v>distance<>: <v>Kilometers<> = 42;<>
@
@ define custom type, assign



### Type - Type Aliasing With Generics

<cb>type <v>Alias1<>\<<v>T<>> = <v>Type<>\<<v>T<>>;
type <v>Alias1<>\<<v>T<>> = <v>Type<>\<<v>T<>, <v>U<>, <v>V<>>;<>


Allows you to create an alias for a type with generics for readability.


Example:

<cb>type <v>MyResult<>\<<v>T<>> = Result\<<v>T<>, <v>MyError<>>;<>
@
@ define custom type, assign



### Type - Type Inferencing

Rust determines the variable type by looking ahead to see how it is used.
It then creates variable of the correct type.

Note:
You must use the correct literal types. You can not substitute integers for floats or vice versa.


Example:

Infer type of <c><v>value<><>:

<cb><#>// Infers value as i64:<>

fn <v>square<>(<v>x<>: i64) -> i64 {
	<v>x<> * <v>x<>
}

fn main() {

	<#>// Infer type:<>
	let <v>value<> = <v>4<>;

	<#>// Inference happens here: i64<>
	let <v>square<> = square(<v>value<>);

	println!("{} squared is {}.", <v>value<>, <v>square<>);
}<>



# Data Types
@
@ standard, builtin, data-types-only


## Primitive Types

By Type:

<in><table><col>Array<><col><c>array<><>
<col>Boolean<><col><c>bool<><>
<col>Character<><col><c>char<><>
<col> <>
<col>Float,  32-bit  Single Precision<><col><c>f32<><>
<col>Float,  64-bit,  Double Precision<><col><c>f64<><>
<col> <>
<col>Function<><col><c>fn<><>
<col> <>
<col>Integer,  Signed (size is OS specific)<><col><c>isize<><>
<col> <>
<col>Integer,  Signed,  128-bit<><col><c>i128<><>
<col>Integer,  Signed,  16-bit<><col><c>i16<><>
<col>Integer,  Signed,  32-bit<><col><c>i32<><>
<col>Integer,  Signed,  64-bit<><col><c>i64<><>
<col>Integer,  Signed,  8-bit<><col><c>i8<><>
<col> <>
<col>Integer,  Unsigned (size is OS specific)<><col><c>usize<><>
<col> <>
<col>Integer,  Unsigned,  128-bit<><col><c>u128<><>
<col>Integer,  Unsigned,  16-bit<><col><c>u16<><>
<col>Integer,  Unsigned,  32-bit<><col><c>u32<><>
<col>Integer,  Unsigned,  64-bit<><col><c>u64<><>
<col>Integer,  Unsigned,  8-bit<><col><c>u8<><>
<col> <>
<col>Raw, Unsafe Pointer<><col><c>pointer<><>
<col>Reference, Shared or Mutable<><col><c>ref<><>
<col>Slice (view into a sequence)<><col><c>slice<><>
<col>String<><col><c>str<><>
<col>Tuple<><col><c>tup<><>
<col> <>
<col>Never, ! Type<>
<col>Unit, () Type<><col><c>unit<><><><>

By Symbol:

<in><table><col><c>bool<>		<><col>Boolean<>
<col> <>
<col><c>i8<><><col>Integer,  Signed,  8-bit<>
<col><c>i16<><><col>Integer,  Signed,  16-bit<>
<col><c>i32<><><col>Integer,  Signed,  32-bit<>
<col><c>i64<><><col>Integer,  Signed,  64-bit<>
<col><c>i128<><><col>Integer,  Signed,  128-bit<>
<col> <>
<col><c>isize<><><col>Integer,  Signed (size is OS specific)<>
<col> <>
<col><c>u8<><><col>Integer,  Unsigned,  8-bit<>
<col><c>u16<><><col>Integer,  Unsigned,  16-bit<>
<col><c>u32<><><col>Integer,  Unsigned,  32-bit<>
<col><c>u64<><><col>Integer,  Unsigned,  64-bit<>
<col><c>u128<><><col>Integer,  Unsigned,  128-bit<>
<col> <>
<col><c>usize<><><col>Integer,  Unsigned (size is OS specific)<>
<col> <>
<col><c>f32<><><col>Float,  32-bit  Single Precision<>
<col><c>f64<><><col>Float,  64-bit,  Double Precision<>
<col> <>
<col><c>char<><><col>Character<>
<col><c>str<><><col>String<>
<col> <>
<col><c>array<><><col>Array<>
<col><c>tup<><><col>Tuple<>
<col><c>slice<><><col>Slice (view into a sequence)<>
<col> <>
<col><c>fn<><><col>Function<>
<col> <>
<col><c>pointer<><><col>Raw, Unsafe Pointer<>
<col><c>ref<><><col>Reference, Shared or Mutable<>
<col> <>
<col><c>unit<><><col>Unit, () Type<><><>


Floats: IEEE-754 Standard.

Rust Docs: <l "https://doc.rust-lang.org/book/ch03-02-data-types.html">Data Types<>  |  <l https://doc.rust-lang.org/std/#primitives<>Primitives<>
@
@ integer, float, standard


## Primitive Collection Types

<table><col><c>[]<><><col>Array (Immutable List)<>
<col><c>[<v>T<>]<><><col>Slice<>
<col><c>()<><><col>Tuple (Immutable Compound Data Type)<><>



## Standard Collection Types

<table><col>Queues:<>
<col> <>
<col><c><l "&q=binaryheap-only">BinaryHeap<>\<<v>T<>><><><col>Priority Queue<>
<col> <>
<col>Sets, Maps:<>
<col> <>
<col><c><l "&q=btreemap-only">BTreeMap<>\<<v>K<>, <v>V<>><><><col>Sorted Key Value Map<>
<col><c><l "&q=btreeset-only">BTreeSet<>\<<v>T<>><><><col>Sorted Set<>
<col><c><l "&q=hashmap-only">HashMap<>\<<v>K<>, <v>V<>><><><col>Key Value Map<>
<col><c><l "&q=hashset-only">HashSet<>\<<v>T<>><><><col>Set<>
<col> <>
<col>Sequences:<>
<col> <>
<col><c><l "&q=linkedlist-only">LinkedList<>\<<v>T<>><><><col>Double Linked List<>
<col><c><l "&q=vec-only">Vec<>\<<v>T<>><><><col>Vector (Mutable List)<>
<col><c><l "&q=vecdeque-only">VecDeque<>\<<v>T<>><><><col>Double Ended Queue<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>
@
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ summary



## Standard Enum Types
<meta>
index: tags
index-to: word
<>

<t><c>Option\<<v>T<>><>		<|><l "?q=option-only">Option<>
<c>Result\<<v>T<>, <v>E<>><><|><l "?q=result-only">Result<>

<c>Cow\<<v>T<>><|><l "?q=cow-only">Cow<><>
@
@ Standard Collections Types, enums
@ std-enum-types, standard-enum-types, system-enum-types, sys-enum-types
@ summary



# Boolean

<cb>= true
= false<>

<cb>let <v>bool_1<> = true;<>

<cb>let <v>bool_1<>: bool = true;<>

Type:

<cb>bool<>


Creates a boolean variable.


Examples:

With Type Literals:

<cb>let <v>bool_1<> = true;

println!("{}", <v>bool_1<>);

<#>// Prints: "true"<><>

With Type Declaration:

<cb>let <v>bool_1<>: bool = <v>false<>;

println!("{}", <v>bool_1<>);

<#>// Prints: "false"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.bool.html">bool<>
@
@ true, false
@ bool-only, bools-only, booleans, boolean-only, booleans-only
@ data type
@ std::bool, ::bool



# Byte

<cb>= b'<v>c<>'<>

<cb>= 0x<v>FF<>_u8<>

<cb>let <v>byte_1<>: u8 = b'<v>c<>';<>

Returns:

<cb>u8<>


Creates a byte value.
Stored as type <c>u8<>.


Example:

From Byte Literal:

<cb>let <v>byte_1<> = b'<v>x<>';

println!("{}", <v>byte_1<>);
println!("{}", <v>byte_1<> as char);

<#>// Prints:
//
//    120
//    x<><>

From Hex Literal:

<cb>let <v>byte_1<> = 0x<v>78<>_u8;

println!("{}", <v>byte_1<>);
println!("{}", <v>byte_1<> as char);

<#>// Prints:
//
//    120
//    x<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.u8.html">u8<>
@
@ b''
@ bytes, byte-only, bytes-only
@ data type
@ std::u8, ::u8, u8, std::byte, ::byte



# Byte - Operations
@
@ u8, b''
@ bytes, byte-only, bytes-only
@ data type
@ std::u8, ::u8, u8, std::byte, ::byte



### Byte - To Character

<cb>= <v>byte_1<> as char<>

<cb>let <v>char_1<>: char = <v>byte_1<> as char<>


Coverts a byte to a character.


Example:

<cb>let <v>byte_1<> = b'z';

let <v>char_1<> = <v>byte_1<> as char;

println!("{}", <v>char_1<>);

<#>// Prints: "z"<><>
@
@ convert, converting, conversion, from, as, cast, char



# Char

A single unicode character.

Size: 4 Bytes
Range: 0...1114111 (0x10FFF)
Surrog

The unicode character is a code points in the range of 0 to 0x10FFFF

Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>
@
@ character, characters
@ char-only, character-only
@ std::char, ::char


## Char - Create

<cb>= '<v>c<>'<>

<cb>let <v>char_1<>: char = '<v>c<>';<>

Type:

<cb>char<>

Size: 4 Bytes


Represents a Unicode scalar value.


Examples:

From Literal:

<cb>let <v>char_1<> = '*';

println!("{}", <v>char_1<>);

<#>// Prints: "*"<><>

With Type Declaration:

<cb>let <v>char_1<>: char = '*';

println!("{}", <v>char_1<>);

<#>// Prints: "*"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>
@
@ char, char-only, chars, chars-only
@ character-only, characters-only



## Char - Properties


### Char - Is Alphabetic?

<cb>= <v>char_1<>.is_alphabetic()<>

Returns:

<cb>bool<>


Returns true if the character is a valid alphabetic character (see standard).


Examples:

<cb>let <v>char_1<> = 'a';
println!("{}", <v>char_1<>.is_alphabetic());

<#>// Prints: true<><>

<cb>let <v>char_1<> = '1';
println!("{}", <v>char_1<>.is_alphabetic());

<#>// Prints: false<><>

<cb>let <v>char_1<> = 'ㅏ';
println!("{}", <v>char_1<>.is_alphabetic());

<#>// Prints: true<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_alphabetic">is_alphabetic()<>

Unicode Docs: <l https://www.unicode.org/reports/tr44/>Unicode Character Database<>
@
@ charis_alphabetic(), is_alphabetic()




### Char - Is Alphanumeric?

<cb>= <v>char_1<>.is_alphanumeric)<>

Returns:

<cb>bool<>


Returns true if the character is either a number or valid alphabetic character (see standard).


Examples:

<cb>let <v>char_1<> = 'a';
println!("{}", <v>char_1<>.is_alphanumeric());

<#>// Prints: true<><>

<cb>let <v>char_1<> = ' ';
println!("{}", <v>char_1<>.is_alphanumeric());

<#>// Prints: false<><>

<cb>let <v>char_1<> = 'ㅏ';
println!("{}", <v>char_1<>.is_alphanumeric());

<#>// Prints: true<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric">is_alphanumeric()<>

Unicode Docs: <l https://www.unicode.org/reports/tr44/>Unicode Character Database<>
@
@ char.is_alphanumeric(), .is_alphanumeric()



### Char - Is ASCII?

<cb>= <v>char_1<>.is_ascii()<>

Returns:

<cb>bool<>


Returns true if an ASCII character.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>.<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_ascii">is_ascii()<>
@
@ value
@ char.is_ascii(), .is_ascii()


### Char - Is Digit?

<cb>= <v>char_1<>.is_digit(<v>radix<>)<>

Returns:

<cb>bool<>


Returns true if the character represents a valid number within the radix or base of the number.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>.<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_digit">is_digit()<>
@
@ value, integer, radix, base
@ char.is_digit(), .is_digit()



### Char - Is White Space?

<cb>= <v>char_1<>.is_whitespace)<>

Returns:

<cb>bool<>


Returns true if the character is a white space.


Examples:

<cb>let <v>char_1<> = ' ';
println!("{}", <v>char_1<>.is_whitespace());

<#>// Prints: true<><>

<cb>let <v>char_1<> = 'x';
println!("{}", <v>char_1<>.is_whitespace());

<#>// Prints: false<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_whitespace">is_whitespace()<>
@
@ whitespace, white-space
@ char.is_whitespace(), .is_whitespace()



## Char - Operations


### Char - Repeat

<cb>= <v>char_1<>.to_string().repeat(<v>count<>)<>

Returns:

<cb>String<>


Repeats a character and returns as a string.

Obviously you are better off just starting with a string.


Example:

<cb>let <v>stars<>: String = '*'.to_string().repeat(10);

println!("{}", <v>stars<>);

<#>// Prints: "**********"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>
@
@ expand, multiply
@ char.repeat(), .repeat()



## Char - Convert
@
@ from, convert, conversion, converting, into, char
@ from char, char-to, char-into
@ from character, character-to, character-into


### Char - To Bytes

<cb>fn to_bytes(<v>value<>: char) -> Vec\<u8> {
    let mut <v>bytes<> = vec![0; 4];
    let length = <v>value<>.encode_utf8(&mut <v>bytes<>).len();
    <v>bytes<>.truncate(length);
    <v>bytes<>
}

let bytes = to_bytes(<v>char_1<>);<>


Converts a char to bytes.

Works by first converting to a utf-8 string.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8">encode_utf8<>
@
@ to-bytes



### Char - To Digit

<cb>= <v>char_1<>.to_digit(<v>radix<>)<>

Returns:

<cb>Option\<u32><>


Converts the character into its representative integer value for the given radix (base).


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>.<l "https://doc.rust-lang.org/std/primitive.char.html#method.to_digit">to_digit()<>
@
@ character, value, integer
@ char.to_digit(), .to_digit()



### Char - To Hex

<cb>= format!("{:x}", <v>value<> as u32)<>

Usage:

<cb>println!("{:x}", &<v>value<>)<>


Converts a character into a hexadecimal value.

Convert to <c>u32<> and then format like any integer.
@
@ to-hex, to-hexadecimal, format



### Char - To Integer

<cb>= <v>value<> as u32<>
@
@ to-integer, to-u32
@ as u32



### Char - To Str

<cb>let mut <v>bytes<> = vec![0; 4];
= <v>value<>.encode_utf8(&mut <v>bytes<>)<>

Returns:

<cb>&mut str<>


Converts a char to a string.

Returns the sub-slice of the bytes that is the character.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l https://doc.rust-lang.org/std/primitive.char.html#method.encode_utf8>encode_utf8<>
@
@ string
@ to-str, to-string
@ char.encode_utf8(), .encode_utf8()



# Floats
@
@ float-only, floats-only


## Float - Basics

<table><col><c>f32<>		<><col>Float, 32-bit Single Precision<>
<col><c>f64<><><col>Float, 64-bit, Double Precision<><>
@
@ basics


## Float - 32-Bit, Single Precision

<cb>= <v>number<>_f32<>

<cb>let <v>float_1<>: f32 = <v>number<>;<>


Type:

<cb>f32<>


Float, 32-Bit, Single Precision


Size:	4 Bytes (32 bits)
Range:	-3.40282347 x 10<super>38<> ... 3.40282347 x 10<super>38<>


Examples:

With Literal:

<cb>let <v>float_1<> = <v>11.23<>_f32;

println!("{}", <v>float_1<>);

<#>// Prints: "11.23"<><>

With Type Declaration:

<cb>let <v>float_1<>: f32 = <v>11.23<>;

println!("{}", <v>float_1<>);

<#>// Prints: "11.23"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>
@
@ f32, f32-only, f32s-only
@ data type
@ std::f32, ::f32



## Float - 64-Bit, Double Precision

<cb>= <v>number<>_f64<>

<cb>let <v>float_1<>: f64 = <v>number<>;<>


Type:

<cb>f64<>


Float, 64-Bit, Double Precision


Size:	8 Bytes (64 bits)
Range:	-1.7976931348623157 x 10<super>308<> ... 1.7976931348623157 x 10<super>308<>


Examples:

With Type Literals:

<cb>let <v>float_1<> = <v>11.23<>_f64;

println!("{}", <v>float_1<>);

<#>// Prints: "11.23"<><>

With Type Declaration:

<cb>let <v>float_1<>: f64 = <v>11.23<>;

println!("{}", <v>float_1<>);

<#>// Prints: "11.23"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>
@
@ f64, f64-only, f64s-only
@ floats, float-only, floats-only
@ data type
@ std::f64, ::f64



# Float - Operations
@
@ f32, f64
@ std::f32, ::f32, std::64, ::64


### Float - Ceiling

<cb>= <v>float_1<>.ceil()<>

<cb>= <v>float_type<>::ceil(<v>float_value<>)<>

Returns:

<cb>f64<>


Rounds a float up to the nearest integer value.

Returns a float.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>.<l "https://doc.rust-lang.org/std/primitive.f32.html#method.ceil">ceil()<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>.<l "https://doc.rust-lang.org/std/primitive.f64.html#method.ceil">ceil()<>
@
@ round up
@ .ceil(), .ceiling()



### Float - Floor

<cb>= <v>float_1<>.floor()<>

<cb>= <v>float_type<>::floor(<v>float_value<>)<>

Returns:

<cb>f64<>


Rounds a float down to the lowest integer value.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>.<l "https://doc.rust-lang.org/std/primitive.f32.html#method.floor">floor()<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>.<l "https://doc.rust-lang.org/std/primitive.f64.html#method.floor">floor()<>
@
@ round down
@ .floor()



### Float - Power

<cb>= <v>float_1<>.powf(<v>float_power<>)<>

<cb>= <v>float_type<>::powf(<v>float_value<>, <v>float_power<>)<>

Returns:

<cb>Float<>


Returns the power of an floatwhen the power is a float.


Examples:

<cb>let <v>value<>: f32 = 4.0;
let <v>square<> = <v>value<>.powf(<v>2.0<>);

println!("{} squared is {}.", <v>value<>, <v>square<>);

<#>// Prints "4 squared is 16."<><>

<cb>let <v>value<>: f32 = 4.0;
let <v>square<> = f32::powf(<v>value<>, <v>2.0<>);

println!("{} squared is {}.", <v>value<>, <v>square<>);

<#>// Prints "4 squared is 16."<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>.<l "https://doc.rust-lang.org/std/primitive.f32.html#method.powf">powf()<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>.<l "https://doc.rust-lang.org/std/primitive.f64.html#method.powf">powf()<>
@
@ .powf(), square



### Float - Power (Integer Power)

<cb>= <v>float_1<>.powi(<v>int_power<>)<>

<cb>= <v>float_type<>::powi(<v>float_value<>, <v>int_power<>)<>

Returns: Float


Returns the power of an float when the power is an integer.


Examples:

<cb>let <v>value<>: f32 = 4.0;
let <v>square<> = <v>value<>.powi(<v>2<>);

println!("{} squared is {}.", <v>value<>, <v>square<>);

<#>// Prints "4 squared is 16."<><>

<cb>let <v>value<>: f32 = 4.0;
let <v>square<> = f32::powi(<v>value<>, <v>2<>);

println!("{} squared is {}.", <v>value<>, <v>square<>);

<#>// Prints "4 squared is 16."<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>.<l "https://doc.rust-lang.org/std/primitive.f32.html#method.powi">powi()<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>.<l "https://doc.rust-lang.org/std/primitive.f64.html#method.powi">powi()<>
@
@ .powi(), square



### Float - Round

<cb>= <v>float_1<>.round()<>

<cb>= <v>float_type<>::round(<v>float_value<>)<>

Returns:

<cb>f64<>


Rounds a float without the decimal value.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>.<l "https://doc.rust-lang.org/std/primitive.f32.html#method.round">round()<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>.<l "https://doc.rust-lang.org/std/primitive.f64.html#method.round">round()<>
@
@ round
@ .round()



### Float - To Radians

<cb>= <v>float_1<>.to_radians();<>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f32.html">f32<>.<l "https://doc.rust-lang.org/std/primitive.f32.html#method.to_radians">to_radians()<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.f64.html">f64<>.<l "https://doc.rust-lang.org/std/primitive.f64.html#method.to_radians">to_radians()<>
@
@ convert, conversion
@ from pi, pi-to, to-radians
@ .to_radians(), .radians()



# Float - Conversions
@
@ from, convert, conversion, converting
@ from float, float-to, float-into, into
@ f32, f64
@ std::f32, ::f32, std::64, ::64


### Float - To String

<cb>= <v>float_1<>.to_string()<>
@
@ .to_string(), float.to_string()
@ to-string



# Integer
@
@ int-only, integer-only, integers-only
@ from integer, integer-to



## Integer - Basics

<table><col><c>i8<>		<><col>Integer, 8-bit Signed<>
<col><c>i16<><><col>Integer, 16-bit Signed<>
<col><c>i32<><><col>Integer, 32-bit Signed<>
<col><c>i64<><><col>Integer, 64-bit Signed<>
<col><c>i128<><><col>Integer, 128-bit Signed<>
<col> <>
<col><c>isize<><><col>Integer, Signed (size is OS specific)<>
<col> <>
<col><c>u8<><><col>Integer, 8-bit Unsigned<>
<col><c>u16<><><col>Integer, 16-bit Unsigned<>
<col><c>u32<><><col>Integer, 32-bit Unsigned<>
<col><c>u64<><><col>Integer, 64-bit Unsigned<>
<col><c>u128<><><col>Integer, 128-bit Unsigned<>
<col> <>
<col><c>usize<><><col>Integer, Unsigned (size is OS specific)<><>
@
@ types, summary


## Integer - 8-Bit, Signed

<cb>= <v>number<>_i8<>

<cb>let <v>int_1<>: i8 = <v>number<>;<>

Type:

<cb>i8<>


Integer, 8-bit Signed


Size:	1 Byte (8 bits)
Range:	-128 ... 127


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_i8;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: i8 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.i8.html">i8<>
@
@ i8, i8-only, i8s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ 127, -128
@ std::i8, ::i8



## Integer - 8-Bit, Unsigned

<cb>= <v>number<>_u8<>

<cb>let <v>int_1<>: u8 = <v>number<>;<>

Type:

<cb>u8<>


Integer, 8-bit Unsigned


Size:	1 Byte (8 bits)
Range:	0 ... 255


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_u8;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: u8 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.u8.html">u8<>
@
@ u8, u8-only, u8s-only
@ byte, byte-only, bytes-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 255
@ std::u8, ::u8



## Integer - 8-Bit, Unsigned - Conversion
@
@ u8, u8-only
@ u8s, u8s-only, byte
@ byte, byte-only, bytes-only
@ data type
@ from, convert, conversion, converting
@ from integer, integer-to, int-to
@ std::u8, ::u8



### Integer - 8-Bit, Unsigned - To Character

<cb>= <v>u8_1<> as char<>

<cb>let <v>char_1<>: char = <v>u8_1<> as char<>


Coverts a u8 integer to a character.


Example:

<cb>let <v>u8_1<> = <v>42<>_u8;

let <v>char_1<> = <v>u8_1<> as char;

println!("{}", <v>char_1<>);

<#>// Prints: "*"<><>
@
@ u8-to, from u8, from byte, byte-to, to-char



### Integer - Bytes Vec - To String

<cb>= String::from_utf8(<v>bytes<>)

= String::from_utf8(<v>u8_vec<>)<>

Returns:

<cb>Result\<String, FromUtf8Error><>


Coverts a UTF-8 byte (u8 integer) into a character.


Example:

<cb>let <v>bytes<>: Vec\<u8> = vec![84, 101, 120, 116, 33];

let <v>text<>: String = String::from_utf8(<v>bytes<>).unwrap();

println!("{}", <v>text<>);

<#>// Prints: "text!"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/string/index.html>string<>::<l https://doc.rust-lang.org/std/string/struct.String.html>String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8>from_utf8()<>
@
@ bytes
@ bytes-to, from bytes, u8-to, from u8, to-string, utf8
@ string::from_utf8(), from_utf8()



### Integer - Bytes Vec - To String / Lossy

<cb>= String::from_utf8_lossy(<v>bytes<>)

= String::from_utf8_lossy(<v>u8_vec<>)<>

Returns:

<cb>Cow\<tr><>


Coverts an array of UTF-8 bytes (u8) into a string.

For invalid values, returns 0xFFFD.


Example:

<cb>let <v>bytes<>: Vec\<u8> = vec![84, 101, 120, 116, 33];

let <v>text<>: String = String::from_utf8_lossy(<v>bytes<>).unwrap();

println!("{}", <v>text<>);

<#>// Prints: "text!"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/string/index.html>string<>::<l https://doc.rust-lang.org/std/string/struct.String.html>String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.from_utf8_lossy>from_utf8_lossy()<>
@
@ bytes
@ bytes-to, from bytes, u8-to, from u8, to-string, [u8], utf8
@ 0xFFFD, FFFD
@ string::from_utf8_lossy(), from_utf8_lossy(),



## Integer - 16-Bit, Signed

<cb>= <v>number<>_i16<>

<cb>let <v>int_1<>: i16 = <v>number<>;<>

Type:

<cb>i16<>


Integer, 16-bit Signed


Size:	2 Byte (16 bits)
Range:	-32,768 ... 32767


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_i16;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: i16 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.i16.html">i16<>
@
@ i16, i16-only, i16s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, -32768
@ std::i16, ::i16



## Integer - 16-Bit, Unsigned

<cb>= <v>number<>_u16<>

<cb>let <v>int_1<>: u16 = <v>number<>;<>

Type:

<cb>u16<>


Integer, 16-bit Unsigned


Size:	2 Bytes (16 bits)
Range:	0 ... 65,535


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_u16;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: u16 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.u16.html">u16<>
@
@ u16, u16-only, u16s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 65535
@ std::u16, ::u16



## Integer - 32-Bit, Signed (Default) (i32)

<cb>= <v>number<>_i32<>

<cb>let <v>int_1<>: i32 = <v>number<>;<>

Type:

<cb>i32<>


Integer, 32-bit Signed


Size:	4 Bytes (32 bits)
Range:	-2,147,483,648 ... 2,147,483,647


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_i32;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: i32 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.i32.html">i32<>
@
@ i32, i32-only, i32s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, -2147483648, 2147483647
@ std::i32, ::i32



## Integer - 32-Bit, Unsigned (u32)

<cb>= <v>number<>_u32<>

<cb>let <v>int_1<>: u32 = <v>number<>;<>

Type:

<cb>u32<>


Integer, 32-bit Unsigned


Size:	4 Bytes (32 bits)
Range:	0 ... 4,294,967,295


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_u32;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: u32 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.u32.html">u32<>
@
@ u32, u32-only, u32s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 4294967295
@ std::u32, ::u32



## Integer - 64-Bit, Signed

<cb>= <v>number<>_i64<>

<cb>let <v>int_1<>: i64 = <v>number<>;<>

Type:

<cb>i64<>


Integer, 64-bit Signed


Size:	8 Bytes (64 bits)
Range:	-9,223,372,036,854,775,808 ... 9,223,372,036,854,775,807


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_i64;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: i64 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.i64.html">i64<>
@
@ i64, i64-only, i64s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, -9223372036854775808, 9223372036854775807
@ std::u64, ::u64



## Integer - 64-Bit, Unsigned

<cb>= <v>number<>_u64<>

<cb>let <v>int_1<>: u64 = <v>number<>;<>

Type:

<cb>u64<>


Integer, 64-bit Unsigned.


Size:	4 Bytes (32 bits)
Range:	0 ... 18,446,744,073,709,551,615


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_u64;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: u64 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.u64.html">u64<>
@
@ u64, u64-only, u64s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 18446744073709551615
@ std::u64, ::u64



## Integer - 128-Bit, Signed

<cb>= <v>number<>_i128<>

<cb>let <v>int_1<>: i128 = <v>number<>;<>

Type:

<cb>i128<>


Integer, 128-bit Signed


Size:	16 Bytes (128 bits)
Range:	-170,141,183,460,469,231,731,687,303,715,884,105,728 ... 170,141,183,460,469,231,731,687,303,715,884,105,727


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_i128;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: i128 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.i128.html">i128<>
@
@ i128, i128-only, i128s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, -170141183460469231731687303715884105728, 170141183460469231731687303715884105727
@ std::i128, ::i128



## Integer - 128-Bit, Unsigned

<cb>= <v>number<>_u128<>

<cb>let <v>int_1<>: u128 = <v>number<>;<>

Type:

<cb>u128<>


Integer, 128-bit Unsigned


Size:	16 Bytes (128 bits)
Range:	0 ... 340,282,366,920,938,463,463,374,607,431,768,211,455


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_u128;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: u128 = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.u128.html">u128<>
@
@ u128, u128-only, u128s-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 340282366920938463463374607431768211455
@ std::u128, ::u128



## Integer - Pointer Size, Signed (isize)

<cb>= <v>number<>_isize<>

<cb>let <v>int_1<>: isize = <v>number<>;<>

Type:

<cb>isize<>


Integer, Pointer Sized, Signed
The size is the number of bytes required to hold a pointer.


32 Bit OS: 4 Bytes
64 Bit OS: 8 Bytes


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_isize;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: isize = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.isize.html">isize<>
@
@ isize, isize-only, isizes-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 32 bit, 64 bit
@ std::isize, ::isize



## Integer - Pointer Size, Unsigned (usize)

<cb>= <v>number<>_usize<>

<cb>let <v>int_1<>: usize = <v>number<>;<>

Type:

<cb>usize<>


Integer, Pointer Sized, Unsigned
The size is the number of bytes required to hold a pointer.


32 Bit OS: 4 Bytes
64 Bit OS: 8 Bytes


Examples:

With Literal:

<cb>let <v>int_1<> = <v>42<>_usize;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>

With Type Declaration:

<cb>let <v>int_1<>: usize = <v>42<>;

println!("{}", <v>int_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.usize.html">usize<>
@
@ usize, usize-only, usizes-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, 32 bit, 64 bit
@ std::usize, ::usize



## Integer - Operations
@
@ i8, i8-only, i8s-only
@ i16, i16-only, i16s-only
@ i32, i32-only, i32s-only
@ i64, i64-only, i64s-only
@ i128, i128-only, i128s-only
@ isize, isize-only, isizes-only
@ u8, u8-only, u8s-only
@ u16, u16-only, u16s-only
@ u32, u32-only, u32s-only
@ u64, u64-only, u64s-only
@ u128, u128-only, u128s-only
@ usize, usize-only, usizes-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type
@ std::i8, ::i8, std::u8, ::u8
@ std::i16, ::i16, std::u16, ::u16
@ std::i32, ::i32, std::u32, ::u32
@ std::i64, ::i64, std::u64, ::u64
@ std::i128, ::i128, std::u128, ::u128


### Integer - Power

<cb>= <v>int_1<>.pow(<v>power<>)<>

<cb>= <v>int_type<>::pow(<v>value<>, <v>power<>)<>


Returns: Integer


Returns the power of an integer.


Examples:

<cb>let <v>value<>: i32 = 4;
let <v>square<> = <v>value<>.pow(<v>2<>);

println!("{} squared is {}.", <v>value<>, <v>square<>);

<#>// Prints "4 squared is 16."<><>

<cb>let <v>value<>: i32 = 4;
let <v>square<> = i32::pow(<v>value<>, <v>2<>);

println!("{} squared is {}.", <v>value<>, <v>square<>);

<#>// Prints "4 squared is 16."<><>
@
@ .pow(), ::pow(), pow(), square



## Integer - Conversions
@
@ i8, i8-only, i8s-only
@ i16, i16-only, i16s-only
@ i32, i32-only, i32s-only
@ i64, i64-only, i64s-only
@ i128, i128-only, i128s-only
@ isize, isize-only, isizes-only
@ u8, u8-only, u8s-only, byte, byte-only, bytes-only
@ u16, u16-only, u16s-only
@ u32, u32-only, u32s-only
@ u64, u64-only, u64s-only
@ u128, u128-only, u128s-only
@ usize, usize-only, usizes-only
@ ints, int-only, ints-only
@ integers, integer-only, integers-only
@ data type, bytes
@ from, convert, conversion, converting
@ from integer, integer-to, integer-into, int-to, int-into, into



### Integer - From Hex - To 8-Bit, Unsigned

<cb>= u8::from_str_radix(&<v>value<>, 16)<>

Returns:

<cb>Result\<u8, ParseIntError><>


Converts a hex string into a u8 integer.

Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/primitive.u8.html>u8<>::<l https://doc.rust-lang.org/std/primitive.u8.html#method.from_str_radix>from_str_radix<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/num/index.html>num<>::<l https://doc.rust-lang.org/std/num/struct.ParseIntError.html>ParseIntError<>
@
@ value, hexadecimal, string, radix, bytes
@ std::u8::from_str_radix, u8::from_str_radix, from_str_radix()
@ from hex, hex-to, to-u8, to-byte



### Integer - From Hex - To 32-Bit, Unsigned

<cb>= u32::from_str_radix(&<v>value<>, 16)<>

Returns:

<cb>Result\<u32, ParseIntError><>


Converts a hex string into a u32 integer.

Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/primitive.u32.html>u32<>::<l https://doc.rust-lang.org/std/primitive.u32.html#method.from_str_radix>from_str_radix<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/num/index.html>num<>::<l https://doc.rust-lang.org/std/num/struct.ParseIntError.html>ParseIntError<>
@
@ value, hexadecimal, string, radix
@ std::u32::from_str_radix, u32::from_str_radix, from_str_radix()
@ from hex, hex-to, to-u32






### Integer - To Char - From 8-Bit, Unsigned

<cb>= <v>value<> as char<>


Converts an 8-bit unsigned integer (u8) into a char.
@
@ as char
@ to-char
@ u8



### Integer - To Char - From 32-Bit, Unsigned

<cb>= char::from_u32(<v>value<>)<>

Returns:

<cb>Option\<char><>


Converts a 32-bit integer (u32) into a character.

Invalid utf-8 codes are returned as None.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l https://doc.rust-lang.org/std/primitive.char.html#method.from_u32>from_32<>
@
@ utf-8, u32
@ to-char, as char



### Integer - To Hex

<cb>= format!("{:x}", <v>value<>)<>

Usage:

<cb>println!("{:x}", &<v>value<>)<>


Converts an integer into a printable hexadecimal value.
@
@ to-hex, to-hexadecimal



### Integer - To String

<cb>= <v>int_1<>.to_string()<>
@
@ .to_string(), int.to_string()
@ to-string



# Never

The never type or "!" type.

This is thrown by the compiler and defines a place in the code that has nowhere to go.

Fix by adding a return or reworking the code.
Technically it denotes a computation that never completes.
@
@ !, never-only, !-only



# Str

Type:

<cb>&str<>

Defines an immutable string of type <c>str<>.

Features:

<*>Is Immutable
Stored as an u8 Vector
Stores in UTF-8 Format
Can NOT be created directly<super><#>1<><>.<>

Can be stored in:

<*>Stack
Heap
Compiled Code<>


1 - Can't be created directly as the compiler can't determine the size at compile time (str does not store it's own length).


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/primitive.str.html>str<>
@
@ strs, str-only, strs-only
@ &strs, &str-only, &strs-only
@ data type, slice, string
@ std::str, ::str



## Str - Create

<cb>= "<v>A String<>"<>

<cb>let <v>str_1<>: &str = "<v>A String<>";<>

Type:

<cb>&str<>


Defines an immutable string slice.

Technically, it returns a reference to the string slice.
This string is stored as part of the actual program, not on the stack or in the heap.


Examples:

<cb>let <v>str_1<> = "abc";

println!("{}", <v>str_1<>);

<#>// Prints: "abc"<><>


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/primitive.str.html>str<>
@
@ new, instantiate



## Str - Properties
@
@ strs, str-only, strs-only
@ data type, slice, string


### Str - Compare

Is Less Than?:

<cb>= <v>str_1<> \< <v>str_2<><>

Is Greater Than?:

<cb>= <v>str_1<> > <v>str_2<><>


Compare strings using ==, !=, \<, >, \<=, >=.


Example:

<cb>let <v>a<> = "a";
let <v>b<> = "b";

if <v>a<> \< <v>b<> {
	println!("Less Than");
}
else {
	println!("Greater Than or Equal");
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ is less than, is greater than, is equal, or equal, not equal, equals
@ ==, !=, \<, >, \<=, >=



### Str - Contains?

<cb>= <v>str_1<>.contains("<v>match<>")<>

Returns:

<cb>bool<>


Returns true when the match exists in the string slice.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.contains>contains()<>
@
@ is substring, in, includes
@ str.contains(), .contains()



### Str - Contains Char?

<cb>= <v>string_1<>.chars().any(|item| item == <v>character<>)<>


Returns true if the string slice contains the characters.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
@
@ .any(), char?



### Str - Get Character

<cb>= <v>str_1<>.chars().nth(<v>index<>)<>

Returns:

<cb>Option\<char><>


Gets a single character from the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth">nth()<>
@
@ str.chars().nth(), .chars().nth(), .nth()



### Str - Ends With?

<cb>= <v>str_1<>.ends_with(<v>str_2<>)<>

Returns:

<cb>bool<>


Returns true if the string starts with or equals another string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.ends_with>ends_with()<>
@
@ ending in, is, substring
@ str.ends_with(), .ends_with()



### Str - Has White Space?

<cb>= <v>str_1<>.chars().any(char::is_whitespace)<>

Returns:

<cb>bool<>


Returns true if any character is a white space.


Examples:

<cb>let <v>text<> = "none";
println!("{}", <v>text<>.chars().all(char::is_whitespace));

<#>// Prints: false<><>

<cb>let <v>text<> = "has whitespace";
println!("{}", <v>text<>.chars().all(char::is_whitespace));

<#>// Prints: true<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_whitespace">is_whitespace()<>
@
@ whitespace, white-space
@ .is_whitespace()



### Str - Is Alphabetic?

<cb>= <v>str_1<>.chars().all(char::is_alphabetic)<>

Returns:

<cb>bool<>


Returns true if all characters are alphabetic characters (see standard).


Examples:

<cb>let <v>text<> = "letters";
println!("{}", <v>text<>.chars().all(char::is_alphabetic));

<#>// Prints: true<><>

<cb>let <v>text<> = "two words";
println!("{}", <v>text<>.chars().all(char::is_alphabetic));

<#>// Prints: false<><>

<cb>let <v>text<> = "한국어";
println!("{}", <v>text<>.chars().all(char::is_alphabetic));

<#>// Prints: true<><>



Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_alphabetic">is_alphabetic()<>

Unicode Docs: <l https://www.unicode.org/reports/tr44/>Unicode Character Database<>
@
@ is_alphabetic()



### Str - Is Alphanumeric?

<cb>= <v>str_1<>.chars().all(char::is_alphanumeric)<>

Returns:

<cb>bool<>


Returns true if all characters are either numbers or valid alphabetic characters (see standard).


Examples:

<cb>let <v>text<> = "abc123";
println!("{}", <v>text<>.chars().all(char::is_alphanumeric));

<#>// Prints: true<><>

<cb>let <v>text<> = "abc 123";
println!("{}", <v>text<>.chars().all(char::is_alphanumeric));

<#>// Prints: false<><>

<cb>let <v>text<> = "한국어";
println!("{}", <v>text<>.chars().all(char::is_alphanumeric));

<#>// Prints: true<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_alphanumeric">is_alphanumeric()<>

Unicode Docs: <l https://www.unicode.org/reports/tr44/>Unicode Character Database<>
@
@ .is_alphanumeric()



### Str - Is Blank?

<cb>= <v>str_1<>.trim().is_empty()<>

Returns:

<cb>bool<>


Tests if the string slice is empty (0 length) or all white space.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.trim>trim()<> | <l https://doc.rust-lang.org/std/primitive.str.html#method.is_empty>is_empty<>
@
@ whitespace, white space
@ str.is_blank(), .is_blank()



### Str - Not Blank?

<cb>= ! <v>str_1<>.trim().is_empty()<>

Returns:

<cb>bool<>


Tests if the string slice is not empty and is not all white space.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.trim>trim()<> | <l https://doc.rust-lang.org/std/primitive.str.html#method.is_empty>is_empty<>
@
@ whitespace, white space, none
@ str.is_blank(), .is_blank()



### Str - Is Empty?

<cb>= <v>str_1<>.is_empty()<>

Returns:

<cb>bool<>


Tests if the string slice is empty (0 length).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.is_empty>is_empty()<>
@
@ str.is_empty(), .is_empty()



### Str - Not Empty?

<cb>= ! <v>str_1<>.is_empty()<>

Returns:

<cb>bool<>


Tests if the string slice is not empty (0 length).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.is_empty>is_empty()<>
@
@ str.is_empty(), .is_empty()
@ no size



### Str - Is Equal?

<cb>= <v>str_1<> == <v>str_2<><>


Returns true when the strings are equal.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ is equal, equals, compare, identity
@ ==



### Str - Not Equal?

<cb>= <v>str_1<> != <v>str_2<><>


Returns true when the strings are different.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ is equal, equals, compare, not, identity
@ !=



### Str - Is Equal, Ignore Case?

<cb>= <v>str_1<>.to_lowercase() == <v>str_2<>.to_lowercase()<>

<cb>= <v>str_1<>.to_ascii_lowercase() == <v>str_2<>.to_ascii_lowercase()<>


Returns true when the strings are equal.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase>to_lowercase()<> | <l https://doc.rust-lang.org/std/primitive.str.html#method.to_ascii_lowercase>to_ascii_lowercase<>
@
@ is equal, equals, compare, identity
@ ==



### Str - Not Equal, Ignore Case?

<cb>= <v>str_1<>.to_lowercase() != <v>str_2<>.to_lowercase()<>

<cb>= <v>str_1<>.to_ascii_lowercase() != <v>str_2<>.to_ascii_lowercase()<>


Returns true when the strings are different.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase>to_lowercase()<> | <l https://doc.rust-lang.org/std/primitive.str.html#method.to_ascii_lowercase>to_ascii_lowercase<>
@
@ is equal, equals, compare, not, identity
@ !=



### Str - Is Numeric?

<cb>= <v>str_1<>.chars().all(char::is_numeric)<>

Returns:

<cb>bool<>


Returns true if all characters are digits 0 to 9.

'-' (negative sign) will return false.


Examples:

<cb>let <v>text<> = "123";
println!("{}", <v>text<>.chars().all(char::is_numeric));

<#>// Prints: true<><>

<cb>let <v>text<> = "abc";
println!("{}", <v>text<>.chars().all(char::is_numeric));

<#>// Prints: false<><>



Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.char.html">char<>::<l "https://doc.rust-lang.org/std/primitive.char.html#method.is_numeric">is_numeric()<>
@
@ is_numeric()



### Str - Length in Bytes

<cb>= <v>string_1<>.len()<>

Returns:

<cb>usize<>


Returns the byte length of the string.
This is different to the number of characters (chars().count()).


Example:

<cb>let <v>str_1<> = "🙂⭐️";

let <v>length<> = <v>str_1<>.len();
let <v>characters<> = <v>str_1<>.chars().count();

println!("String {}, length(bytes) = {}, characters = {}.", <v>str_1<>, <v>length<>, <v>characters<>);

<#>// Prints "String 🙂⭐️, length(bytes) = 10, characters = 3."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.len>len()<>
@
@ count, size
@ str.len(), .len()



### Str - Length in Character

<cb>= <v>str_1<>.chars().count()<>

Returns:

<cb>usize<>


Returns the number of actual characters in the string accounting for Unicode encoding.

Takes O(N) Time due to unicode complexity.


Example:

<cb>let <v>str_1<> = "🙂⭐️";

let <v>length<> = <v>str_1<>.len();
let <v>characters<> = <v>str_1<>.chars().count();

println!("String {}, length(bytes) = {}, characters = {}.", <v>str_1<>, <v>length<>, <v>characters<>);

<#>// Prints: "String 🙂⭐️, length(bytes) = 10, characters = 3."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count">count()<>
@
@ size, length, count
@ str.chars().count(), .chars().count(), .count()



### Str - Starts With?

<cb>= <v>str_1<>.starts_with(<v>str_2<>)<>

Returns:

<cb>bool<>


Returns true if the string starts with or equals another string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.starts_with>starts_with()<>
@
@ begins, starting in, is, substring
@ str.starts_with(), .starts_with()



### Str - Substring

<cb><table><col><v>first<><><col>= <v>text<>.chars().next().unwrap()<>
<col><v>last<><><col>= <v>text<>.chars().last().unwrap()<>
<col> <>
<col><v>left<><><col>= <v>text<>.chars().take(<v>length<>).collect::\<String>()<>
<col> <>
<col><v>middle<><><col>= <v>text<>.chars().skip(<v>start<>).take(<v>length<>).collect::\<String>()<>
<col><><col>= <v>text<>.chars().skip(<v>start<>).take(<v>end_plus_1<> - <v>start<>).collect::\<String>()<>
<col> <>
<col><v>right<><><col>= <v>text<>.chars().skip(text.chars().count() - <v>length<>).collect::\<String>()<><><>

Examples:

<cb><table><col><v>text<><><col>= "12345"<><col><#>// "12345"<><>
<col><v>first<><><col>= <v>text<>.chars().next().unwrap()<><col><#>// "1"<><>
<col><v>last<><><col>= <v>text<>.chars().last().unwrap()<><col><#>// "5"<><>
<col> <>
<col><v>left<><><col>= <v>text<>.chars().take(<v>3<>).collect::\<String>()<><col><#>// "123"<><>
<col> <>
<col><v>middle<><><col>= <v>text<>.chars().skip(<v>1<>).take(<v>3<>).collect::\<String>()<><col><#>// "234"<><>
<col><><col>= <v>text<>.chars().skip(<v>1<>).take(<v>4<> - <v>1<>).collect::\<String>()<><col><#>// "234"<><>
<col> <>
<col><v>right<><><col>= <v>text<>.chars().skip(text.chars().count() - <v>3<>).collect::\<String>()<><col><#>// "345"<><><><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ Partial, Slice, slicing, unicode, chars, .substring()



### Str - Substring (ASCII Only)

<cb><table><col><v>first<><><col>= <v>text<>[0]<>
<col><v>last<><><col>= <v>text<>[text.len() - 1]<>
<col> <>
<col><v>left<><><col>= <v>str_1<>[<v>start<>..]<>
<col> <>
<col><v>middle<><><col>= <v>str_1<>[<v>start<>..=<v>end<>]<>
<col><><col>= <v>str_1<>[<v>start<>..<v>end_plus_1<>]<>
<col> <>
<col><v>right<><><col>= <v>str_1<>[..=<v>end<>]<>
<col><><col>= <v>str_1<>[..<v>end_plus_1<>]<><><>


Returns a substring form a string.


Examples:

<cb>let <v>str_1<> = "<v>12345<>";

let <v>first<> = &<v>str_1<>[0..=0];                 <#>// "1"<>

let <v>last<> = &<v>str_1<>[str_1.len() - 1.. str_1.len()];   <#>// "5"<>

let <v>index_1<> = &<v>str_1<>[1..=1];               <#>// "2"<>

let <v>index_1_to_3<> = &<v>str_1<>[1..4];           <#>// "234"<>

let <v>index_1_to_end<> = &<v>str_1<>[1..];          <#>// "2345"<>

let <v>start_to_index_3<> = &<v>str_1<>[..4];        <#>// "1234"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ Partial, Slice, slicing, .substring(), []



### Str - Substring - Left

<cb>= <v>str_1<>.chars().take(<v>length<>).collect::\<String>()<>


Returns the left side of the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ Start, Beginning, slice, partial, unicode, chars, .left()



### Str - Substring - Left (ASCII Only)

<cb>= <v>str_1<>[..<v>length_plus_1<>]<>


Returns the left side of the string.

Do NOT use for Unicode strings!


Example:

<cb>let <v>str_1<> = "12345";

let <v>substring<> = &<v>str_1<>[..3];

println!("{}", &<v>substring<>);

<#>// Prints: 123<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ Start, Beginning, slice, partial, .left(), []


 
### Str - Substring - Middle

<cb>= <v>str_<>.chars().skip(<v>start<>).take(<v>length<>).collect::\<String>()<>


Returns a substring from a string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ slice, partial, unicode, chars


 
### Str - Substring - Middle (ASCII Only)

<cb>= &<v>str_1<>[<v>start<>..<v>end_plus_1<>]<>

<cb>= &<v>str_1<>[<v>start<>..=<v>end<>]<>


Returns a substring from a string.

Do NOT use for Unicode strings!


Example:

<cb>let <v>str_1<> = "12345";

let <v>substring<> = &<v>str_1<>[1..3];

println!("{}", &<v>substring<>);

<#>// Prints: 23<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ slice, partial, []


 
### Str - Substring - Right

<cb>= <v>str_1<>.chars().skip(<v>str_1<>.chars().len() - <v>length<>).collect::\<String>();<>


Example:

<cb>let <v>str_1<> = "12345";

let <v>right<> = &<v>str_1<>.chars().skip(<v>str_1<>.len() - 3).collect::\<String>();

println!("{}", &<v>right<>);

<#>// Prints: 345<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ Last, End, slice, partial, unicode, chars, .right()


 
### Str - Substring - Right (ASCII Only)

<cb>= <v>str_1<>[<v>start<>..]<>


Returns the right substring from a string.

Do NOT use for Unicode strings!


Example:

<cb>let <v>str_1<> = "12345";

let <v>substring<> = &<v>str_1<>[2..];

println!("{}", &<v>substring<>);

<#>// Prints: 345<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ Last, End, slice, partial, .right(), []



## Str - Operations
@
@ strs, str-only, strs-only
@ data type, slice, string



### Str - Clone

<cb>= <v>str_1<>.to_string()<>

Returns:

<cb>String<>


To copy a string slice convert to a string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.to_string>to_string()<>
@
@ copy, duplicate, clone
@ string.to_string(), .to_string()



### Str - Concatenate

<cb>= [<v>str_1<>, <v>str_2<>].concat()<>

<cb>= [<v>str_1<>, <v>str_2<>].concat()

= <v>str_1<>.to_string() + <v>str_2<>

= format!("{}{}", <v>str_1<>, <v>str_2<>)<>

Returns:

<cb>String<>


Joins 2 or more strings together.
Must start by converting the first <c>str<> into type <c>String<>.


Example:

<cb>let <v>a<> = "abc";
let <v>b<> = "def";

let <v>concatenated<> = <v>a<>.to_string() + <v>b<>;

println!("{}", <v>concatenated<>);

<#>// Prints: "abcdef"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.concat>concat()<>
@
@ add, join, joining, concatenating, merge, +
@ str.to_owned(), .to_owned()



### Str - Find

<cb>= <v>str_1<>.find(<v>match<>)<>

Returns:

<cb>Option\<usize><>


Returns the index of the match string.

Returns None if not found.


Example:

<cb>let <v>str_1<> = "one two three";

let <v>index<> = <v>str_1<>.find("two");

println!("Index {}", <v>index<>.unwrap());

<#>// Prints: Index 4<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l "https://doc.rust-lang.org/std/primitive.str.html#method.find">find()<>
@
@ subtring, search, index, position, start
@ str.find(), .find()



### Str - Find Right

<cb>= <v>str_1<>.rfind(<v>match<>)<>

Returns:

<cb>Option\<usize><>


Returns the index of the match string for the first match from the right.

Returns None if not found.


Example:

<cb>let <v>str_1<> = "one two three two one";

let <v>index<> = <v>str_1<>.rfind("two");

println!("Index {}", <v>index<>.unwrap());

<#>// Prints: Index 14<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l "https://doc.rust-lang.org/std/primitive.str.html#method.rfind">rfind()<>
@
@ subtring, search, index, position, last
@ str.rfind(), .rfind()



### Str - Format

<cb>= format!("<v>{}<>", <v>str_1<>)<>

<cb>let <v>string_2<>: String = format!("<v>format<>", <v>str_1<>, <v>string_2<>, <v>...<>);<>


Formats a string.


Example:

<cb>let <v>str_1<> = "abc";

let <v>formatted<> = format!("<v>...{}...<>", <v>str_1<>);

println!("{}", <v>formatted<>);

<#>// Prints: "...abc..."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.format.html">format<>



### Str - Remove Prefix

<cb>= <v>str_1<>.strip_prefix(<v>prefix_1<>)<>

Returns:

<cb>Option\<&str><>


Removes the prefix but only if it is present.

Returns <c>None<> if no prefix found.



Example:

<cb>let <v>str_1<> = "https://speedsheet.io";

let <v>substring<> = &<v>str_1<>.strip_prefix("https://").unwrap();

println!("{}", &<v>substring<>);

<#>// Prints: speedsheet.io<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.strip_prefix>strip_prefix()<>
@
@ partial, string.strip_prefix() .strip_prefix()
@ delete, start, leading, beginning, starting, strip, substring



### Str - Remove Suffix

<cb>= <v>str_1<>.strip_suffix(<v>prefix_1<>)<>

Returns:

<cb>Option\<&str><>


Removes the suffix but only if it is present.

Returns <c>None<> if no suffix found.


Example:

<cb>let <v>str_1<> = "file_name.txt";

let <v>substring<> = &<v>str_1<>.strip_suffix(".txt").unwrap();

println!("{}", &<v>substring<>);

<#>// Prints: file_name<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.strip_suffix>strip_suffix()<>
@
@ Postfix, string.strip_suffix(), .strip_suffix()
@ end, delete, ending, strip, substring



### Str - Repeat

<cb>= <v>str_1<>.repeat(<v>count<>)<>

Returns:

<cb>String<>


Repeats a string.

Returns "" if count is 0.


Example:

<cb>let <v>stars<>: String = "*".repeat(10);

println!("{}", <v>stars<>);

<#>// Prints: "**********"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.repeat>repeat()<>
@
@ expand, multiply
@ str.repeat(), .repeat()



### str - Replace

<cb>= <v>str_1<>.replace(<v>match<>, <v>replacement<>)<>

Returns:

<cb>String<>


Replaces all occurrences of a substring with another.

Replace is case sensitive.


Example:

<cb>let <v>str_1<> = "Replace <b>this<> and <b>this<> and <b>this<>.";

let <v>replaced<> = <v>str_1<>.replace("this", "that");

println!("{}", <v>replaced<>);

<#>// Prints: Replace <b>that<> and <b>that<> and <b>that<>.<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.replace>replace()<>
@
@ Update, Modify, Change, substitute, all occurrences, matches
@ str.replace(), .replace()



### str - Replace First Occurrence

<cb>= <v>str_1<>.replacen(<v>match<>, <v>replacement<>, 1)<>

Returns:

<cb>String<>


Replaces the first occurrences only of a substring with another.

Replace is case sensitive.


Example:

<cb>let <v>str_1<> = "Replace <b>this<> but not this or this.";

let <v>replaced<> = <v>str_1<>.replacen("this", "that", 1);

println!("{}", <v>replaced<>);

<#>// Prints: Replace <b>that<> but not this or this.<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.replacen>replacen()<>
@
@ Update, Modify, Change, substitute, 1st occurrence only, match, 1st
@ str.replacen(), .replacen()



### Str - Reverse

<cb>= <v>str_1<>.chars().rev().collect()<>

Returns:

<cb>String<>


Reverses a string.


Example:

<cb>let <v>str_1<> = "12345";

let <v>reversed<>: String = <v>str_1<>.chars().rev().collect();

println!("{}", <v>reversed<>);

<#>// Prints: 54321<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ backwards



### Str - Split

<cb>= <v>str_1<>.split(<v>split_string<>)<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>str_1<>.split(<v>split_string<>).collect()<>

Returns:

<cb>Split<>


Returns a list of strings split on the split string.

If no split found, returns the original string (1 value).
If no value before or after the split, empty strings are returned.

The split string is not returned.


Example:

<cb>let <v>str_1<> = "one\\ntwo\\nthree\\n";

let <v>lines<>: Vec\<&str> = <v>str_1<>.split("\\n").collect();

for <v>line<> in <v>lines<>.iter() {
	println!("'{}'", <v>line<>);
}

<#>// Prints:
//
//    'one'
//    'two'
//    'three'
//    ''<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.split>split()<>
@
@ str.split(), .split()



### Str - Split Once

<cb>= <v>str_1<>.split_once(<v>split_string<>)<>

Returns:

<cb>Option\<(&str, &str)><>


Returns a tuple of strings split in two.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.split_once>split_once()<>
@
@ in two, by
@ str.split_once(), .split_once()



### Str - Split on Newline

<cb>= <v>str_1<>.lines()<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>str_1<>.lines().collect()<>

Returns:

<cb>Split<>


Returns a list of lines.

Empty lines are not returned.
Splits on newline (\\n) and newline + carriage return (\\n\\r).


Example:

<cb>let <v>str_1<> = "one\\ntwo\\nthree\\n";

let <v>lines<>: Vec\<&str> = <v>str_1<>.lines().collect();

for <v>line<> in <v>lines<>.iter() {
	println!("'{}'", <v>line<>);
}

<#>// Prints:
//
//    'one'
//    'two'
//    'three'<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.lines>lines()<>
@
@ by line break, strings, strs
@ str.lines(), .lines()



### Str - Split on White Space

<cb>= <v>str_1<>.split_whitespace()<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>str_1<>.split_whitespace().collect()<>

Returns:

<cb>Split<>


Returns a list of strings split on Unicode white space characters.

Empty strings are not returned.


Example:

<cb>let <v>str_1<> = "one two \\t\\n three \\n";

let <v>lines<>: Vec\<&str> = <v>str_1<>.split_whitespace().collect();

for <v>line<> in <v>lines<>.iter() {
	println!("'{}'", <v>line<>);
}

<#>// Prints:
//
//    'one'
//    'two'
//    'three'<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.split_whitespace>split_whitespace()<>
@
@ by whitespaces
@ str.split_whitespace(), .split_whitespace()



### Str - Split with Split Function

<cb>= <v>str_1<>.split(<v>split_function<>)<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>str_1<>.split(<v>split_function<>).collect()<>

Returns:

<cb>Split<>


Returns a list of strings split where the function returns true.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.split>split()<>
@
@ using
@ str.split(), .split()



### Str - Trim

<cb>= <v>str_1<>.trim()<>

Returns:

<cb>&str<>


Trims leading and trailing whitespaces from the string.

Includes spaces, newlines, and tabs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.trim>trim()<>
@
@ strip, remove, delete, whitespaces, white spaces
@ str.trim(), .trim()



### Str - Trim End

<cb>= <v>str_1<>.trim_end()<>

Returns:

<cb>&str<>


Trims trailing whitespaces from the string.

Includes spaces, newlines, and tabs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.trim_end>trim_end()<>
@
@ strip, remove, delete, whitespaces, white spaces, trailing, ending, right
@ str.trim_end(), .trim_end()



### Str - Trim Start

<cb>= <v>str_1<>.trim_start()<>

Returns:

<cb>&str<>


Trims leading whitespaces from the string.

Includes spaces, newlines, and tabs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.trim_start>trim_start()<>
@
@ strip, remove, delete, whitespaces, white spaces, starting, left
@ str.trim_start(), .trim_start()



### Strs - Join

<cb>= <v>vec_of_strs<>.into_iter().collect::\<String>()<>

Returns:

<cb>String<>


Joins all the strings in the array.


Example:

<cb>let <v>strings<> = vec!["1", "2", "3"];

let <v>joined<> = <v>strings<>.into_iter().collect::\<String>();

println!("{}", <v>joined<>);

<#>// Prints: 1, 2, 3<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ merge, vec, to, list of
@ .join()



### Strs - Join - With Separator

<cb>= <v>vec_of_strs<>.join(<v>join_str<>)<>

Returns:

<cb>String<>


Joins all the strings in the array separated by <c>join_str<>.


Example:

<cb>let <v>strings<> = vec!["1", "2", "3"];

let <v>joined<> = <v>strings<>.join(", ");

println!("{}", <v>joined<>);

<#>// Prints: 1, 2, 3<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ merge, vec, to, list of
@ .join()



### Strs - Sort

<cb><v>vec_of_strs<>.sort()<>


Sorts a vec of strings in place.


See: <go? "vec-only">Vec<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort">sort()<>
@
@ vec, list of
@ str.sort(), .sort()



### Strs - Sort, Ignore Case

<cb><v>vec_of_strs<>.sort_by(|<v>a<>, <v>b<>| <v>a<>.to_lowercase().cmp(&<v>b<>.to_lowercase()));<>


Sorts a vec of strings in place.


See: <go? "vec-only">Vec<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.cmp>cmp()<> | <l https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase>to_lowercase<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort_by">sort_by()<>
@
@ vecs, list of
@ str.sort(), .sort(), str.sort_by(), .sort_by()



## Str - Convert
@
@ from, convert, conversion, converting
@ from str, str-to, str-into, into, str-from


### Str - To Bytes

<cb> <v>str_1<>.as_bytes()<>

Returns:

<cb>&[u8]<>


Returns a reference to the array of bytes in the string slice.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes>as_bytes()<>
@
@ to-bytes, bytes-to, get
@ str.as_bytes(), .as_bytes()



### Str - To Bytes Iterator

<cb> <v>str_1<>.bytes()<>

Returns:

<cb>Bytes<>


Returns a reference to the array of bytes in the underlying string slice.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.bytes>bytes()<>
@
@ get
@ to-bytes, bytes-to
@ str.bytes(), .bytes(), u8



### Str - To Chars Iterator

<cb> <v>str_1<>.chars()<>

Returns:

<cb>std::str::Chars<>


Returns an iterator to the characters in the string slice.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ to-chars, chars-to, get, characters
@ str.chars(), .chars()



### Str - To Integer

<cb>= <v>str_1<>.parse()<>

Returns:

<cb>Result\<<v>T<>, ParseIntError><>


Converts a string slice to an int.

Use turbofish (::\<>) to define returned type if needed (<c>parse::\<i32>()<>).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.parse>parse()<>
@
@ signed, unsigned, get
@ str.parse(), .parse()
@ i8, i16, i32, i64, isize
@ u8, u16, u32, u64, usize
@ i8-to, i16-to, i32-to, i64-to, isize-to
@ u8-to, u16-to, u32-to, u64-to, usize-to
@ int-to, integer-to



### Str - To Lower Case

<cb>= <v>str_1<>.to_lowercase()<>

Returns:

<cb>String<>


Converts a string to lower case.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase>to_lowercase()<>
@
@ str.lowercase(), .lowercase(), lowercase



### Str - To Upper Case

<cb>= <v>str_1<>.to_uppercase()<>

Returns:

<cb>String<>


Converts a string to upper case.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.to_uppercase>to_uppercase()<>
@
@ str.uppercase(), .uppercase(), uppercase



### Str - To String

<cb>= <v>str_1<>.to_string()<>

<cb>= <v>str_1<>.to_string()
= <v>str_1<>.to_owned()
= <v>str_1<>.into()
= String::from(<v>str_1<>)<>

Returns:

<cb>String<>


Converts an <c>str<> to a <c>String<>.


Example:

<cb>let <v>str_1<>: &str = "abc";

let <v>string_1<>: String = <v>str_1<>.to_string();

println!("{}", <v>string_1<>);

<#>// Prints: "abc"<><>

Every Way:

<cb>let <v>str_1<> = "abc";

let <v>string_1<> = <v>str_1<>.to_string();
let <v>string_2<> = <v>str_1<>.to_owned();
let <v>string_3<> = String::from(<v>str_1<>);
let <v>string_4<>: String = <v>str_1<>.into();

println!("{}", <v>string_1<>);
println!("{}", <v>string_2<>);
println!("{}", <v>string_3<>);
println!("{}", <v>string_4<>);

<#>// Prints:
//
// "abc"
// "abc"
// "abc"
// "abc"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.to_string>to_string()<>
@
@ get, to-string, string-to, 
@ str.to_string(), .to_string()
@ str.as_string(), .as_string()
@ str.to_owned(), .to_owned()
@ str.into(), .into()
@ String::from(), from()



### Str - To Vec of Char

<cb>= <v>str_1<>.chars().collect()<>

Returns:

<cb>Vec\<char><>


Returns an array of characters from a string slice.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>.<l https://doc.rust-lang.org/std/primitive.str.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect">collect()<>
@
@ get characters
@ to-chars, chars-to
@ str.chars(), .chars(), .collect()



### Str Array - To Strings

<cb><v>str_array_1<>.into_iter().map(|<v>item<>| <v>item<>.to_string()).collect()<>

Returns:

<cb>Vec\<String><>


Converts strs into a vec of strings.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/primitive.str.html">str<>
@
@ get, to-strings



## Str - Extras


### Str - Memory

<cb><t><|><|>┌───┬───┬───┬───┐
str<|>=<|>│ T │ E │ X │ T │
<|><|>└───┴───┴───┴───┘

<|><|>┌───────────────────┐    ┌───┬───┬───┬───┐
&str<|>=<|>│ pointer:  usize ──│──▶ │ T │ E │ X │ T │
<|><|>│ length:   usize   │    └───┴───┴───┴───┘
<|><|>└───────────────────┘<><>
@
@ memory size, memory-only, mem-only



# String

Type:

<cb>String<>

Stored a dynamic string on the heap.

<*>Is Mutable
Stored as an u8 Vector
Stores in UTF-8 Format
Is Stored on the Heap<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>
@
@ list of
@ strings, string-only, strings-only
@ std::string::string, string::string, ::string



## String - Create
@
@ new, instantiate


### String - Create Empty String

<cb>= String::new()<>


Creates an empty string.

The data, when added, will live on the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>::<l "https://doc.rust-lang.org/std/string/struct.String.html#method.new">new()<>
@
@ String::new(), new()




### String - Create With Value

<cb>= "<v>a string<>".to_string()<>

<cb>= String::from("<v>a string<>")<>

<cb>let <v>string_1<>: String = String::from("<v>a string<>");<>

Type:

<cb>String<>


Creates a string with an initial value.

All three ways above are equivalent.
The data lives on the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>::<l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_string">to_string<>
@
@ initial value
@ string.to_string(), "".to_string(), .to_string(), string::from(), ::from()



### String - Create With Capacity

<cb>= String::with_capacity(<v>size<>);<>


Creates an empty string with a capacity of the given size in bytes.

Use this if you know what size the string needs to be or you want to avoid reallocating memory as the string grows.

Bytes are not equivalent to characters. Characters are UTF8 encoded and may require up to 4 bytes per character.
<c>size<> is type <c>usize<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>::<l "https://doc.rust-lang.org/std/string/struct.String.html#method.with_capacity">with_capacity<>
@
@ string::with_capacity(), with_capacity()



## String - Properties


### String - Compare

Is Less Than?:

<cb>= <v>string_1<> \< <v>string_2<><>

Is Greater Than?:

<cb>= <v>string_1<> > <v>string_2<><>


Compare strings using ==, !=, \<, >, \<=, >=.


Example:

<cb>let <v>a<> = "a".to_string();
let <v>b<> = "b".to_string();

if <v>a<> \< <v>b<> {
	println!("Less Than");
}
else {
	println!("Greater Than or Equal");
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ is less than, is greater than, is equal, or equal, not equal, equals
@ ==, !=, \<, >, \<=, >=



### String - Contains?

<cb>= <v>string_1<>.contains("<v>match<>")<>

Returns:

<cb>bool<>


Returns true when the match exists in the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.contains">contains()<>
@
@ is substring, in, includes, has
@ string.contains(), .contains()



### String - Contains Char?

<cb>= <v>string_1<>.chars().any(|item| item == <v>character<>)<>


Returns true if the string contains the character.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.chars">chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/str/struct.Chars.html#impl-Any-for-Chars%3C%27a%3E">any()<>
@
@ in, includes, has
@ .any(), char?



### String - Get Capacity

<cb>= <v>string_1<>.capacity()<>

Returns:

<cb>usize<>


Returns the capacity of the string in bytes.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.capacity">capacity()<>
@
@ string.capacity(), .capacity()



### String - Get Character

<cb>= <v>string_1<>.chars().nth(<v>index<>)<>

Returns:

<cb>Option\<char><>


Gets a single character from the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.chars">chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth">nth()<>
@
@ string.chars().nth(), .chars().nth(), .nth()



### String - Ends With?

<cb>= <v>string_1<>.ends_with(<v>str_2<>)<>

Returns:

<cb>bool<>


Returns true if the string starts with or equals another string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.ends_with">ends_with()<>
@
@ ending in, is, substring
@ string.ends_with(), .ends_with()



### String - Is Blank?

<cb>= <v>string_1<>.trim().is_empty()<>

Returns:

<cb>bool<>


Tests if the string is empty (0 length) or all white space.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.trim">trim()<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.is_empty">is_empty()<>
@
@ whitespace, white space
@ string.is_blank(), .is_blank()



### String - Not Blank?

<cb>= ! <v>string_1<>.trim().is_empty()<>

Returns:

<cb>bool<>


Tests if the string is not empty and is not all white space.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.trim">trim()<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.is_empty">is_empty()<>
@
@ whitespace, white space, none
@ string.is_blank(), .is_blank()



### String - Is Empty

<cb>= <v>string_1<>.is_empty()<>

Returns:

<cb>bool<>


Tests if the string is an empty string (0 length).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.is_empty">is_empty()<>
@
@ string.is_empty(), .is_empty()



### String - Not Empty?

<cb>= ! <v>string_1<>.is_empty()<>

Returns:

<cb>bool<>


Tests if the string is not empty (0 length).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.is_empty">is_empty()<>
@
@ string.is_empty(), .is_empty()
@ no size



### String - Is Equal?

<cb>= <v>string_1<> == <v>string_2<><>


Returns true when the strings are equal.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ is equal, equals, compare, identity
@ ==



### String - Not Equal?

<cb>= <v>string_1<> != <v>string_2<><>


Returns true when the strings are different.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ is equal, equals, compare, not, identity
@ !=



### String - Is Equal, Ignore Case?

<cb>= <v>string_1<>.to_lowercase() == <v>string_2<>.to_lowercase()<>

<cb>= <v>string_1<>.to_ascii_lowercase() == <v>string_2<>.to_ascii_lowercase()<>


Returns true when the strings are equal, ignoreing case.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_lowercase">to_lowercase()<> | <l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_ascii_lowercase">to_ascii_lowercase<>
@
@ is equal, equals, compare, identity
@ ==



### String - Not Equal, Ignore Case?

<cb>= <v>string_1<>.to_lowercase() != <v>string_2<>.to_lowercase()<>

<cb>= <v>string_1<>.to_ascii_lowercase() != <v>string_2<>.to_ascii_lowercase()<>


Returns true when the strings are different, ignoreing case.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_lowercase">to_lowercase()<>
@
@ is equal, equals, compare, not, identity
@ !=



### String - Length in Bytes

<cb>= <v>string_1<>.len()<>

Returns:

<cb>usize<>


Returns the length of the string in bytes.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.len">len()<>
@
@ size, count
@ string.len(), .len()



### String - Length in Characters

<cb>= <v>string_1<>.chars().count()<>


Returns the number of actual characters in the string accounting for Unicode encoding.

Takes O(N) Time due to utf-8 complexity.


Example:

<cb>let <v>string_1<> = "🙂⭐️".to_string();

let <v>length<> = <v>string_1<>.len();
let <v>characters<> = <v>string_1<>.chars().count();

println!("String {}, length(bytes) = {}, characters = {}.", <v>string_1<>, <v>length<>, <v>characters<>);

<#>// Prints: "String 🙂⭐️, length(bytes) = 10, characters = 3."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.chars">chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count">count()<>
@
@ length, size, count
@ string.chars().count(), .chars().count(), .count()



### String - Starts With?

<cb>= <v>string_1<>.starts_with(<v>str_2<>)<>

Returns:

<cb>bool<>


Returns true if the string starts with or equals another string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.starts_with">starts_with()<>
@
@ begins, starting in, is, substring
@ string.starts_with(), .starts_with()



### String - Substring

<cb><table><col><v>first<><><col>= <v>text<>.chars().next().unwrap()<>
<col><v>last<><><col>= <v>text<>.chars().last().unwrap()<>
<col> <>
<col><v>left<><><col>= <v>text<>.chars().take(<v>length<>).collect::\<String>()<>
<col> <>
<col><v>middle<><><col>= <v>text<>.chars().skip(<v>start<>).take(<v>length<>).collect::\<String>()<>
<col><><col>= <v>text<>.chars().skip(<v>start<>).take(<v>end_plus_1<> - <v>start<>).collect::\<String>()<>
<col> <>
<col><v>right<><><col>= <v>text<>.chars().skip(text.chars().count() - <v>length<>).collect::\<String>()<><><>

Examples:

<cb><table><col><v>text<><><col>= "12345".to_string()<><col><#>// "12345"<><>
<col><v>first<><><col>= <v>text<>.chars().next().unwrap()<><col><#>// "1"<><>
<col><v>last<><><col>= <v>text<>.chars().last().unwrap()<><col><#>// "5"<><>
<col> <>
<col><v>left<><><col>= <v>text<>.chars().take(<v>3<>).collect::\<String>()<><col><#>// "123"<><>
<col> <>
<col><v>middle<><><col>= <v>text<>.chars().skip(<v>1<>).take(<v>3<>).collect::\<String>()<><col><#>// "234"<><>
<col><><col>= <v>text<>.chars().skip(<v>1<>).take(<v>4<> - <v>1<>).collect::\<String>()<><col><#>// "234"<><>
<col> <>
<col><v>right<><><col>= <v>text<>.chars().skip(text.chars().count() - <v>3<>).take(<v>3<>).collect::\<String>()<><col><#>// "345"<><><><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ Partial, Slice, slicing, .substring()



### String - Substring (ASCII Only)

<cb><table><col><v>first<><><col>= <v>text<>[0]<>
<col><v>last<><><col>= <v>text<>[text.len() - 1]<>
<col> <>
<col><v>left<><><col>= <v>str_1<>[<v>start<>..]<>
<col> <>
<col><v>middle<><><col>= <v>str_1<>[<v>start<>..=<v>end<>]<>
<col><><col>= <v>str_1<>[<v>start<>..<v>end_plus_1<>]<>
<col> <>
<col><v>right<><><col>= <v>str_1<>[..=<v>end<>]<>
<col><><col>= <v>str_1<>[..<v>end_plus_1<>]<><><>


Returns a substring from a string.


Examples:

<cb>let <v>string_1<> = "<v>12345<>".to_string();

let <v>first<> = &<v>string_1<>[0..=0];                 <#>// "1"<>

let <v>last<> = &<v>string_1<>[string_1.len() - 1.. string_1.len()];   <#>// "5"<>

let <v>index_1<> = &<v>string_1<>[1..=1];               <#>// "2"<>

let <v>index_1_to_3<> = &<v>string_1<>[1..4];           <#>// "234"<>

let <v>index_1_to_end<> = &<v>string_1<>[1..];          <#>// "2345"<>

let <v>start_to_index_3<> = &<v>string_1<>[..4];        <#>// "1234"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ partial, slice, slicing, .substring(), []



### String - Substring - Left

<cb>= <v>string_1<>.chars().take(<v>length<>).collect::\<String>()<>

Returns:

<cb>String<>


Returns the left side of the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ Start, Beginning, slice, partial, unicode, chars, .left()



### String - Substring - Left (ASCII Only)

<cb>= <v>string_1<>[..<v>length_plus_1<>]<>


Returns the left substring from a string.

Do NOT use for Unicode strings!


Example:

<cb>let <v>string_1<> = "12345".to_string();

let <v>substring<> = &<v>string_1<>[..3];

println!("{}", &<v>substring<>);

<#>// Prints: 123<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ start, beginning, slice, partial, .left(), []


 
### String - Substring - Middle

<cb>= <v>string_1<>.chars().skip(<v>start<>).take(<v>length<>).collect::\<String>()<>

Returns:

<cb>String<>


Returns a substring from a string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ slice, partial, unicode, chars


 
### String - Substring - Middle (ASCII Only)

<cb>= &<v>string_1<>[<v>start<>..<v>end_plus_1<>]<>

<cb>= &<v>string_1<>[<v>start<>..=<v>end<>]<>


Returns a substring from a string.

Do NOT use for Unicode strings!


Example:

<cb>let <v>string_1<> = "12345".to_string();

let <v>substring<> = &<v>string_1<>[1..3];

println!("{}", &<v>substring<>);

<#>// Prints: 23<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ slice, partial, []


 
### String - Substring - Right

<cb>= <v>string_1<>.chars().skip(<v>string_1<>.chars().count() - <v>length<>).collect::\<String>()<>

Returns:

<cb>String<>


Example:

<cb>let <v>str_1<> = "12345".to_string;

let <v>right<> = &<v>str_1<>.chars().skip(<v>str_1<>.len() - 3).collect::\<String>();

println!("{}", &<v>right<>);

<#>// Prints: 345<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ Last, End, slice, partial, unicode, chars, .right(), []


 
### String - Substring - Right (ASCII Only)

<cb>= <v>string_1<>[<v>start<>..]<>

Returns:

<cb>&str<>


Returns the right substring from a string.

Do NOT use for Unicode strings!


Example:

<cb>let <v>string_1<> = "12345".to_string();

let <v>substring<> = &<v>string_1<>[2..];

println!("{}", &<v>substring<>);

<#>// Prints: 345<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ Last, End, slice, partial, .right(), []



## String - Operations
@
@ strings, string-only, strings-only


### String - Append Character

<cb><v>string_1<>.push(<v>character_1<>);<>


Appends a character to the end of a string.


Examples:

<cb>let mut <v>string_1<> = "abc".to_string();

<v>string_1<>.push('d');

println!("{}", <v>string_1<>);

<#>// Prints: "abcd"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.push">push()<>
@
@ add, join to, extend
@ string.push(), .push()



### String - Append Str

<cb>= <v>string_1<>.push_str(<v>str_2<>)<>

Appends a string slice to the end of a string.


Examples:

<cb>let mut <v>string_1<> = "abc".to_string();
let <v>str_2<> =  "def";

<v>string_1<>.push_str(<v>str_2<>);

println!("{}", <v>string_1<>);

<#>// Prints: "abcdef"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.push_str">push_str()<>
@
@ add, join to, extend, slice, &str
@ string.push_str(), .push_str()



### String - Append String

<cb><v>string_1<>.push_str(&<v>string_2<>);<>


Appends a string onto another string.

The first string must be mutable.
The second string must be of type <c>str<>.


Examples:

<cb>let mut <v>string_1<> = "abc".to_string();
let <v>string_2<> =  "def".to_string();

<v>string_1<>.push_str(&<v>string_2<>);

println!("{}", <v>string_1<>);

<#>// Prints: "abcdef"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.push_str">push_str()<>
@
@ add, join to, extend
@ string.push_str(), .push_str()



### String - Clone

<cb>= <v>string_1<>.clone()<>


Creates a copy of the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.clone">clone()<>
@
@ copy, duplicate
@ string.clone(), .clone()



### String - Concatenate

<cb>= [<v>string_1<>, <v>string_2<>].concat()<>

<cb>= [<v>string_1<>, <v>string_2<>].concat()

= [<v>string_1<>, <v>string_2<>].join("")

= <v>string_1<> + <v>string_2<>.as_str()

= format!("{}{}", <v>string_1<>, <v>string_2<>)<>

Returns:

<cb>String<>


Joins 2 or more strings together.

These examples take ownership of one or more of the original strings.


Example:

<cb>let <v>a<> = "A".to_string();
let <v>b<> = "B".to_string();

let <v>concatenated<> = [<v>a<>, <v>b<>].concat();

println!("{}", <v>concatenated<>);

<#>// Prints: "AB"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>
@
@ join to, concatenating, merge, +, .concat()



### String - Concatenate With Borrow

<cb>= [&<v>string_1<>, <v>string_2<>.as_str()].concat()<>

<cb>= [&<v>string_1<>, <v>string_2<>.as_str()].concat()

= [&<v>string_1<>, <v>string_2<>.as_str()].join("")

= format!("{}{}", &<v>string_1<>, &<v>string_2<>)<>


Concatenates 2 or more strings.

Does not take ownership of the original strings.


Example:

<cb>let <v>a<> = "A".to_string();
let <v>b<> = "B".to_string();

let <v>c<> = [&<v>a<>, <v>b<>.as_str()].concat();

println!("{} + {} = {}", &<v>a<>, &<v>b<>, &<v>c<>);

<#>// Prints: "A + B = AB"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ join to, concatenating, merge, +, .concat()



### String - Concatenate Str

<cb>= <v>string_1<> + <v>str_2<>

= <v>string_1<> + <v>str_2<> + <v>str_3<> + <v>str_4<><>

Returns:

<cb>String<>


Concatenates a string and one or more string slice into a new string.


Example:

<cb>let <v>a<> = "A".to_string();
let <v>b<> = "B";

let <v>concatenated<> = <v>a<> + <v>b<>;

println!("{}", <v>concatenated<>);

<#>// Prints: "AB"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ join to, concatenating, +, string slice



### String - Find

<cb>= <v>string_1<>.find(<v>match<>)<>

Returns:

<cb>Option\<usize><>


Returns the index of the match string.

Returns None if not found.


Example:

<cb>let <v>string_1<> = "one two three".to_string();

let <v>index<> = <v>string_1<>.find("two");

println!("Index {}", <v>index<>.unwrap());

<#>// Prints: Index 4<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.find">find()<>
@
@ subtring, search, index, position, start
@ string.find(), .find()



### String - Find Right

<cb>= <v>string_1<>.rfind(<v>match<>)<>

Returns:

<cb>Option\<usize><>


Returns the index of the match string for the first match from the right.

Returns None if not found.


Example:

<cb>let <v>string_1<> = "one two three two one".to_string();

let <v>index<> = <v>string_1<>.rfind("two");

println!("Index {}", <v>index<>.unwrap());

<#>// Prints: Index 14<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.rfind">rfind()<>
@
@ subtring, search, index, position, end, last
@ string.rfind(), .rfind()



### String - Format

<cb>= format!("<v>{}<>", <v>string_1<>)<>

<cb>let <v>string_2<>: String = format!("<v>format<>", <v>string_1<>, <v>string_2<>, <v>...<>);<>


Formats a string.


Example:

<cb>let <v>string_1<> = "abc".to_string();

let <v>formatted<> = format!("<v>...{}...<>", <v>string_1<>);

println!("{}", <v>formatted<>);

<#>// Prints: "...abc..."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.format.html">format<>



### String - Join

<cb>= [<v>string_1<>, <v>string_2<>].join(<v>join_str<>)<>

<cb>let <v>string_1<> = [<v>string_1<>, <v>string_2<>, <v>...<>].join(<v>join_str<>);<>

Returns:

<cb>String<>


Joins all the strings in the array separated by <c>join_str<>.


Example:

<cb>let <v>string_1<> = "<v>1<>".to_string();
let <v>string_2<> = "<v>2<>".to_string();
let <v>string_3<> = "<v>3<>".to_string();

let <v>joined<> = [<v>string_1<>, <v>string_2<>, <v>string_3<>].join(", ");

println!("{}", <v>joined<>);

<#>// Prints: "1, 2, 3"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ .join(), merge



### String - Pop Last Character

<cb>= <v>string_1<>.pop()<>


Removes the last character from a string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.pop">pop()<>
@
@ remove, delete, ending



### String - Remove Prefix

<cb>= <v>string_1<>.strip_prefix(<v>prefix_1<>)<>

Returns:

<cb>Option\<&str><>


Removes the prefix but only if it is present.

Returns <c>None<> if no prefix found.



Example:

<cb>let <v>string_1<> = "https://speedsheet.io".to_string();

let <v>substring<> = &<v>string_1<>.strip_prefix("https://").unwrap();

println!("{}", &<v>substring<>);

<#>// Prints: speedsheet.io<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.strip_prefix">strip_prefix()<>
@
@ partial, string.strip_prefix() .strip_prefix()
@ delete, start, leading, beginning, starting, strip



### String - Remove Suffix

<cb>= <v>string_1<>.strip_suffix(<v>prefix_1<>)<>

Returns:

<cb>Option\<&str><>


Removes the suffix but only if it is present.

Returns <c>None<> if no suffix found.


Example:

<cb>let <v>string_1<> = "file_name.txt".to_string();

let <v>substring<> = &<v>string_1<>.strip_suffix(".txt").unwrap();

println!("{}", &<v>substring<>);

<#>// Prints: file_name<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.strip_suffix">strip_suffix()<>
@
@ Postfix, string.strip_suffix(), .strip_suffix()
@ end, delete, ending, strip



### String - Repeat

<cb>= <v>string_1<>.repeat(<v>count<>)<>

Returns:

<cb>String<>


Repeats a string.

Returns "" if count is 0.


Example:

<cb>let <v>star<> = "*".to_string();

let <v>stars<> = <v>star<>.repeat(10);

println!("{}", <v>stars<>);

<#>// Prints: "**********"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.repeat">repeat()<>
@
@ expand, multiply
@ string.repeat(), .repeat()



### String - Replace

<cb>= <v>string_1<>.replace(<v>match<>, <v>replacement<>)<>

Returns:

<cb>String<>


Replaces all occurrences of a substring with another.

Replace is case sensitive.


Example:

<cb>let <v>string_1<> = "Replace <b>this<> and <b>this<> and <b>this<>.".to_string();

let <v>replaced<> = <v>string_1<>.replace("this", "that");

println!("{}", <v>replaced<>);

<#>// Prints: Replace <b>that<> and <b>that<> and <b>that<>.<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.replace">replace()<>
@
@ Update, Modify, Change, substitute, all occurrences, matches
@ string.replace(), .replace()



### String - Replace First Occurrence

<cb>= <v>string_1<>.replacen(<v>match<>, <v>replacement<>, 1)<>

Returns:

<cb>String<>


Replaces the first occurrencese only of a substring with another.

Replace is case sensitive.


Example:

<cb>let <v>string_1<> = "Replace <b>this<> but not this or this.".to_string();

let <v>replaced<> = <v>string_1<>.replacen("this", "that", 1);

println!("{}", <v>replaced<>);

<#>// Prints: Replace <b>that<> but not this or this.<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.replacen">replacen()<>
@
@ Update, Modify, Change, substitute, 1st occurrence only, match, 1st
@ string.replacen(), .replacen()



### String - Replace Character By Position

<cb><v>string_1<>.replace_range(<v>position<>..=<v>position<>, <v>replacement<>);

<v>string_1<>.replace_range(<v>position<>..<v>position_plus_one<>, <v>replacement<>);<>

Returns:

<cb>String<>


Replaces the character at the given position with the replacement string.

Updates the original string in place.
Can replace match with a larger string as long as the original string has capacity.


Example:

<cb>let mut <v>string_1<> = "1 <b>2<> 3".to_string();

<v>string_1<>.replace_range(2..=2, "*");

println!("{}", <v>string_1<>);

<#>// Prints: 1 <b>*<> 3<><>


Example:

<cb>let mut <v>string_1<> = "1 <b>2<> 3".to_string();

<v>string_1<>.replace_range(2..=2, "two");

println!("{}", <v>string_1<>);

<#>// Prints: 1 <b>two<> 3<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.replace_range">replace_range()<>
@
@ Update, Modify, Change, substitute, by index, one, single
@ string.replace_range(), .replace_range(), .., ..=



### String - Replace Substring By Position Range

<cb><v>string_1<>.replace_range(<v>start<>..=<v>end<>, <v>replacement<>);

<v>string_1<>.replace_range(<v>start<>..<v>end_plus_one<>, <v>replacement<>);<>

Returns:

<cb>String<>


Replaces the substring in the given position range with the replacement string.

Updates the original string in plcae.
Can replace match with a larger string as long as the original string has capacity.


Example:

<cb>let mut <v>string_1<> = "one <b>two<> three".to_string();

<v>string_1<>.replace_range(4..=6, "2");

println!("{}", <v>string_1<>);

<#>// Prints: one <b>2<> three<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.replace_range">replace_range()<>
@
@ Update, Modify, Change, substitute, by index, start, end
@ string.replace_range(), .replace_range(), .., ..=



### String - Reverse

<cb>= <v>string_1<>.chars().rev().collect()<>

Returns:

<cb>String<>


Reverses a string.


Example:

<cb>let <v>string_1<> = "12345".to_string();

let <v>reversed<>: String = <v>string_1<>.chars().rev().collect();

println!("{}", <v>reversed<>);

<#>// Prints: 54321<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ backwards



### String - Split

<cb>= <v>string_1<>.split(<v>split_string<>)<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>string_1<>.split(<v>split_string<>).collect()<>

Returns:

<cb>Split<>


Returns a list of strings separated on the split string.

If no split found, returns the original string (1 value).
If no value before or after the split, empty strings are returned.

The split string is not returned.


Example:

<cb>let <v>string_1<> = "one\\ntwo\\nthree\\n".to_string();

let <v>lines<>: Vec\<&str> = <v>string_1<>.split("\\n").collect();

for <v>line<> in <v>lines<>.iter() {
	println!("'{}'", <v>line<>);
}

<#>// Prints:
//
//    'one'
//    'two'
//    'three'
//    ''<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.split">split()<>
@
@ split by
@ string.split(), .split()



### String - Split Once

<cb>= <v>string_1<>.split_once(<v>split_string<>)<>

Returns:

<cb>Option\<(&str, &str)><>


Returns a tuple of strings split in two.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.split_once">split_once()<>
@
@ in two, by
@ string.split_once(), .split_once()



### String - Split on Newline

<cb>= <v>string_1<>.lines()<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>string_1<>.lines().collect()<>

Returns:

<cb>Split<>


Returns a list of lines.

Empty lines are not returned.
Splits on newline (\\n) and newline + carriage return (\\n\\r).


Example:

<cb>let <v>string_1<> = "one\\ntwo\\nthree\\n".to_string();

let <v>lines<>: Vec\<&str> = <v>string_1<>.lines().collect();

for <v>line<> in <v>lines<>.iter() {
	println!("'{}'", <v>line<>);
}

<#>// Prints:
//
//    'one'
//    'two'
//    'three'<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.lines">lines()<>
@
@ by line break
@ string.lines(), .lines()



### String - Split on White Space

<cb>= <v>string_1<>.split_whitespace()<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>string_1<>.split_whitespace().collect()<>

Returns:

<cb>Split<>


Returns a list of strings split on Unicode white space characters.

Empty strings are not returned.


Example:

<cb>let <v>string_1<> = "one two \\t\\n three \\n".to_string();

let <v>lines<>: Vec\<&str> = <v>string_1<>.split_whitespace().collect();

for <v>line<> in <v>lines<>.iter() {
	println!("'{}'", <v>line<>);
}

<#>// Prints:
//
//    'one'
//    'two'
//    'three'<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.split_whitespace">split_whitespace()<>
@
@ by whitespaces
@ string.split_whitespace(), .split_whitespace()



### String - Split with Split Function

<cb>= <v>string_1<>.split(<v>split_function<>)<>

Usage:

<cb>let <v>strings<>: Vec\<&str> = <v>string_1<>.split(<v>split_function<>).collect()<>

Returns:

<cb>Split<>


Returns a list of strings split where the function returns true.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.split">split()<>
@
@ using
@ str.split(), .split()



### String - Trim

<cb>= <v>string_1<>.trim()<>

Returns:

<cb>&str<>


Trims leading and trailing whitespaces from the string.

Includes spaces, newlines, and tabs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.trim">trim()<>
@
@ strip, remove, delete, whitespaces, white spaces
@ string.trim(), .trim()



### String - Trim End

<cb>= <v>string_1<>.trim_end()<>

Returns:

<cb>&str<>


Trims trailing whitespaces from the string.

Includes spaces, newlines, and tabs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.trim_end">trim_end()<>
@
@ strip, remove, delete, whitespaces, white spaces, trailing, ending, right
@ string.trim_end(), .trim_end()



### String - Trim Start

<cb>= <v>string_1<>.trim_start()<>

Returns:

<cb>&str<>


Trims leading whitespaces from the string.

Includes spaces, newlines, and tabs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.trim_start">trim_start()<>
@
@ strip, remove, delete, whitespaces, white spaces, starting, left
@ string.trim_start(), .trim_start()



### Strings - Join

<cb>= <v>vec_of_strings<>.into_iter().collect::\<String>()<>

Returns:

<cb>String<>


Joins all the strings in the array.


Example:

<cb>let <v>strings<> = vec![
	"1".to_string(), 
	"2".to_string(), 
	"3".to_string()
];

let <v>joined<> = <v>strings<>.into_iter().collect::\<String>();

println!("{}", <v>joined<>);

<#>// Prints: 1, 2, 3<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ list of, merge, vec, to
@ .join()



### Strings - Join - With Separator

<cb>= <v>vec_of_strings<>.join(<v>join_str<>)<>

Returns:

<cb>String<>


Joins all the strings in the array separated by <c>join_str<>.


Example:

<cb>let <v>strings<> = vec![
	"1".to_string(), 
	"2".to_string(), 
	"3".to_string()
];

let <v>joined<> = <v>strings<>.join(", ");

println!("{}", <v>joined<>);

<#>// Prints: 1, 2, 3<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ list of, merge, vec, to
@ .join()



### Strings - Sort

<cb><v>vec_of_strings<>.sort()<>


Sorts a vec of strings in place.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort">sort()<>
@
@ vecs, list of
@ str.sort(), .sort()



### Strings - Sort, Ignore Case

<cb><v>vec_of_strings<>.sort_by(|<v>a<>, <v>b<>| <v>a<>.to_lowercase().cmp(&<v>b<>.to_lowercase()));<>


Sorts a vec of strings in place.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.cmp">cmp()<> | <l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_lowercase">to_lowercase<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort_by">sort_by()<>
@
@ vecs, list of
@ string.sort(), .sort(), string.sort_by(), .sort_by()



## String - Conversions
@
@ from, convert, conversion, converting
@ from string, string-to, string-into, into, string-from


### String - To Bytes

<cb> <v>string_1<>.as_bytes()<>

Returns:

<cb>&[u8]<>


Returns a reference to the array of bytes in the underlying string.


Example:

<cb>let <v>text<> = "Text!";

let <v>bytes<>: &[u8] = <v>text<>.as_bytes();

println!("{:?}", <v>bytes<>);

<#>// Prints: [84, 101, 120, 116, 33]<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.as_bytes-1>as_bytes()<>
@
@ get
@ to-bytes, bytes-to
@ string.as_bytes(), .as_bytes(), u8



### String - To Bytes Iterator

<cb> <v>string_1<>.bytes()<>

Returns:

<cb>Bytes<>


Returns a reference to the array of bytes in the underlying string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.bytes>bytes()<>
@
@ get
@ to-bytes, bytes-to
@ string.bytes(), .bytes(), u8



### String - To Chars Iterator

<cb>= <v>string_1<>.chars()<>

Returns:

<cb>Chars<>


Returns an iterator to the characters in the string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ get characters
@ to-chars, chars-to
@ string.chars(), .chars()



### String - To Integer

<cb>= <v>string_1<>.parse()<>

Returns:

<cb>Result\<<v>T<>, ParseIntError><>


Converts a string to an int.

Use turbofish (::\<>) to define returned type if needed (<c>parse::\<i32>()<>).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>::<l https://doc.rust-lang.org/std/string/struct.String.html#method.parse>parse<>
@
@ signed, unsigned
@ i8, i16, i32, i64, isize
@ u8, u16, u32, u64, usize
@ i8-to, i16-to, i32-to, i64-to, isize-to
@ u8-to, u16-to, u32-to, u64-to, usize-to
@ to-int, to-integer, int-to, integer-to



### String - To Lower Case

<cb>= <v>string_1<>.to_lowercase()<>

Returns:

<cb>String<>


Converts a string to lower case.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_lowercase">to_lowercase()<>
@
@ string.lowercase(), .lowercase(), lowercase



### String - To Upper Case

<cb>= <v>string_1<>.to_uppercase()<>

Returns:

<cb>String<>


Converts a string to upper case.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.to_uppercase">to_uppercase()<>
@
@ string.uppercase(), .uppercase(), uppercase



### String - To Str

<cb>= <v>string_1<>.as_str()<>

Usage:

<cb>let <v>str_2<>: &str = <v>string_1<>.as_str();<>


Extracts the <c>str<> data behind the string.


Example:

Using .as_str():

<cb>let <v>string_1<> = "abc".to_string();

let <v>str_2<> = <v>string_1<>.as_str();

println!("{}", <v>str_2<>);

<#>// Prints: "abc"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.as_str">as_str()<>
@
@ string slice, get, as
@ deref coercion
@ to-str, str-to
@ string.as_str(), .as_str(), as_str()
@ string.to_str(), .to_str(), to_str()



### String - To Str / Boxed Str

<cb>= <v>string_1<>.into_boxed_str()<>

Usage:

<cb>let <v>str_2<>: &str = <v>string_1<>.into_boxed_str();<>

Returns:

<cb>Box\<str><>


Extracts the <c>str<> data inside the string.

Drops any unused capacity.


Example:

<cb>let <v>string_1<> = "abc".to_string();

let <v>str_2<> = <v>string_1<>.into_boxed_str();

println!("{}", <v>str_2<>);

<#>// Prints: "abc"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l "https://doc.rust-lang.org/std/string/struct.String.html#method.into_boxed_str">into_boxed_str()<>
@
@ string slice, get, as
@ to-str, str-to, to-boxed, boxed-to, box-to
@ box\<str>
@ string.into_boxed_str(), .into_boxed_str(), into_boxed_str()
@ string.to_str(), .to_str(), to_str()



### String - To Str / Dereference

<cb>= &<v>string_1<><>

Usage:

<cb>let <v>str_2<>: &str = &<v>string_1<>;<>


Dereferences the <c>str<> data from the string variable.


Example:

<cb>let <v>string_1<> = "abc".to_string();

let <v>str_2<>: &str = &<v>string_1<>;

println!("{}", <v>str_2<>);

<#>// Prints: "abc"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>
@
@ string slice
@ to-str, str-to
@ deref coercion, &, dereferencing



### String - To Vec of Char

<cb>= <v>string_1<>.chars().collect()<>

Returns:

<cb>Vec\<char><>


Returns an array of characters from a string.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>.<l https://doc.rust-lang.org/std/string/struct.String.html#method.chars>chars()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect">collect()<>
@
@ get characters
@ to-chars, chars-to
@ string.chars(), .chars(), .collect()



## String - Extras


### String - Memory


<cb><t><|><|>┌───────────────────┐    ┌───┬───┬───┬───┐
String<|>=<|>│ pointer:  usize ──│──▶ │ T │ E │ X │ T │
<|><|>│ capacity: usize   │    └───┴───┴───┴───┘
<|><|>│ length:   usize   │
<|><|>└───────────────────┘<><>


<cb><t><|><|>┌───────────────────┐    ┌───┬───┬───┬───┬───┬───┬───┬───┐
String<|>=<|>│ pointer:  usize ──│──▶ │ T │ E │ X │ T │   │   │   │   │
<|><|>│ capacity: usize   │    └───┴───┴───┴───┴───┴───┴───┴───┘
<|><|>│ length:   usize   │
<|><|>└───────────────────┘<><>
@
@ memory size, memory-only, mem-only



# String Literal - To String

<cb>= "<v>string literal<>".to_string();<>

Or:

<cb>= String::from("<v>string literal<>");<>


Use .to_string() or ::from() to convert a string literal to a string.

String literals are stored as type &str and must be explicitly converted to type String.
This is because string literals are stored in code whereas strings are stored on the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/struct.String.html">String<>
@
@ to-string
@ Convert, conversion, converting, from, slice



# str vs &str vs String

<c>str<>:

<*>The Actual String Data
Immutable u8 Array
UTF-8 Encoded
On Heap | Stack | Program Binary
Not Directly Referenceable<>


<c>&str<>:

<*>References str Data
Borrow Only
Knows Length<>

<in-2>For:

<*>Read Only Strings
Accessing <c>String<> Data<><>


<c>String<>:

<*>Mutable u8 Array
UTF-8 Encoded
Owns Data
On Heap<>

<in-2>For:

<*>Ownership
Passing
Dynamic String<><>


<cb><t><|><|>┌───┬───┬───┬───┐
str<|>=<|>│ T │ E │ X │ T │
<|><|>└───┴───┴───┴───┘

<|><|>┌───────────────────┐    ┌───┬───┬───┬───┐
&str<|>=<|>│ pointer:  usize ──│──▶ │ T │ E │ X │ T │
<|><|>│ length:   usize   │    └───┴───┴───┴───┘
<|><|>└───────────────────┘

<|><|>┌───────────────────┐    ┌───┬───┬───┬───┐
String<|>=<|>│ pointer:  usize ──│──▶ │ T │ E │ X │ T │
<|><|>│ capacity: usize   │    └───┴───┴───┴───┘
<|><|>│ length:   usize   │
<|><|>└───────────────────┘<><>
@
@ versus, memory size
@ &str



# Unit

<cb>= ()<>

<cb>let <v>unit<> = ();<>


The value returned from a function where no value was explicitly returned.


Rust Docs: <l "https://doc.rust-lang.org/std/primitive.unit.html">unit<>
@
@ ()
@ units, unit-only, units-only
@ data type



# Enum
@
@ enums, enum-only, enums-only
@ data type


## Enum - Basics

<cb>enum <v>Enum1<> {
	<v>Value1<>,
	<v>Value2<>,
	<v>Value3<>
}

let <v>value_1<> = <v>Enum1<>::<v>Value1<>;<>

Print:

<cb>println!("{}", <v>Enum1<>::<v>Value1<> as u8);<>

Match:

<cb>match <v>value_1<> {
	<v>Enum1<>:<v>Value1<> => <v>...<>,
	<v>Enum1<>:<v>Value2<> => <v>...<>,
	<v>Enum1<>:<v>Value3<> => <v>...<>
}<>

Enums With Properties:

<cb>enum <v>Enum1<> {
	<v>Value1<>(i32),
	<v>Value2<>(char),
	<v>Value3<>(String)
	<v>Value4<>{x: i32, y: i32}
}<>
@
@ summary



## Enum - Create
@
@ new


### Enum - Define

<cb>enum <v>Enum1<> {
	<v>Item1<>,
	<v>Item2<>,
	<v>Item3<>
}<>

<cb>= <v>Enum1<>::Item1<>


Creates an enum with the defined items.

By default enum items are stored as a sequence of integers.


Example:

<cb>enum <v>Colors<> {
	<v>Red<>,
	<v>Green<>,
	<v>Blue<>
}

let <v>red<> = <v>Color<>::<v>Red<>;

println!("Red = {}", <v>Color<>::<v>Red<> as u8);
println!("Green = {}", <v>Color<>::<v>Green<> as u8);
println!("Blue = {}", <v>Color<>::<v>Blue<> as u8);

<#>// Red = 0
// Green = 1
// Blue = 2<><>



### Enum - Define With Explicit Values

<cb>enum <v>Enum1<> {
	<v>Item1<> = <v>value_1<>,
	<v>Item2<> = <v>value_2<>,
	<v>Item3<>
}<>

<cb>= <v>Enum1<>::Item1<>


Creates an enum where each item has a custom value.

Items with no explicit values will continue in ascending values from the last set value.


Example:

<cb>enum <v>Color<> {
	<v>Red<> = 10,
	<v>Green<> = 20,
	<v>Blue<>
}

println!("Red = {}", <v>Color<>::<v>Red<> as u8);
println!("Green = {}", <v>Color<>::<v>Green<> as u8);
println!("Blue = {}", <v>Color<>::<v>Blue<> as u8);

<#>// Red = 10
// Green = 20
// Blue = 21<><>
@
@ internal, stored



### Enum - Define As Struct

<cb>enum <v>Enum1<> {
	<v>Item1<> {field: <v>type<>},
	<v>Item2<> {field_1: <v>type<>, field_2: <v>type<>},
	<v>Item3<> {field_1: <v>type<>, field_2: <v>type<>, <v>...<>}
}<>

<cb>= <v>Enum1<>::Item1{field: <v>value<>}<>


Creates an enum where the items have struct values.


Example:

<cb>enum <v>Shape<> {
	<v>Circle<> {<v>radius<>: u32},
	<v>Rectangle<> {<v>height<>: u32, <v>width<>: u32},
}

let <v>circle_1<> = Shape::Circle {radius: 5};
let <v>rectangle_1<> = Shape::Rectangle {height: 4, width: 6};<>
@
@ internal, stored



### Enum - Define As Tuples

<cb>enum <v>Enum1<> {
	<v>Item1<> (<v>type<>),
	<v>Item2<> (<v>type<>, <v>type<>),
	<v>Item3<> (<v>type<>, <v>type<>, <v>...<>)
}<>

<cb>= <v>Enum1<>::Item1(<v>value<>)<>


Creates an enum with items containing tuple data.


Example:

<cb>enum <v>Color<> {
	<v>Base<> {u32},
	<v>Primary<> (u32),
	<v>Secondary<> (u32)
}

let <v>base<> = Color::Base(0xFF0000)<>
@
@ internal, stored



## Enum - Operations


### Enum - Equals

<cb><v>value<> == <v>Enum1<>::<v>Variant1<><>

Usage:

<cb>if <v>Enum1<>::<v>Item1<> == <v>value<> <v>...<><>


Compares a value to an enum variant.

<b>Requires<> the enum implements the PartialEq trait.
Works best with simple enums (no internal values).
For complex enums, the internal values are taken into account.

Imlement using <c>#[derive(PartialEq)]<>.


Example:

<cb>#[derive(PartialEq)]
enum <v>Color<> {
	Red,
	Green,
	Blue
}

let <v>color<> = <v>Color<>::Red;

if <v>color<> == <v>Color<>::Red {
	println!("Color Red");
};

<#>// Prints: Color Red<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.PartialEq.html">PartialEq<>
@
@ not, equals, is value, is type, is variant


### Enum - To Integer

<cb>= <v>Enum1<>.<v>Item1<> as u8<>


Cast enum items to unsigned integer.

This only works enums with no data attached to them (no tuple or struct enums).
@
@ convert, conversion



## Enum - Patterns


### Enum - Equals / If Let Variant

<cb>if let <v>Enum1<>::<v>Item1<> = <v>value<> <v>...<><>

or

<cb>match <v>value<> {
	<v>Enum1<>::<v>Item1<> => <v>...<>,
	_ => <v>...<>
}<>


Tests if the enum is a paticlar variant of it (e.g. is it Item1?).

Use <c>match<> or <c>if let<>. 

There is no direct way to check if an enum is a specific variant out of the box.
@
@ not, equals, is value, is type



### Enum - If Let - Borrow Wrapped Value

<cb>if let <v>Type<>::<v>Variant<>(<v>value<>) = &<v>value_1<> {
	...<>

or

<cb>if let <v>Type<>::<v>Variant<>(ref <v>value<>) = <v>value_1<> {
	...<>


Borrows the wrapped value inside.
@
@ ref, as reference, with



### Enum - If Let - Mutably Borrow Wrapped Value

<cb>if let <v>Type<>::<v>Variant<>(ref mut <v>value<>) = <v>value_1<> {
	...<>
}


Mutably borrows the wrapped value inside.
@
@ ref, mut, as reference, with



### Enum - Match - Borrow Wrapped Value

<cb>match &<v>value_1<> {
	<v>Type<>::<v>Variant<>(<v>value<>) => { ... }
	...
}<>

or

<cb>match <v>value_1<> {
	<v>Type<>::<v>Variant<>(ref <v>value<>) => { ... }
	...
}<>


Borrows the wrapped value inside.
@
@ ref, as reference



### Enum - Match - Mutably Borrow Wrapped Value

<cb>match <v>value_1<> {
	<v>Type<>::<v>Variant<>(ref match <v>value<>) => { ... }
	...
}<>


Mutably borrows the wrapped value inside.
@
@ ref, mut, as reference



# Range
@
@ std::ops::Range
@ ranges, range-only, ranges-only
@ data type, syntax


## Range - Basics

<table><col>Range<><col><c><v>start<>..<v>end_plus_one<><><>
<col>Range, Inclusive<><col><c><v>start<>..=<v>end<><><>
<col>Range From<><col><c><v>start<>..<><>
<col>Range To<><col><c>..<v>end_plus_one<><><>
<col> <>
<col>Range Start<><col><c><v>range<>.start<><>
<col>Range End<><col><c><v>range<>.stop<><>
<col>Range Step<><col><c><v>range<>.step_by(<v>step_size<>)<><><>
@
@ basics



## Range Types

### Range Type - Range

<cb>= <v>start<>..<v>end<><>

Returns:

<cb>Range<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/struct.Range.html">Range<>
@
@ std::ops::Range, ops::Range, Range



### Range Type - Range Inclusive

<cb>= <v>start<>..=<v>end<><>

Returns:

<cb>RangeInclusive<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html">RangeInclusive<>
@
@ std::ops::RangeInclusive, ops::RangeInclusive, RangeInclusive



## Range - Details


### Integer Range

<cb>= <v>start<>..<v>end_plus_one<><>

<cb>= <v>start<>..=<v>end<><>

Usage:

<cb>use std::ops::Range;

let <v>range_1<>: Range\<i32> = <v>0<>..<v>4<>;<>

Type:

<cb>Range\<<v>type<>><>


Examples:

With <c>..<> :

<cb>use std::ops::Range;

let <v>range_1<>: Range\<i32> = <v>0<>..<v>4<>;

for <v>value<> in <v>range_1<> {
	print!("{} ", <v>value<>);
}
println!();

<#>// Prints: 0 1 2 3 <><>

With <c>..=<> :

<cb>use std::ops::Range;

let <v>range_1<>: Range\<i32> = <v>0<>..=<v>3<>;

for <v>value<> in <v>range_1<> {
	print!("{} ", <v>value<>);
}
println!();

<#>// Prints: 0 1 2 3 <><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/struct.Range.html">Range<>



### Integer Range - Reverse

<cb>= (<v>start<>..<v>end_plus_one<>).rev()<>

<cb>= (<v>start<>..=<v>end<>).rev()<>


Returns a range that counts down from highest to lowest.

Start is the lowest value, end is the highest value.


Example:

<cb>for <v>value<> in (0..3).rev() {
	println!("{}", <v>value<>);
}

<#>Prints: 2, 1, 0<><>


Example:

<cb>for <v>value<> in (0..=3).rev() {
	println!("{}", <v>value<>);
}

<#>Prints: 3, 2, 1, 0<><>
@ count down, -1, reverse, negative, 
@ .rev()



### Integer Range - With Step

<cb>= (<v>start<>..<v>end_plus_one<>).step_by(<v>step_size<>)<>

<cb>= (<v>start<>..=<v>end<>).step_by(<v>step_size<>)<>

Usage:

<cb>use std::ops::Range;

let <v>range_1<>: Range\<i32> = (<v>0<>..=<v>10<>).step_by(<v>2<>);<>

Type:

<cb>Range\<<v>type<>><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l https://doc.rust-lang.org/std/ops/struct.Range.html>Range<>
@
@ range.step_by(), .step_by()



### Float Range

<cb>= <v>start<>..<v>end_plus_one<><>

<cb>= <v>start<>..=<v>end<><>

Usage:

<cb>use std::ops::Range;

let <v>range_1<>: Range\<f32> = <v>0.0<>..<v>4.0<>;<>

Type:

<cb>Range\<<v>type<>><>


Creates a range for floating point values.

Rust places a restriction on floating ranges... they can NOT be iterated over.
This is due to the imprecise nature of floats.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l https://doc.rust-lang.org/std/ops/struct.Range.html>Range<>



### Range - Start

<cb>= <v>range_1<>.start<>



### Range - End

<cb>= <v>range_1<>.end<>



# Struct

A struct is an immutable custom data type that has named fields.


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.struct.html">struct<>
@
@ structs, struct-only, structs-only, structures, structure-only, structures-only
@ data type


## Struct - Basics

Struct Fields:

<cb>struct <v>Struct1<> {
   <v>field_1<>: <v>T1<>,
   <v>field_2<>: <v>T2<>,
   <v>field_3<>: <v>T3<>
}<>

Struct Functions and Methods:

<cb>impl <v>Struct1<> {

	fn new(<v>field_1<>, <v>field_2<>, <v>field_3<>) -> Self {
		<v>Struct1<> {<v>field_1<>, <v>field_2<>, <v>field_3<>}
	}

	fn <v>function_1<>(<v>param_1<>: <v>T4<>, <v>param_2<>: <v>T5<>) {
		<v>...<>
	}

	fn <v>method_1<>(&self, <v>param_1<>: <v>T<>, <v>...<>) {
		<v>...<>
	}
}<>

Call Function:

<cb><v>Struct1<>::<v>function_1<>(<v>param_1<>, <v>param_2<>);<>

Create:

<cb>let <v>value_1<> = <v>Struct1<> {
   <v>field_1<>: <v>value<>,
   <v>field_2<>: <v>value<>,
   <v>field_3<>: <v>value<>
};

let <v>value_2<> = <v>Struct1<>::new(<v>field_1<>, <v>field_2<>, <v>field_3<>);<>

Access:

<cb>let <v>field_1<> = <v>value_1<>.<v>field_1<>;

<v>value_1<>.method_1(<v>param_1<>, <v>...<>);<>
@
@ summary



## Struct - Define


### Struct - Define

<cb>struct <v>Struct1<> {
   <v>field_1<>: <v>type<>,
   <v>field_2<>: <v>type<>,
   <v>field_3<>: <v>type<>
}<>


Defines a structure type.

Note:
No semicolon (<c>;<>) is required at the end of the definition.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>point_1<> = <v>Point<> {
	x: 10,
	y: 20
};

println!("Point 1: {}, {}", <v>point_1<>.<v>x<>, <v>point_1<>.<v>y<>);

<#>// Prints: "Point 1: 10, 20"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.struct.html">struct<>



### Struct - Define Constructor

<cb>impl <v>Struct1<> {
	fn new() -> Self {
		<v>...<>
	}
}<>


Implement a new() function.

Rust does not support an intrinsic constructor function by default.
The idiomatic way to implement a constructor is to implement a <c>new<> function.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

impl <v>Point<> {
	fn new(<v>x<>: i32, <v>y<>: i32) -> Self {
		<v>Point<> {<v>x<>, <v>y<>}
	}
}

let <v>point_1<> = <v>Point<>::new(10, 20);

println!("Point 1: {}, {}", <v>point_1<>.<v>x<>, <v>point_1<>.<v>y<>);

<#>// Prints: "Point 1: 10, 20"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.struct.html">struct<>
@
@ ::new(), new()
@ impl-only



### Struct - Create

<cb>= <v>Struct1<> {
   <v>field_1<>: <v>value<>,
   <v>field_2<>: <v>value<>,
   <v>field_3<>: <v>value<>
}<>


Creates an instance of the struct.

Note the syntax requires {} around the fields and : between field names and values.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>point_1<> = <v>Point<> {
	x: 10,
	y: 20
};

println!("Point 1: {}, {}", <v>point_1<>.<v>x<>, <v>point_1<>.<v>y<>);

<#>// Prints: "Point 1: 10, 20"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.struct.html">struct<>
@
@ instantiate, new



### Struct - Create - Short Syntax / Matching Variables

<cb>= <v>Struct1<> {
   <v>field_1<>,
   <v>field_2<>,
   <v>field_3<>
}<>


Defines a structure type.

When the field name and variable name are the same, use this syntax (<v>field_name<>) over the longer form (<v>field_name<>: <v>variable_name<>).


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>x<> = 10;
let <v>y<> = 20;

let <v>point_1<> = <v>Point<> { <v>x<>, <v>y<> };

println!("Point 1: {}, {}", <v>point_1<>.<v>x<>, <v>point_1<>.<v>y<>);

<#>// Prints: "Point 1: 10, 20"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.struct.html">struct<>
@
@ shorthand
@ instantiate, new



### Struct - Create - From Other With Updates

<cb>= <v>Struct1<> {
	<v>field_1<>: <v>value<>,
	<v>field_1<>: <v>value<>,
	..<v>other_struct_1<>
};<>


Creates a struct using values from a second instance but updates the named fields with new values.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32,
	<v>z<>: i32
}

let <v>point_1<> = <v>Point<> { <v>x<>: 10, <v>y<>: 20, <v>z<>: 100 };

let <v>point_2<> = <v>Point<> {
	<v>x<>: -10,
	<v>y<>: -20,
	..<v>point_1<>
};

println!("Point 2: {}, {}, {}", <v>point_2<>.<v>x<>, <v>point_2<>.<v>y<>, <v>point_2<>.<v>z<>);

<#>// Prints: "Point 2: -10, -20, 100"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/keyword.struct.html">struct<>
@
@ instantiate, new
@ update syntax



## Struct - Properties


### Struct - Destructure

<cb>let <v>Struct1<> {<v>field_1<>, <v>field_2<>, <v>...<>} = <v>item_1<>;<>

Destructures a struct item into separate values.

Ownership is transfered to the new variables.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>point_1<> = <v>Point<> { <v>x<>: 10, <v>y<>: 20};

let <v>Point<> {<v>x<>, <v>y<>} = <v>point_1<>;

println!("Point: {}, {}", <v>x<>, <v>y<>);

<#>// Prints: "Point: 10, 20"<><>
@
@ destructuring, get, items, values, fields



### Struct - Get Field Value

<cb>= <v>struct_1<>.<v>field_1<><>

<cb>let <v>field_1<> = <v>struct_1<>.<v>field_1<>;<>


Returns the value of the given field.



## Struct - Operations


### Struct - Assign

<cb>let <v>struct_1<> = <v>Strut1<> {
   <v>field_1<>: <v>value<>,
   <v>field_2<>: <v>value<>,
   <v>field_3<>: <v>value<>,
};<>



### Struct - Copy

<cb>= <v>Struct1<> { 
	..<v>original<>
}<>


Creates a duplicate of the original structure.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>point_1<> = <v>Point<> {
	x: 10,
	y: 20
};

let <v>point_2<> = Point { ..<v>point_1<> };

println!("Point 2: {}, {}", <v>point_2<>.<v>x<>, <v>point_2<>.<v>y<>);

<#>// Prints: "Point 2: 10, 20"<><>
@
@ clone, duplicate
@ ..



### Struct - Copy With Changes

<cb>= <v>Struct1<> {
	<v>field_1<>: <v>value<>, 
	<v>field_2<>: <v>value<>, 
	..<v>original<>,
}<>


Creates a copy of the original but updates the fields with different values.

The field updatse must come first.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

let <v>point_1<> = <v>Point<> {
	x: 10,
	y: 20
};

let <v>point_2<> = Point {
	<v>y<> = 200,
	..<v>point_1<>
};

println!("Point 2: {}, {}", <v>point_2<>.<v>x<>, <v>point_2<>.<v>y<>);

<#>// Prints: "Point 2: 10, 20"<><>
@
@ clone, duplicate, update, updates, modifications, modify
@ ..



# Tuple

A fixed length ordered list of items.


Rust Docs: <l "https://doc.rust-lang.org/std/primitive.tuple.html">tuple<>
@
@ (), data type
@ tuples, tuple-only, tuples-only=


## Tuple - Create
@
@ define, initialize, create, instantiate


### Tuple - Create - Basic

<cb>= (<v>value_1<>, <v>value_2<>, <v>value_3<>)<>

Usage:

<cb>let <v>tuple1<>:(<v>type<>, <v>type<>, <v>...<>) = (<v>value_1<>, <v>value_2<>, <v>value_3<>)<>

Immutable list of items.
Can be of mixed types.


Example:

<cb>let <v>tuple_1<> = (<v>1<>, <v>'2'<>, <v>true<>)<>


Rust Docs: <l "https://doc.rust-lang.org/std/primitive.tuple.html">tuple<>



### Tuple - Create Empty Tuple

<cb>= ()<>



## Tuple Operations


### Tuple - Get Value

<cb>= <v>tuple1<>.<v>index<><>


Returns the given element from a tuple.


Example:

<cb>let <v>numbers<> = ("one", "two", "three");

let <v>second_value<> = <v>numbers<>.1;

println!("{}", <v>second_value<>);

<#>// Prints: two<><>



### Tuple - Destructure

<cb>let (<v>value_1<>: <v>type<>, <v>value_2<>: <v>type<>, <v>value_3<>: <v>type<>) = <v>tuple1<>;<>


Destructures the values inside a tuple into individual variables.

Ownership is transfered to the new variables.


Example:

<cb>let <v>numbers<> = ("1", "2", "3");

let (<v>one<>, <v>two<>, <v>three<>) = <v>numbers<>;

println!("{}, {}, {}", <v>one<>, <v>two<>, <v>three<>);

<#>// Prints: 1, 2, 3<><>
@
@ get, destructuring, values, items



# Tuple Struct

A tuple structure is an immutable custom data type with enumerated fields.
@
@ tuple structs
@ tuple-struct-only, tuple-structs-only, tuple-structure-only, tuple-structures-only
@ struct-only, structs-only, structure-only, structures-only
@ data type



## Tuple Struct - Basics

Define:

<cb>struct <v>Struct1<>(<v>type<>, <v>type<>, <v>type<>);<>

Create:

<cb>let <v>value_1<> = <v>Strut1<>(<v>value<>, <v>value<>, <v>value<>);<>

Access:

<cb>let <v>first_field<> = <v>value_1<>.<v>0<>;<>
@
@ summary



## Tuple Struct - Define

<cb>struct <v>TupleStruct1<>(<v>type<>, <v>type<>, <v>type<>);<>


Defines a tuple struct.

Note:
A semicolon (<c>;<>) is required at the end of the definition.


Example:

<cb>struct <v>Point<>(<v>i32<>, <v>i32<>);

let <v>point_1<> = <v>Point<>(<v>10<>, <v>20<>);

println!("Point 1: {}, {}", <v>point_1<>.0, <v>point_1<>.1);

<#>// Prints: "Point 1: 10, 20"<><>
@
@ create, new, instantiate



## Tuple Struct - Properties


### Tuple Structure - Get Field Value

<cb>= <v>value_1<>.<v>0<>;<>

<cb>let <v>first_field<> = <v>value_1<>.<v>0<>;<>



## Tuple Struct - Operations



### Tuple Struct - Assign

<cb>let <v>value_1<> = <v>TupleStrut1<>(<v>value<>, <v>value<>, <v>value<>);<>



# Unit-Like Struct

A unit-like struct is a struct with no fields.
@ structs, struct-only, structs-only, structures, structure-only, structures-only
@ data type



## Unit-Like Structure - Basics

<cb>struct <v>UnitLikeStruct<>;<>

<cb>let <v>value_1<> = <v>UnitLikeStruct<>;<>
@
@ summary



## Unit-Like Struc - Define
@
@ new


### Unit-Like Struc - Define

<cb>struct <v>StructName<>;<>


Defines a struct with no fields.



### Unit-Like Struc - Create

<cb>let <v>value_1<> = <v>StructName<>;<>


Creates the unit-like struct.
@
@ instantiate



## Unit-Like Struc - Example

<cb>#[derive(Debug)]
struct <v>UnitLikeStruct<>;

let <v>value_1<> = <v>UnitLikeStruct<>;

println!("{:?}", <v>value_1<>);

<#>// Prints: UnitLikeStruct<><>



# Array

Type:

<cb>: [<v>Type<>; <v>size<>]<>

Fixed size list of items.
All items must be of the same type.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ arrays, array-only, arrays-only, ;
@ data type



## Array - Define
@
@ new, create, instantiate


### Array - Create

<cb>let <v>array_1<>: [<v>Type<>; <v>size<>];<>


Creates an array of given size.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ initial, define
@ []



### Array - Create - Initialize Values

<cb>= [<v>value_1<>, <v>value_2<>, <v>value_3<>]<>

<cb>let <v>array_1<>: [<v>Type<>; <v>size<>] = [<v>...<>]<>


Example:

<cb>let <v>array_1<> = [<v>1<>, <v>2<>, <v>3<>];<>

<cb>let <v>array_1<>: [<v>i32<>; <v>3<>] = [<v>1<>, <v>2<>, <v>3<>];<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ set to
@ []



### Array - Create - Initialize To Single Value

<cb>let <v>array_1<> = [<v>initial_value<>; <v>size<>];<>

<cb>let <v>array_1<>: [<v>Type<>; <v>size<>] = [<v>initial_value<>; <v>size<>];<>


Creates an array of given size.

Every element will be set to the initial value.


Examples:

<cb>let <v>array_1<> = [0; 3];

println!("{:?}", &<v>array_1<>);

<#>// Prints: [0, 0, 0]<><>

<cb>let <v>array_1<>: [<v>i32<>; 3] = [0; 3];

println!("{:?}", &<v>array_1<>);

<#>// Prints: [0, 0, 0]<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ initial values, set to
@ []



### Array - Create - Multidimentional

<cb>let <v>array_1<>: [[<v>Type<>; <v>inner_size<>]; <v>outer_size<>];<>

<cb>let <v>array_1<> = [
	[<v>value_1<>, <v>value_2<>, <v>value_3<>],
	[<v>value_4<>, <v>value_5<>, <v>value_6<>],
];<>

<cb>let <v>array_1<>: [[<v>Type<>; <v>inner_size<>]; <v>outer_size<>] = [
	[<v>value_1<>, <v>value_2<>, <v>value_3<>],
	[<v>value_4<>, <v>value_5<>, <v>value_6<>],
];<>


Creates an array of given size.


Example:

<cb>let <v>array_1<> = [[1, 2, 3],[4, 5, 6]];

println!("{:?}", &<v>array_1<>);
println!("{:?}", &<v>array_1<>[1][2]);

<#>// Prints:
//
//    [[1, 2, 3], [4, 5, 6]]
//    6<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ initial values, set to, dimensions, dimensional, 2D
@ [], set to



## Array - Properties


### Array - Contains?

<cb>= <v>array_1<>.contains(&<v>item<>);<>


Returns true if the item exists in the array.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ has, in, includes
@ item, element, value



### Array - Destructure

<cb>let [<v>item_1<>, <v>item_2<>, <v>item_3<>, <v>...<>] = <v>items<>;<>

Dustructures the array into indiviual variables.

Ownership is transfered to the new variables.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ destructuring, get, items, values



### Array - Get

<cb>= <v>array_1<>[<v>index<>]<>


Example:

<cb>let <v>array_1<> = [<v>1<>, <v>2<>, <v>3<>];

<v>first<> = <v>array_1<>[<v>0<>];<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ item, element, value



### Array - Get First

<cb>= <v>array_1<>[0]<>


Example:

<cb>let <v>array_1<> = [<v>1<>, <v>2<>, <v>3<>];

<v>first<> = <v>array_1<>[<v>0<>];<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ item, element, value



### Array - Get Last

<cb>= <v>array_1<>[<v>array_1<>.len() - 1]<>


Example:

<cb>let <v>array_1<> = [<v>1<>, <v>2<>, <v>3<>];

let last = <v>array_1<>[<v>array_1<>.len() - 1];<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ item, element, value



### Array - Get Multidimensional

<cb>= <v>array_1<>[<v>outer_index<>][<v>inner_index<>]<>


Example:

<cb>let <v>array_1<> = [
	[<v>1<>, <v>2<>, <v>3<>],
	[<v>4<>, <v>5<>, <v>6<>],
];

let <v>sixth<> = <v>array_1<>[<v>1<>][<v>2<>];

println!("{}", <v>sixth<>);

<#>// Prints: 6<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ item, element, value, 2d, dimensions, dimensional



### Array - Iterate

<cb>for <v>item<> in <v>array_1<> {
	<v>...<>
}<>



### Array - Length

<cb>= <v>array_1<>.len()<>

Returns:

<cb>usize<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
@
@ .len(), get
@ length, count, size



## Array - Operations


### Array - Find Position

<cb>= <v>array_1<>.iter().position(<v>match_function<>)<>


Finds the index position of the item that matches the match function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/primitive.array.html>Arrays<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find">find()<>
@
@ index, location
@ vec.clone(), .clone(), .position()



### Array - Find Value

<cb>= <v>array_1<>.iter().find(<v>match_function<>)<>


Finds the value of the item that matches the match function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find">find()<>
@
@ item, element, value
@ vec.clone(), .clone(), .find()



### Array - Slice

<cb>= <v>array_1<>[<v>start<>..]

= <v>array_1<>[<v>start<>..=<v>end<>]
= <v>array_1<>[<v>start<>..<v>end_plus_1<>]

= <v>array_1<>[..=<v>end<>]
= <v>array_1<>[..<v>end_plus_1<>]<>


Returns a slice from a array.


Examples:

<cb>let <v>array_1<> = [1, 2, 3, 4, 5];

let <v>first<> = &<v>array_1<>[0..=0];                 <#>// [1]<>

let <v>last<> = &<v>array_1<>[array_1.len() - 1.. array_1.len()];   <#>// [5]<>

let <v>index_1<> = &<v>array_1<>[1..=1];               <#>// [2]<>

let <v>index_1_to_3<> = &<v>array_1<>[1..4];           <#>// [2, 3, 4]<>

let <v>index_1_to_end<> = &<v>array_1<>[1..];          <#>// [2, 3, 4, 5]<>

let <v>start_to_index_3<> = &<v>array_1<>[..4];        <#>// [1, 2, 3, 4]<><>
@
@ Partial, subarray, sub-array, subslice, sub-slice
@ .subarray(), []



### Array - Slice - Subslice

<cb>= &<v>array_1<>[<v>start<>..<v>end_plus_1<>]<>

<cb>= &<v>array_1<>[<v>start<>..=<v>end<>]<>


Returns a slice from inside an array.


Example:

<cb>let <v>array_1<> = [1, 2, 3, 4, 5];

let <v>subarray<> = &<v>array_1<>[1..3];

println!("{:?}", &<v>subarray<>);

<#>// Prints: [2, 3]<><>
@
@ Partial, subarray, sub-array, subslice, sub-slice
@ .subarray(), []



### Array - Slice - Left

<cb>= &<v>array_1<>[..<v>length_plus_1<>]<>


Returns the left slice from an array.


Example:

<cb>let <v>array_1<> = [1, 2, 3, 4, 5];

let <v>subarray<> = &<v>array_1<>[..3];

println!("{:?}", &<v>subarray<>);

<#>// Prints: [1, 2, 3]<><>
@
@ Start, Beginning, slice, subarray, sub-array, subslice, sib-slice, partial, .left(), []


 
### Array - Slice - Right

<cb>= &<v>array_1<>[<v>start<>..]<>


Returns the right slice from an array.


Example:

<cb>let <v>array_1<> = [1, 2, 3, 4, 5];

let <v>subarray<> = &<v>array_1<>[2..];

println!("{:?}", &<v>subarray<>);

<#>// Prints: [3, 4, 5]<><>
@
@ Last, End, slice, subarray, sub-array, subslice, sib-slice, partial, .right(), []



## Array - Conversions
@
@ from, convert, conversion, converting
@ from array, array-to, array-into, into


### Array - To Vec

<cb>= <v>array_1<>.to_vec()<>


Converts an array into a vec.


Example:

<cb>let <v>array_1<> = [1, 2, 3, 4, 5];

let <v>vec_1<>: Vec\<i32> = <v>array_1<>.to_vec();

println!("{:?}", &<v>vec_1<>);

<#>// Prints: [1, 2, 3, 4, 5]<><>
@
@ to-vec
@ .to_vec()


## Array - Slicing
@
@ slice-only, slices

<cb>let <v>first<> = <v>array_1<>[0];
let <v>nth<> = <v>array_1<>[<v>n<>];
let <v>second_last<> = <v>array_1<>[<v>array_1<>.len() - 2];
let <v>last<> = <v>array_1<>[<v>array_1<>.len() - 1];

let <v>all_but_first<>: Vec\<_> = <v>array_1<>[1..].to_vec();
let <v>all_but_last<>: Vec\<_> = <v>array_1<>[..<v>array_1<>.len() - 1].to_vec();

let <v>reversed<>: Vec\<_> = <v>array_1<>.iter().rev().cloned().collect();

let <v>from<>: Vec\<_> = <v>array_1<>[<v>start<>..].to_vec();
let <v>to<>: Vec\<_> = <v>array_1<>[..<v><v>end<>_plus_1<>].to_vec();
let <v>step_over<>: Vec\<_> = <v>array_1<>.iter().<v>step<>_by(<v>step<>).cloned().collect();

let <v>from_to<>: Vec\<_> = <v>array_1<>[<v>start<>..=<v>end<>].to_vec();
let <v>from_to<>: Vec\<_> = <v>array_1<>[<v>start<>..<v><v>end<>_plus_1<>].to_vec();
let <v>from_to_with_step<>: Vec\<_> = <v>array_1<>[<v>start<>..=<v>end<>].iter().<v>step<>_by(<v>step<>).cloned().collect();
let <v>from_to_with_step<>: Vec\<_> = <v>array_1<>[<v>start<>..<v><v>end<>_plus_1<>].iter().<v>step<>_by(<v>step<>).cloned().collect();
let <v>from_with_step<>: Vec\<_> = <v>array_1<>[<v>start<>..].iter().<v>step<>_by(<v>step<>).cloned().collect();<>



# Vec

<cb>Vec\<<v>T<>><>

Type:

<cb>std::vec::Vec<>


A Mutable Array of Items.

Lives in the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>
@
@ std::vec::vec, vec::vec, ::vec
@ vecs, vec-only, vecs-only
@ vectors, vector-only, vectors-only



## Vec - Create
@ new, define, instantiate


### Vec - Create

<cb>= Vec::new()<>

Full Usage:

<cb>let <v>vec_1<>: Vec\<<v>T<>> = Vec::new();<>

Type:

<cb>Vec\<<v>T<>><>

Returns:

<cb>std::vec::Vec<>


Creates a new instance of <c>vec<>.

The data lives on the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.new">new()<>
@
@ vec::new()



### Vec - Create With Capacity

<cb>= Vec::with_capacity(<v>size<>)<>

Full Usage:

<cb>let <v>vec_1<>: Vec\<<v>T<>> = Vec::with_capacity(<v>size<>);<>

Type:

<cb>Vec\<<v>T<>><>

Returns:

<cb>std::vec::Vec<>


Creates a new instance of <c>vec<> with a given size.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.with_capacity">with_capacity()<>
@
@ vec::with_capacity()



### Vec - Create Using Macro

<cb>= vec![]

= vec![<v>item_1<>, <v>item_2<>, <v>...<>]<>

Usage:

<cb>let <v>vec_1<>: Vec\<<v>i32<>> = vec![];

let <v>vec_1<> = vec![<v>item_1<>, <v>item_2<>, <v>...<>];<>

Returns:

<cb>std::vec::vec<>


Creates a vec using the <c>vec!<> macro.


Example:

<cb>let <v>vec_1<> = vec!["<v>a<>", "<v>b<>", "<v>c<>"];

for <v>item<> in <v>vec_1<>.iter() {
	print!("{} ", <v>item<>);
}
println!();

<#>// Prints: "a b c "<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.vec.html">vec!<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>
@
@ vec!, vec![], vec!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



## Vec - Properties


### Vec - Contains?

<cb>= <v>vec_1<>.contains(&<v>item<>);<>


Returns true if the item exists in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.contains">contains()<>
@
@ has, in, includes
@ item, element, value



### Vec - Get - With Index

<cb>= <v>vec_1<>[<v>index<>]<>

Returns:

<cb><v>T<><>


Returns the item at the given index.

Will panic if out of bounds.
Fastaster than <c>vec.get()<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Index.html">Index<>
@
@ element, value, item
@ vec[], []



### Vec - Get - With .get()

<cb>= <v>vec_1<>.get(<v>index<>)<>

Returns:

<cb>Option\<<v>T<>><>


Returns the item at the given index.

Returns None if out of bounds.
Slower than <c>vec[...]<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.get">get()<>
@
@ element, value, item
@ vec[], [], vec.get(), .get()



### Vec - Get Mutable

<cb>= <v>vec_1<>.get_mut(<v>index<>)<>

Returns

<cb>Option\<&mut <v>T<>><>


Returns the mutable item at the given index.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.get_mut">get_mut()<>
@
@ element, value, item
@ vec.get_mut(), .get_mut()



### Vec - Get First

<cb>= <v>vec_1<>.first()<>

Returns:

<cb>Option\<&<v>T<>><>


Returns the first item in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.first">first()<>
@
@ element, value, item, pop front
@ beginning
@ vec.first(), .first()



### Vec - Get First Mutable

<cb>= <v>vec_1<>.first_mut()<>

Returns:

<cb>Option\<&mut <v>T<>><>


Returns the first item in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.first_mut">first_mut()<>
@
@ element, value, item
@ beginning
@ vec.first_mut(), .first_mut()



### Vec - Get First Using Index

<cb>= <v>vec_1<>[0]

= <v>vec_1<>.get(0)<>


Returns the first item in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.get">get()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Index.html">Index<>
@
@ element, value, item
@ beginning
@ vec[], [], vec.get(), .get()
@ [0], .get(0)



### Vec - Get Last

<cb>= <v>vec_1<>.last()<>

Returns:

<cb>Option\<&<v>T<>><>


Returns the last item in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.last">last()<>
@
@ element, value, item
@ beginning
@ vec.last(), .last()



### Vec - Get Last Mutable

<cb>= <v>vec_1<>.last_mut()<>

Returns:

<cb>Option\<&mut <v>T<>><>


Returns the last item in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.last_mut">last_mut()<>
@
@ element, value, item
@ beginning
@ vec.last_mut(), .last_mut()



### Vec - Get Last Using Index

<cb>= <v>vec_1<>[<v>vec_1<>.len() - 1]

= <v>vec_1<>.get(<v>vec_1<>.len() - 1)<>


Returns the item at the given index.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.get">get()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Index.html">Index<>
@
@ element, value, item
@ end, final
@ vec[], [], vec.get(), .get()



### Vec - Get Slice

<cb>= <v>vec_1<>[<v>range<>]

= <v>vec_1<>[<v>min<>..<v>max_plus_one<>]

= <v>vec_1<>[<v>min<>..=<v>max<>]<>

Returns:

<cb>&<v>T<>[]<>


Returns a slice of the vec as an array.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Index.html">Index<>
@
@ subvec, sublist, to, into, convert, vec-to-, to-slice



### Vec - Is Empty

<cb>= <v>vec_1<>.is_empty()<>

Returns:

<cb>Bool<>


Returns true when there are no items in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.is_empty">is_empty()<>
@
@ vec.is_empty(), .is_empty()
@ no size, not.



### Vec - Iterator

<cb>= <v>vec_1<>.iter()<>

Returns:

<cb>Iter\<<v>type<>><>


Returns an iterator to the values in the vector.


Example:

<cb>let <v>vec_1<> = vec!["<v>a<>", "<v>b<>", "<v>c<>"];

for <v>item<> in <v>vec_1<>.iter() {
	print!("{} ", <v>item<>);
}
println!();

<#>// Prints: "a b c "<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter">iter()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/slice/index.html">slice<>::<l "https://doc.rust-lang.org/std/slice/struct.Iter.html">Iter<>
@
@ vec.iter(), .iter()



### Vec - Iterator (Mutable)

<cb>= <v>vec_1<>.iter_mut()<>

Usage:

<cb>for <v>item<> in <v>vec_1<>.iter_mut() {
	= *<v>item<>
	<v>...<>
}<>

Returns:

<cb>IterMut\<<v>Type<>><>


Returns a mutable iterator to the values in the vector.

The vector most be mutable (duh).


Example:

<cb>let mut <v>vec_1<> = vec![<v>1<>, <v>2<>, <v>3<>];

for <v>item<> in <v>vec_1<>.iter_mut() {
	*<v>item<> = *<v>item<> * 2;
}

println!("{:?}", &<v>vec_1<>);

<#>// Prints: [2, 4, 6]<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter_mut">iter_mut()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/slice/index.html">slice<>::<l "https://doc.rust-lang.org/std/slice/struct.IterMut.html">IterMut<>
@
@ vec.iter_mut(), .iter_mut()



### Vec - Length

<cb>= <v>vec_1<>.len()<>

Returns:

<cb>usize<>


Returns the number of items in the vec.


Example:

<cb>let <v>vec_1<> = vec!["<v>a<>", "<v>b<>", "<v>c<>"];

println!("Size {}.", <v>vec_1<>.len());

<#>// Prints: "Size 3."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.len">len()<>
@
@ count, length, size
@ vec.len(), .len()



## Vec - Operations


### Vec - Append

<cb><v>vec_1<>.push(<v>item<>)<>


Appends an item to the end of the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.push">push()<>
@
@ vec.push(), .push(), push
@ add, put, extend to, value, to end
@ item, element, value



### Vec - Append 2nd Vec - Copy Items

<cb><v>vec_1<>.extend(<v>vec_2<>.iter().copied())<>


Copies the elements of a second vec to the end of the first.

The second vec still contains it's elements.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.extend">extend()<>
@
@ vec.extend, .extend()
@ add, put, extend to, second, to end, merge, combine



### Vec - Append 2nd Vec - Move Items

<cb><v>vec_1<>.append(&mut <v>vec_2<>)<>


Moves the elements of a second vec to the end of the first.

The second vec will be emptied of all elements.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.append">append()<>
@
@ vec.append, .append()
@ add, put, extend to, second, to end, merge, combine



### Vec - Clear

<cb><v>vec_1<>.clear()<>


Clears all elements from the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clear">clear()<>
@
@ remove all, delete all
@ vec.clear(), .clear()



### Vec - Clone

<cb>= <v>vec_1<>.clone()<>


Creates a shallow copy of the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clone">clone()<>
@
@ copy, duplicate
@ vec.clone(), .clone()



### Vec - Find Position

<cb>= <v>vec_1<>.iter().position(<v>match_function<>)<>


Finds the index position of the item that matches the match function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter">iter()<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find">find()<>
@
@ index, location
@ vec.clone(), .clone(), .position()



### Vec - Find Value

<cb>= <v>vec_1<>.iter().find(<v>match_function<>)<>


Finds the value of the item that matches the match function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.iter">iter()<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find">find()<>
@
@ item, element, value
@ vec.clone(), .clone(), .find()



### Vec - Insert

<cb><v>vec_1<>.insert(<v>index<>, <v>item<>)<>


Inserts an item at the given index.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.insert">insert()<>
@
@ vec.insert(), .insert(), insert
@ add, put, extend to, value, to end
@ item, element, value



### Vec - Insert First

<cb><v>vec_1<>.insert(0, <v>item<>)<>


Inserts an item at the beginning of the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.insert">insert()<>
@
@ vec.insert(), .insert(), insert
@ add, put, extend to, value, to end
@ item, element, value



### Vec - Merge

<cb>let mut <v>merged<> = <v>vec_1<>.clone();
<v>merged<>.extend(<v>vec_2<>.iter().copied());<>


Creates a new vec containing all elements from both vecs.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.clone">clone()<> | .<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.extend">extend()<>
@
@ vecs, join, concatenate, combine, union, 2, two
@ vec.extend(), .extend()



### Vec - Remove

<cb>= <v>vec_1<>.remove(<v>index<>)<>


Removes and returns the item at the given index.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.remove">remove()<>
@
@ vec.remove(), .remove(), remove
@ delete
@ item, element, value



### Vec - Remove First

<cb>= <v>vec_1<>.remove(0)<>


Removes and returns the first item in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.remove">remove()<>
@
@ vec.remove(), .remove(), remove
@ first, 1st, beginning
@ delete
@ item, element, value



### Vec - Remove Last

<cb>= <v>vec_1<>.pop()<>


Removes and returns the last item from the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.pop">pop()<>
@
@ vec.remove(), .remove(), remove
@ vec.pop(), .pop()
@ end, final, ending
@ delete
@ item, element, value



### Vec - Reverse

<cb><v>vec_1<>.reverse();<>


Reverses the items in the vec.

Reverses in place.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l https://doc.rust-lang.org/std/vec/struct.Vec.html#method.reverse>reverse()<>
@
@ vec.reverse(), .reverse(), reverse
@ items, elements, values



### Vec - Sort

<cb><v>vec_1<>.sort();<>


Sorts the items in the vec.

Sorts in place.
The sort order is stable (equivalent value items keep their relative positions).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort">sort()<>
@
@ vec.sort(), .sort(), sort
@ items, elements, values



### Vec - Sort By

<cb><v>vec_1<>.sort_by(<v>compare_function<>);<>


Sorts the items in the vec using the given compare function.

Sorts in place.
The sort order is stable (equivalent value items keep their relative positions).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/vec/index.html">vec<>::<l "https://doc.rust-lang.org/std/vec/struct.Vec.html">Vec<>.<l "https://doc.rust-lang.org/std/vec/struct.Vec.html#method.sort_by">sort_by()<>
@
@ items, elements, values, using compare function, comparator
@ vec.sort_by(), .sort_by(), sort_by



### Vec - Update

<cb><v>vec_1<>[<v>index<>] = <v>new_value<>;<>


Updates the vec value at the index position.
@
@ change, modify, set, item, value



## Vec - Slicing

<cb>let <v>first<> = <v>vec_1<>[0];
let <v>nth<> = <v>vec_1<>[<v>n<>];
let <v>second_last<> = <v>vec_1<>[<v>vec_1<>.len() - 2];
let <v>last<> = <v>vec_1<>[<v>vec_1<>.len() - 1];

let <v>all<> = <v>vec_1<>.clone();
let <v>all_but_first<>: Vec\<_> = <v>vec_1<>[1..].to_vec();
let <v>all_but_last<>: Vec\<_> = <v>vec_1<>[..<v>vec_1<>.len() - 1].to_vec();

let <v>reversed<>: Vec\<_> = <v>vec_1<>.iter().rev().cloned().collect();

let <v>from<>: Vec\<_> = <v>vec_1<>[n..].to_vec();
let <v>to<>: Vec\<_> = <v>vec_1<>[..=<v>end<>].to_vec();
let <v>to<>: Vec\<_> = <v>vec_1<>[..<v>end_plus_1<>].to_vec();
let <v>step_over<>: Vec\<_> = <v>vec_1<>.iter().step_by(<v>step<>).cloned().collect();

let <v>from_to<>: Vec\<_> = <v>vec_1<>[<v>start<>..=<v>end<>].to_vec();
let <v>from_to<>: Vec\<_> = <v>vec_1<>[<v>start<>..<v>end_plus_1<>].to_vec();
let <v>from_to_with_step<>: Vec\<_> = <v>vec_1<>[<v>start<>..=<v>end<>].iter().step_by(<v>step<>).cloned().collect();
let <v>from_to_with_step<>: Vec\<_> = <v>vec_1<>[<v>start<>..<v>end_plus_1<>].iter().step_by(<v>step<>).cloned().collect();
let <v>from_with_step<>: Vec\<_> = <v>vec_1<>[<v>start<>..].iter().step_by(<v>step<>).cloned().collect();<>
@
@ slice-only, slicing-only



## Vec - Convertions
@
@ from, convert, conversion, converting
@ from vec, vec-to, vec-into, into


### Vec - To HashSet

<cb>= HashSet::from(<v>vec_1<>);<>

Usage:

<cb>use std::collections::HashSet;

let <v>hashset_2<> = HashSet::from(<v>vec_1<>);<>


Returns:

<cb>HashSet\<<v>Type<>><>
@
@ to-hashset



## Vec - Extras


### Vec - Memory

<cb><t><|><|>┌───────────────────┐    ┌───┬───┬───┬───┐
Vec\<<v>T<>><|>=<|>│ pointer:  usize ──│──▶ │ 1 │ 2 │ 3 │ 4 │
<|><|>│ capacity: usize   │    └───┴───┴───┴───┘
<|><|>│ length:   usize   │
<|><|>└───────────────────┘<><>
@
@ memory size, memory-only, mem-only



# Associated Functions and Methods

These are functions and methods associated with a particular data type.

Functions apply to the type (similar to class static methods).
Methods apply to an instance of a type.
@
@ associated-, assoc-, ass-, impl, implement
@ struct-only, structs-only


## Associated Functions
@
@ associated-functions, ass-fn


### Associated Function - Define

<cb>impl <v>Type<> {
	fn <v>function1<>() -> <v>return_type<> {
		<v>...<>
	}
}<>


Defines a function associated with the given type.


Example:

<cb>struct <v>Point<> {
	<v>x<>: f32,
	<v>y<>: f32
}

impl <v>Point<> {
	fn distance_from_0_0(<v>point<>: &<v>Point<>) -> f32 {
		(<v>point<>.<v>x<>.powi(2) + <v>point<>.<v>y<>.powi(2)).powf(0.5)
	}
}

let <v>point_1<> = <v>Point<> { x: 10.0, y: 20.0};

let <v>distance<> = <v>Point<>::distance_from_0_0(&<v>point_1<>);

println!("Point Distance: {}", <v>distance<>);

<#>// Prints: "Point Distance: 22.36068"<><>
@
@ impl-only



### Associated Function - Define - Return Self

<cb>impl <v>Type<> {
	fn <v>function1<>() -> Self {
		<v>...<>
	}
}<>


The <c>Self<> type defines the return type as an instance of the type itself.


Example:

<cb>struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

impl <v>Point<> {
	fn new(<v>x<>: i32, <v>y<>: i32) -> Self {
		<v>Point<> {<v>x<>, <v>y<>}
	}
}

let <v>point_1<> = <v>Point<>::new(10, 20);

println!("Point 1: {}, {}", <v>point_1<>.<v>x<>, <v>point_1<>.<v>y<>);

<#>// Prints: "Point 1: 10, 20"<><>
@
@ impl-only



### Associative Function - Call

<cb>= <v>Type<>::<v>function1<>()<>


Calls the function associated with the type.
@
@ ::


## Associated Methods

Associative methods are associative functions that apply to an instance of a type.
@
@ associated-method, ass-meth, self, &self


### Associated Method - Define

<cb>impl <v>Type<> {
	fn <v>function1<>(self) {
		<v>...<>
	}
}<>

All Variants:

<cb>impl <v>Type<> {
	fn <v>function1<>(self) { <v>...<> }
	fn <v>function2<>(&self) { <v>...<> }
	fn <v>function3<>(&mut self) { <v>...<> }
	fn <v>function3<>(Box\<self>) { <v>...<> }
}<>


Define an associated method by including the parameter self / &self / &mut self.
@
@ box
@ impl-only



### Associative Method - Call

<cb>= <v>item1<>.<v>function1<>()<>


Calls the method associated with the item.
@
@ .



# Attributes

Anything in Form:

<cb>#[<v>...<>]<>

<cb>#![<v>...<>]<>


An attribute is metadata relating to some module or item. It is used by the compiler.


Apply To Module, Item:

<cb>#[<v>...<>]<>

Apply To Entire Crate:

<cb>#![<v>...<>]<>


Rust Docs: <l https://doc.rust-lang.org/reference/attributes.html<>Attributes<>
@
@ #[, ], #[]
@ #![, ], #![]
@ attribute-only, attributes-only



### Attribute - Apply To Module Or Item

<cb>#[<v>...<>]<>


Example:

<cb>#[deprecated]
fn <v>deprecated_function<>() {
	<v>...<>
}<>



### Attribute - Apply To Entire Crate

<cb>#![<v>...<>]<>


Example:

<cb>#![allow(dead_code)]<>



### Attribute Types

4 Types:

<*>Built-in
Macro
Derive Macro Helper
Tool<>



# Attribute - Reference


### Attribute - Config / Conditional Compile

<cb>#[cfg(<v>expression<>)]<>

Usage:

<cb>#[cfg(<v>expression<>)]
<v>statement<>;<>

Includes the statement when the expression is true.

Otherwise the statement is excluded.


Rust Docs: <l "https://doc.rust-lang.org/reference/conditional-compilation.html">Conditional Compilation<>
@
@ property
@ #[cfg], #[cfg()], cfg()



#### Attribute - Config / cfg - Equals

<cb>#[cfg(<v>property<> = <v>value<>)]<>

Usage:

<cb>#[cfg(<v>property<> = <v>value<>)]
<v>statement<>;<>

Includes the statement when the property equals the value.

Otherwise the statement is excluded.


Rust Doc: <l "https://doc.rust-lang.org/reference/conditional-compilation.html">Conditional compilation<>
@
@ has value, =



#### Attribute - Config / cfg - Equals Any

<cb>#[cfg(any(<v>property_1<> = <v>value<>, <v>property_2<> = <v>value<>, <v>...<>)]<>

Usage:

<cb>#[cfg(any(<v>property_1<> = <v>value<>, <v>property_2<> = <v>value<>, <v>...<>)]
<v>statement<>;<>

Includes the statement when any of the properties equals their value.

Otherwise the statement is excluded.


Rust Doc: <l "https://doc.rust-lang.org/reference/conditional-compilation.html">Conditional compilation<>
@
@ any(), has, properties, value



#### Attribute - Config / cfg - Equals All

<cb>#[cfg(all(<v>property_1<> = <v>value<>, <v>property_2<> = <v>value<>, <v>...<>)]<>

Usage:

<cb>#[cfg(all(<v>property_1<> = <v>value<>, <v>property_2<> = <v>value<>, <v>...<>)]
<v>statement<>;<>

Includes the statement when all properties equal their values.

Otherwise the statement is excluded.


Rust Doc: <l "https://doc.rust-lang.org/reference/conditional-compilation.html">Conditional compilation<>
@
@ all(), has, properties, values



#### Attribute - Config / cfg - Not Equal To

<cb>#[cfg(not(<v>property_1<> = <v>value<>)]<>

Usage:

<cb>#[cfg(not(<v>property_1<> = <v>value<>)]
<v>statement<>;<>

<cb>#[cfg(not(<v>expression<>)]
<v>statement<>;<>

Includes the statement when the property does not equal the value.

Otherwise the statement is excluded.


Rust Doc: <l "https://doc.rust-lang.org/reference/conditional-compilation.html">Conditional compilation<>
@
@ all(), properties, value, does not, isn't 



### Attribute - Config Properties
@ property
@ #[cfg], #[cfg()], cfg()


#### Config Property - Target Architecture (CPU)

<cb>#[cfg(<v>target_arch<> = "<v>x86_64<>")]<>

Values:

<cb>"aarch64"
"arm"
"mips"
"powerpc"
"powerpc64"
"wasm32"
"x86"
"x86_64"<>


Targets:

<card><table><col>Apple Silicon<><col>aarch64<>
<col>Intel<><col>x86<>
<col>Intel<><col>x86_64<>
<col>Raspberry Pi<><col>arm<>
<col>Web Assembly<><col>wasm32<><><>


Rust Docs: <l "https://doc.rust-lang.org/core/index.html">core<>::<l "https://doc.rust-lang.org/core/arch/index.html">arch<> # <l "https://doc.rust-lang.org/core/arch/index.html#other-architectures">Architectures<>
@
@ #[cfg(target_arch=)], target_arch
@ cpu x86, x86_64, mips, powerpc, powerpc64, arm, aarch64, wasm32
@ apple silicon, rasberry pi, intel, wasm, web assembly
@ condiitonal compile, include, exclude



#### Config Property - Target Family

<cb>#[cfg(<v>target_family<> = "<v>unix<>")]<>

Values:

<cb>"unix"
"windows"
"wasm"
<>


Rust Doc: <l "https://doc.rust-lang.org/reference/conditional-compilation.html">Conditional compilation<>
@
@ #[cfg(target_family=)], target_family
@ unix. windows, wasm
@ condiitonal compile, include, exclude



#### Config Property - Target Feature

<cb>#[cfg(<v>target_feature<> = "<v>sse<>")]<>

Values:

<cb>"avx"
"avx2"
"crt-static"
"rdrand"
"sse"
"sse2"
"sse4.1"<>
@
@ #[cfg(target_feature=)], target_feature
@ avx, avx2, crt-static, crt static, rdrand, sse, sse2, sse4.1
@ condiitonal compile, include, exclude



#### Config Property - Target OS

<cb>#[cfg(<v>target_os<> = "<v>x86_64<>")]<>

Values:

<cb>"android"
"dragonfly"
"freebsd"
"ios"
"linux"
"macos"
"netbsd"
"openbsd"
"windows"<>
@
@ #[cfg(target_os=)], target_os
@ android, dragonfly, freebsd, ios, linux, macos, netbsd, openbsd, windows
@ conditional compile, include, exclude



#### Config Property - NotTarget OS

<cb>#[cfg(not(<v>target_os<> = "<v>x86_64<>"))]<>

Values:

<cb>"android"
"dragonfly"
"freebsd"
"ios"
"linux"
"macos"
"netbsd"
"openbsd"
"windows"<>
@
@ #[cfg(not(target_os=))], target_os
@ android, dragonfly, freebsd, ios, linux, macos, netbsd, openbsd, windows
@ conditional compile, include, exclude



#### Config Property - Target Development Only

<cb>#[cfg(debug_assertions)]
<v>...<><>

This will be included in development builds only.

This will be removed in the release version (cargo build --release).
@
@ #[cfg(debug_assertions)], debug_assertions, cfg
@ test, debug, assertions
@ conditional compile, include, exclude



#### Config Property - Target Release Only

<cb>#[cfg(not(debug_assertions))]
<v>...<><>

This will be included in release builds only (cargo build --release).
@
@ production
@ #[cfg(not(debug_assertions))], debug_assertions, cfg



### Attribute - Deprecated

<cb>#[deprecated]<>

Marks a component as deprecated.
@
@ #[deprecated]



### Attribute - Derive

Tells the compiler to generate default implementations for various features.


Rust Docs: <l "https://doc.rust-lang.org/rust-by-example/trait/derive.html">Derive<>
@
@ derive-only


#### Attribute - Derive Summary

<table><col><l "?q=%23[derive(Clone)]"<>Clone<>		<><col><c>#[derive(Clone)]<><>
<col><l "?q=%23[derive(Copy)]"<>Copy<><><col><c>#[derive(Copy)]<><>
<col> <>
<col><l "?q=%23[derive(Debug)]"<>Debug<><><col><c>#[derive(Debug)]<><>
<col><l "?q=%23[derive(Default)]"<>Default<><><col><c>#[derive(Default)]<><>
<col> <>
<col><l "?q=%23[derive(Hash)]"<>Hash<><><col><c>#[derive(Hash)]<><>
<col> <>
<col><l "?q=%23[derive(Eq)]"<>Eq<><><col><c>#[derive(Eq)]<><>
<col><l "?q=%23[derive(Ord)]"<>Ord<><><col><c>#[derive(Ord)]<><>
<col><l "?q=%23[derive(PartialEq)]"<>PartialEq<><><col><c>#[derive(PartialEq)]<><>
<col><l "?q=%23[derive(PartialOrd)]"<>PartialOrd<><><col><c>#[derive(PartialOrd)]<><><>
@
@ basics



#### Attribute - Derive Clone

<cb>#[derive(Clone)]<>


Auto implements the Clone trait.


Example:

<cb>#[derive(Clone)]
struct <v>Point<> {
	<v>x<>: i32,
	<v>y<>: i32
}

fn main() {

	let <v>point<> = <v>Point<> {<v>x<>: 3, <v>y<>: 4};
	let <v>point_2<> = <v>point<>.clone();

	println!("Point: {},{}", &<v>point_2<>.<v>x<>, &<v>point_2<>.<v>y<>);
}

<#>// Prints: Point: 3,4<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/clone/index.html>clone<>::<l https://doc.rust-lang.org/std/clone/derive.Clone.html>Clone<> (derive macro) | <l https://doc.rust-lang.org/std/clone/trait.Clone.html>Clone<> (trait)
@
@ #[derive(clone)], (clone), clone
@ #[derive(copy)], (copy), copy
@ std::clone::Clone



#### Attribute - Derive Copy

<cb>#[derive(Copy)]<>




Tells the compiler give a type 'copy semantics' instead of 'move semantics'.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/copy/index.html>copy<>::<l https://doc.rust-lang.org/std/copy/derive.Copy.html>Copy<> (derive macro) | <l https://doc.rust-lang.org/std/copy/trait.Copy.html>Copy<> (trait)
@
@ #[derive(copy)], (copy), copy
@ std::copy::Copy



#### Attribute - Derive Debug

<cb>#[derive(Debug)]<>


Auto implements the Debug trait.

Provides an implementation for <c>"{:?}"<> as used by <c>println!()<>, <c>format!()<>, etc..


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l "https://doc.rust-lang.org/std/fmt/derive.Debug.html">Debug<> (derive macro) | <l "https://doc.rust-lang.org/std/fmt/trait.Debug.html">Debug<> (trait)
@
@ #[derive(Debug)], (debug), debug
@ :?, {:?}



#### Attribute - Derive Default

<cb>#[derive(Default)]<>


Auto implements the Default trait.

This will create a default instance with reasonable initial values.


Example:

<cb>#[derive(Default)]
struct <v>Item<> {
    <v>name<>: String,
    <v>values<>: Vec\<String>,
}

fn main() {
    let mut <v>item<> = <v>Item<>::default();

    println!("Name: {}", <v>item<>.<v>name<>);
    println!("Values: {:?}", <v>item<>.<v>values<>);
}

<#>// Prints:
//
//    Name:
//    Values: []<><>
@
@ #[derive(default)], default, (default)



#### Attribute - Derive Hash

<cb>#[derive(Hash)]<>


Auto implements the Hash trait.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/hash/index.html">hash<>::<l https://doc.rust-lang.org/std/hash/derive.Hash.html>Hash<> (derive macro) | <l https://doc.rust-lang.org/std/hash/trait.Hash.html>Hash<> (trait)
@
@ #[derive(hash)], (hash), hash
@ std::hash::Hash



#### Attribute - Derive Eq

<cb>#[derive(Eq)]<>


Implements the Eq trait.

Implements == and != for a type.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/derive.Eq.html">Eq<> (derive macro) | <l "https://doc.rust-lang.org/std/cmp/trait.Eq.html">Eq<> (trait)
@
@ equals, ==, !=, not equal, compare, comparison
@ #[derive(Eq)], (eq), eq



#### Attribute - Derive Ord

<cb>#[derive(Ord)]<>


Implements the Ord trait.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/derive.Ord.html">Ord<> (derive macro) | <l "https://doc.rust-lang.org/std/cmp/trait.Ord.html">Ord<> (trait)
@
@ compare, comparison
@ #[derive(Ord)], (ord), ord



#### Attribute - Derive PartialEq

<cb>#[derive(PartialEq)]<>


Implements the PartialEq trait.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/derive.PartialEq.html">PartialEq<> (derive macro) | <l "https://doc.rust-lang.org/std/cmp/trait.PartialEq.html">PartialEq<> (trait)
@
@ partial eq, equals, compare, comparison
@ #[derive(PartialEq)], (partialeq), partialeq



#### Attribute - Derive PartialOrd

<cb>#[derive(PartialOrd)]<>

Implements the PartialOrd trait


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/derive.PartialOrd.html">PartialOrd<> (derive macro) | <l "https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html">PartialOrd<> (trait)
@
@ partial ord, compare, comparison
@ #[derive(PartialOrd)], (partialord), partialord
@ :?, {:?}



### Attribute - Linter - Allow

<cb>#[allow(<v>...<>)]<>


Allows something the linter would normaly report as an error or warning.

The allow is applied to a specific item (e.g. a function or constant).
@
@ ignore
@ #[allow()]



### Attribute - Linter - Allow for Module, Crate

<cb>#![allow(<v>...<>)]<>


Allows something the linter would normaly report as an error or warning.

The allow attribute applies to the entire module or crate.
@
@ ignore
@ #![allow()]



#### Attribute - Linter - Allow Dead Code

Specific Item

<cb>#[allow(dead_code)]<>

For Entire Module:

<cb>#![allow(dead_code)]<>


Allows code that is not used by your program.
@
@ #![allow(dead_code)]
@ ignore, dead_code



### Attribute - Linter - Allow Unreachable Code

<cb>#[allow(unreachable_code)]<>


Allows code to be unreachable.

Silences the linter's warnings.
@
@ #[allow(unreachable_code)], unreachable_code, warn
@ allow, ignore, dead



#### Attribute - Linter - Module - Allow Unused Code

Specific Item:

<cb>#[allow(unused)]<>

For Entire Module:

<cb>#![allow(unused)]<>


Disables warnings for unused code inside a module.
@
@ #[allow(unused)]
@ ignore, unused



#### Attribute - Linter - Module - Allow Unused Imports

Specific Import:

<cb>#[allow(unused_imports)]<>

For Entire Module:

<cb>#![allow(unused_imports)]<>


Allows unused imports.

For <c>#[allow(unused_imports)]<>, place right before import statement.
@
@ #[allow(unused_imports)], unused_imports, allow
@ ignore, use



#### Attribute - Linter - Module - Allow Unused Variables

Specific Variable

<cb>#[allow(unused_variables)]<>

For Entire Module:

<cb>#![allow(unused_variables)]<>


Allows unused variables.
@
@ #[allow(unused_variables)], unused_variables, allow
@ ignore



### Attribute - Linter - Imports - Unused Imports - Silence Warning

<cb>#[warn(unused_imports)]<>

<m>Example<>
@
@ #[warn(unused_imports)], unused_imports, warn
@ allow, ignore



### Attribute - Unused Variables - Silence Warning

<cb>#[warn(unused_variables)]<>

<m>Example<>
@
@ #[warn(unused_variables)]
@ allow, ignore, unused_variables



# Error Handling

There are 2 types of errors in Rust:

<*>Recoverable
Unrecoverable<>
@
@ Exceptions, except-only, exception-only, exceptions-only
@ Errors, error-only, error-handling-only, errors-only


## Error - Basics

Recoverable Error:

<cb>fn <v>do_something<>() -> Result\<<v>Type<>, <v>Error<>> {

	<#>// Return good result:<>
	return Ok(<v>data<>);

	<#>// Return error:<>
	return Err(<v>error<>);
}<>

Propagate Recoverable Error:

<cb>fn <v>call_do_something<>() -> Result\<<v>Type<>, <v>Error<>> {

	return <v>do_something<>()?;
}<>

Handle Recoverable Error:

<cb>match <v>result<> {
	Ok(<v>data<>) => {	<v>...<> }
	Err(<v>error<>) => { <v>...<> }
}<>


Unrecoverable Error:

<cb>panic!("<v>Error Message<>");<>
@
@ summary



## Recoverable Error
@
@ result\<>, ok(), err()


### Recoverable Error - Define

<cb>fn <v>do_something<>() -> Result\<<v>T<>, <v>Error<>> {

	<#>// Return good result:<>
	return Ok(<v>data<>);

	<#>// Return error:<>
	return Err(<v>error<>);
}<>

Use <c>Result\<<v>T<>, <v>E<>> to return errors.

Call <c>Ok() 
@
@ define, new, instantiate



### Recoverable Error - Propagate Error

<cb><v>function_1<>()?<>

Usage:

<cb>fn <v>call_do_something<>() -> Result\<<v>T<>, <v>Error<>> {

	<v>do_something<>()?;
	<v>...<>
	OK(<v>data<>)
}<>


Use the question mark operator to propagate the error to the caller.
@
@ question mark, ? operator



### Recoverable Error - Handle Error

<cb>match <v>result<> {
	Ok(<v>data<>) => {	<v>...<> }
	Err(<v>error<>) => { <v>...<> }
}<>
@
@ match err()



### Recoverable Error - Return from Main

<cb>fn main() -> Result\<(), Box\<dyn Error + 'static>> {
	<v>...<>
}<>

Usage:

<cb>use std::error::Error;

fn main() -> Result\<(), Box\<dyn Error + 'static>> {
    <v>some_function<>()?;
    Ok(())
}<>

Returns an error from main.

The error text will be printed to the console.
@
@ std::error::Error, main()



## Unrecoverable Error


### Unrecoverable Error - Panic!

<cb>panic!("<v>Error Message<>");<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.panic.html">panic!<>
@
@ define, new, instantiate, create
@ panic!()



### Unrecoverable Error - Show Stack Trace

Set Environment Variable:

<cb>RUST_BACKTRACE=1<>

Set <c>RUST_BACKTRACE<> to 1 to enable stack traces during panics (dev environment only).
@
@ rust_backtrace


## Standard IO Errors

Type: <c>Enum std::io::ErrorKind<>

<cb>AddrInUse
AddrNotAvailable
AlreadyExists
ArgumentListTooLong
BrokenPipe
ConnectionAborted
ConnectionRefused
ConnectionReset
CrossesDevices
Deadlock
DirectoryNotEmpty
ExecutableFileBusy
FilesystemLoop
FilesystemQuotaExceeded
FileTooLarge
HostUnreachable
Interrupted
InvalidData
InvalidFilename
InvalidInput
IsADirectory
NetworkDown
NetworkUnreachable
NotADirectory
NotConnected
NotFound
NotSeekable
OutOfMemory
PermissionDenied
ReadOnlyFilesystem
ResourceBusy
StaleNetworkFileHandle
StorageFull
TimedOut
TooManyLinks
UnexpectedEof
Unsupported
WouldBlock
WriteZero
Other<>

Docs: <l https://doc.rust-lang.org/nightly/std/io/enum.ErrorKind.html>ErrorKind<>
@
@ summary



# Functions
@
@ fn, fns, fn-only, fns-only
@ funcs, func-only, funcs-only
@ fuctions, function-only, functions-only



## Function - Basics

Define - No Parameters:

<cb>fn <v>name<>() {
   <v>...<> 
}<>

Define - With Parameters:

<cb>fn <v>name<>(param_1: <v>type<>, param_2: <v>type<>) {
   <v>...<> 
}<>

Return Value (Explicit):

<cb>fn <v>name<>() {
   return <v>return_value<>; 
}<>

Return Value (Implicit):

<cb>fn <v>name<>() {
   <v>return_expression<>
}<>

Return Multiple Values:

<cb>fn <v>name<>() {
   return (<v>value_1<>, <v>value_2<>); <#>// Return as tuple.<>
}<>
@
@ summary



## Function - Define

<cb>fn <v>name<>() {
	<v>...<>
}<>

<cb>fn <v>name<>(<v>param_1<>: <v>type<>, <v>param_2<>: <v>type<>) -> <v>return_type<> {
	return <v>return_value<>;
}<>


Defines a function.


Example:

<cb>fn square(<v>value<>: f64) -> f64 {
	return <v>value<>
}<>
@
@ definition



## Function - Arguments
@
@ parameters, args, args-only, arguments-only, params, param-only, params-only


### Function - Argument - Pass Borrowed

<cb>fn <v>function_1<>(<v>borrowed<>: &<v>Type<>) <v>...<><>

Call:

<cb><v>function_1<>(&<v>borrowed<>);<>


Passes the value as an immutable borrowed value.

Passes by reference (pointer).
Use <c>&<> in the argument type and also on the function call parameter.


Example:

<cb>fn <v>double<>(<v>value<>: &i32) -> i32 {
	<v>value<> * 2
}

let <v>value<> = 10;

println!("{} doubled = {}", <v>value<>, <v>double<>(&<v>value<>));<>
@
@ pass by reference
@ &



### Function - Argument - Pass Borrowed, Mutable

<cb>fn <v>function_1<>(<v>borrowed<>: &mut <v>Type<>) <v>...<><>

Call:

<cb><v>function_1<>(&mut <v>borrowed<>);<>


Passes the value as mutable borrowed.
@
@ pass by reference
@ &, mut, &mut



### Function - Argument - Pass Owned

<cb>fn <v>function_1<>(<v>owned<>: <v>Type<>) <v>...<><>

Call:

<cb><v>function_1<>(<v>owned<>);<>


Passes the value as owned.



### Function - Argument - Pass Owned, Mutable

<cb>fn <v>function_1<>(mut <v>owned<>: <v>Type<>) <v>...<><>

Call:

<cb><v>function_1<>(<v>owned<>);<>


Passes the value as mutable owned.

Can convert an immutable value into a mutable one.
@
@ mut



### Function - Argument - Pass By Value

<cb>fn <v>function1<>(<v>by_value<>: <v>type<>) <v>...<><>


Passes an argument to the function by value.

Applies to <b>primitive types<> only.


Example:

<cb>fn <v>double<>(<v>value<>: i32) -> i32 {
	<v>value<> * 2
}

let <v>value<> = 10;

println!("{} doubled = {}", <v>value<>, <v>double<>(<v>value<>));<>
@
@ by value, primitive



## Function - Return


### Function - Return Value (Explicit)

<cb>return <v>return_value<>;<>

<cb>fn <v>name<>() -> <v>return_type<> {
   return <v>return_value<>;
}<>


Use the keyword <c>return<> to explicitly return a value.


Example:

<cb>fn <v>square<>(<v>x<>: i32) -> i32 {
	return <v>x<> * <v>x<>;
}

fn main() {

	let <v>value<> = <v>4<>;
	let <v>square<> = square(<v>value<>);

	println!("{} squared is {}.", <v>value<>, <v>square<>);
}<>



### Function - Return Value (Implicit)

<cb>fn <v>name<>() -> <v>return_type<> {
   <v>return_expression<>
}<>


If the last expression has no semicolon (;), it is the return value.


Example:

<cb>fn <v>square<>(<v>x<>: i32) -> i32 {
	<v>x<> * <v>x<>
}

fn main() {

	let <v>value<> = <v>4<>;
	let <v>square<> = square(<v>value<>);

	println!("{} squared is {}.", <v>value<>, <v>square<>);
}<>



### Function - Return Multiple Values

<cb>return (<v>value_1<>, <v>value_2<>, <v>value_3<>);<>

Full Form:

<cb>fn <v>name<>() -> (<v>return_type<>, <v>return_type<>, <v>return_type<>) {
   return (<v>value_1<>, <v>value_2<>, <v>...<>);
}<>

Call:

<cb>let (<v>return_1<>, <v>return_2<>, <v>...<>) = <v>name<>(<v>value<>);<>


Return multiple values in a tuple.


Example:

<cb>fn <v>double_and_triple<>(<v>x<>: i32) -> (i32, i32) {
	let <v>double<> = <v>x<> * 2;
	let <v>triple<> = <v>x<> * 3;
	return (<v>double<>, <v>triple<>);
}

fn main() {

	let <v>value<> = <v>4<>;
	let (<v>double<>, <v>triple<>) = double_and_triple(<v>value<>);

	println!("{} doubled and tripled is {}, {}.", <v>value<>, <v>double<>, <v>triple<>);
}<>



### Function - Return Nothing

<cb>fn <v>name<>() {
	<v>...<>
	<#>// Nothing returned.<>
}<>


Returns unit by default.


Example:

<cb>use std::any::type_name;

fn type_of\<T>(_: T) -> &'static str {
	type_name::\<T>()
}

<#>/// Returns nothing:<>
fn <v>print_square<>(<v>x<>: i32) {
	let <v>squared<> = <v>x<> * <v>x<>;
	println!("{} squared is {}.", <v>x<>, <v>squared<>);
}

fn main() {
	let <v>return_value<> = <v>print_square<>(<v>2<>);
	println!("returned value type is {}.", type_of(<v>return_value<>));
}

<#>// Prints:
//
//    2 squared is 4.
//    returned value type is ().<><>
@
@ unit, (), exit no value



### Function - Return With No Value

<cb>return;<>

Usage

<cb>fn <v>function_1<>() {
	<v>...<>
	if <v>condition<> {
		return;
	}
	<v>...<>
}<>


Returns from a function without returning a value.
@
@ unit, (), exit no value



# Function Type
@
@ define, reference, fn


### Function Type - Basics

A Function:

<cb>fn <v>square<>(<v>value<>: i32) -> i32 {
	<v>value<> * <v>value<>
}<>

Create Reference:

<cb>let <v>square_2<>: fn(i32) -> i32 = <v>square<>;<>

Call:

<cb>let <v>squared_value<> = <v>square_2<>(4);<>
@
@ reference, summary


### Function Type - Define

<cb>fn(<v>type<>) -> <v>return_type<><>

<cb>let <v>reference<>: fn(<v>type<>) -> <v>return_type<> = <v>function_1<>;<>


Example:

<cb>fn <v>square_a_value<>(<v>value<>: i32) -> i32 {
	<v>value<> * <v>value<>
}

let <v>square<>: fn(i32) -> i32 = <v>square_a_value<>;

let <v>squared_value<> = <v>square<>(4);

println!("4 squared is {}.", <v>squared_value<>);

<#>// Prints: "4 squared is 16."<><>



### Function Type - Define Function Parameter

<cb>fn <v>do_something<>(<v>function_1<>: fn(<v>type<>) -> <v>return_type<>) { <v>...<><>


Defines a function to be passed into another function.
@
@ pass, passing



# Closure

A closure is a function that 'closes over' the environment it was defined in.

It has access to all the variables that are in scope in that environment.
@
@ functions, closures, anonymous, lambdas
@ closure-only, closures-only


## Closure - Create
@
@ new, define


### Closure - Create With No Arguments

<cb>= || <v>...<><>

<cb>let <v>closure_1<> = || <v>...<>;<>


Closure with 0 arguments.


Example:

<cb>let <v>closure_1<> = || println!("Closure 1 called.");

closure_1();<>
@
@ ||, zero, 0
@ parameters



### Closure - Create With Arguments

<cb>= |<v>param_1<>: <v>type<>| <v>...<><>

<cb>let <v>closure_1<> = |<v>param_1<>: <v>type<>| <v>...<>;<>


Closure with one or more arguments.


Example:

<cb>let <v>closure_1<> = |<v>param_1<>: &str| println!("param_1 = {}", <v>param_1<>);

closure_1("Value 1");

<#>// Prints: param_1 = Value 1<><>
@
@ parameters



### Closure - Create - Enclosed Variable - Borrow

<cb>move || { <v>...<> <v>external_variable<> <v>...<> }<>


Accesses local variables outside the closed function.


Example:

<cb>let <v>value<> = 42;

let <v>closure_1<> = || println!("value = {}", <v>value<>);

<v>closure_1<>();

<#>// Prints "value = 42"<><>
@
@ local scope, referencing, reference, move



### Closure - Create - Enclosed Variable - Own

<cb>move || { <v>...<> }<>


Takes ownership local variables outside the closed function.


Example:

<cb>let <v>value<> = 42;

let <v>closure_1<> = move || println!("value = {} (owned)", <v>value<>);

<v>closure_1<>();

<#>// Prints "value = 42 (owned)"<><>
@
@ local scope, referencing, reference, ownership, move



## Closure - Call


### Closure - Call - Version 1

<cb><v>closure_1<>(<v>params<>)<>


### Closure - Call - Version 1

<cb>(<v>closure_1<>)(<v>params<>)<>



# Generics
@
@ generics-only, gen-only



### Generic Function
@
@ fn


#### Generic Function - Define

<cb>fn <v>function_1<> \<<v>T<>> (<v>param_1<>: <v>T<>) {
	<v>...<>
}<>

<cb>fn <v>function_1<> \<<v>T1<>, <v>T2<>, <v>T3<>> (<v>param_1<>: <v>T1<>, <v>param_2<>: <v>T2<>, <v>param_3<>: <v>T3<>) {
	<v>...<>
}<>


Allows a function to accept a data type that will be defined later by the calling program.



#### Generic Function - Bounded Type

<cb>fn <v>function_1<> \<<v>T<>: <v>Trait1<>> (<v>param_1<>: <v>T<>) {
	<v>...<>
}<>

<cb>fn <v>function_1<> \<<v>T<>: <v>Trait1<> + <v>Trait2<>> (<v>param_1<>: <v>T<>) {
	<v>...<>
}<>

<cb>fn <v>function_1<> \<<v>T<>: <v>Trait1<>, <v>U<>: <v>Trait2<>> (<v>param_1<>: <v>T<>) {
	<v>...<>
}<>


Defines a generic type that must implement a trait.
@
@ constraints, constrain



#### Generic Function - Bounded, Where

<cb>fn <v>function_1<> \<<v>T<>> (<v>param_1<>: <v>T<>)
	where <v>T<>: <v>Trait1<> {
	<v>...<>
}<>

<cb>fn <v>function_1<> \<<v>T<>> (<v>param_1<>: <v>T<>)
	where <v>T<>: <v>Trait1<> + <v>Trait2<> {
	<v>...<>
}<>

<cb>fn <v>function_1<> \<<v>T<>, <v>U<>> (<v>param_1<>: <v>T<>)
	where
		<v>T<>: <v>Trait1<>,
		<v>U<>: <v>Trait2<>
{
	<v>...<>
}<>


Defines a generic type that must implement a trait.
@
@ constraints, constrain



### Generic Struct

Generics allows a structure to contain a data type that will be defined later by the calling program.

The data type is defined at the time the structure is created.



#### Generic Struct - Basics

<cb>struct <v>Struct1<>\<<v>T<>> {
	<v>field_1<>: <v>T<>
}<>

<cb>impl \<<v>T<>> <v>Struct1<>\<<v>T<>> {

	fn <v>function1<>() -> <v>T<> { <v>...<> }

	fn <v>function2<>(<v>param1<>: <v>T<>) { <v>...<> }

	<v>...<>
}<>

<cb>let <v>item_1<>: <v>Struct1<>\<<v>Type<>> = <v>Struct1<> { <v>value<> };

let <v>value_1<>: <v>Type<> = <v>item_1<>.field_1;<>
@
@ summary



#### Generic Structure Implementation - Define

<cb>impl \<<v>T<>> <v>Struct1<>\<<v>T<>> {
}<>

<cb>impl \<<v>T<>> <v>Struct1<>\<<v>T<>> {

	fn <v>function1<>() -> <v>T<> { <v>...<> }

	fn <v>function2<>(<v>param1<>: <v>T<>) { <v>...<> }

	<v>...<>
}<>
@
@ create, new



#### Generic Structure Implementation - Use

<cb>let <v>item_1<>: <v>Struct1<>\<<v>ActualType<>> = <v>Struct1<> { <v>value<> };<>

<cb>= <v>item_1<>.<v>function1<>()
<v>item_1<>.<v>function2<>(<v>value<>);<>
@
@ create, new, instantiate



### Generic Trait


#### Generic Trait - Define

<cb>trait <v>Trait1<>\<<v>T<>> {
	<v>...<>
}<>


#### Generic Trait - Define, Bounded

<cb>trait <v>Trait1<>\<<v>T<>: <v>Trait2<>> {
	<v>...<>
}<>

<cb>trait <v>Trait1<>\<<v>T<>: <v>Trait2<>, <v>U<>: <v>Trait3<>> {
	<v>...<>
}<>


Defines a trait that bounds a generic type to a second trait.

The generic <c>T<> must implement trait <c>Trait2<>.
@
@ bind, join, requires


#### Generic Trait - Define, Bounded, Multiple Traits

<cb>trait <v>Trait1<>\<<v>T<>: <v>Trait2<> + <v>Trait3<> + <v>Trait4<>> {
	<v>...<>
}<>


Defines a trait that bounds a generic type to several other traits.
@
@ +, bind, join, requires



#### Generic Trait - Implement

<cb>impl \<<v>T<>> <v>Trait1<>\<<v>T<>> for <v>SomeType<> {
	<v>...<>
}<>
@
@ for, impl
@ impl-only



#### Generic Trait - Implement, Bounded

<cb>impl \<<v>T<>: <v>Trait2<>> <v>Trait1<>\<<v>T<>> for <v>SomeType<> {
	<v>...<>
}<>

<cb>impl \<<v>T<>: <v>Trait2<> + <v>Trait3<> + <v>Trait4<>> <v>SomeTrait<>\<<v>T<>> for <v>SomeType<> {
	<v>...<>
}<>

<cb>impl \<<v>T<>: <v>Trait2<>, <v>U<>: <v>Trait3<>> <v>SomeTrait<>\<<v>T<>, <v>U<>> for <v>SomeType<> {
	<v>...<>
}<>
@
@ for, impl
@ impl-only



#### Generic Trait - Implement Where

<cb>impl \<<v>T<>> <v>Trait1<>\<<v>T<>> for <v>SomeType<>
	Where <v>T<>: <v>Trait2<> {
	<v>...<>
}<>

<cb>impl \<<v>T<>> <v>Trait1<>\<<v>T<>> for <v>SomeType<>
	Where <v>T<>: <v>Trait2<> {
	<v>...<>
}<>

<cb>impl \<<v>T<>, <v>U<>, <v>...<>> <v>Trait1<>\<<v>T<>> for <v>SomeType<>
	Where
		<v>T<>: <v>Trait2<>,
		<v>U<>: <v>Trait3<>,
		<v>...<>
{
	<v>...<>
}<>
@
@ for, impl, bounded 
@ impl-only



### Generics Syntax


#### Generic Function - Equivalent Syntax

Pass:

<cb>fn a_function\<<v>T<>: <v>Trait1<>>(<v>param_1<>: <v>T<>) {
	\<v>...\<>
}<>

<cb>fn a_function\<<v>T<>>(<v>param_1<>: <v>T<>)
	where <v>T<>: <v>Trait1<> {
	\<v>...\<>
}<>

<cb>fn a_function(<v>param_1<> impl <v>Trait1<>) {
	\<v>...\<>
}<>


Pass as Reference:

<cb>fn a_function\<<v>T<>: <v>Trait1<>>(<v>param_1<>: &<v>T<>) {
	\<v>...\<>
}<>

<cb>fn a_function\<<v>T<>>(<v>param_1<>: &<v>T<>)
	where <v>T<>: <v>Trait1<> {
	\<v>...\<>
}<>

<cb>fn a_function(<v>param_1<> &impl <v>Trait1<>) {
	\<v>...\<>
}<>
@
@ where, pass, parameter value



#### Generic Trait - Equivalent Syntax

<cb>impl \<<v>T<>: <v>Trait1<>> <v>OtherTrait<> for <v>Struct2<> {
	\<v>...\<>
}<>

<cb>impl \<<v>T<>> <v>OtherTrait<> for <v>Struct2<> {
	where <v>T<>: <v>Trait1<> {
	\<v>...\<>
}<>
@
@ where, impl
@ impl-only



# Lifetimes

Tells rust the lifetime of borrowed variables so it can check they are valid within a given scope.

Lifetimes must be explicit in places where the lifetime can not be inferred by the compiler.

Rust Docs: <l https://doc.rust-lang.org/rust-by-example/scope/lifetime.html>Lifetimes<>
@
@ lifetime-only, lifetimes-only, 'a, 'b, define


## Lifetime Syntax

<cb>&'<v>a<> <v>T<>
&'<v>a<> mut <v>T<>
<v>T<>\<'<v>a<>><>

<cb>'<v>a<>
'_
'static<>


Lifetimes annotations must come before type annotations.
@
@ explicit, 'a, 'b, 'c, &'a, &'b, &'c, mut



## Lifetime Types


### Anonymous (Place Holder) Lifetime

<cb>'_<>

Usage:

<cb>fn <v>function_1<>(<v>param<> &'_) ...<>


Tells the compiler to infer the lifetime.

The lifetime must comply with elision rules.
@
@ '_, inferred



### Static Lifetimes

<cb>'static<>

Usage:

<cb><>


Defines the lifetime of the item to the life of the program.

Static items are only removed when the program ends.
<c>const<> and <c>static<> variables are implicitly 'static.


Rust Docs: <l "https://doc.rust-lang.org/rust-by-example/scope/lifetime/static_lifetime.html">Static Lifetime<>
@
@ 'static



## Function Lifetimes
@
@ annotation


### Lifetime - Function

<cb>fn <v>function_1<>\<'<v>a<>> (<v>param_1<>: &'<v>a<> <v>Type<>) -> &'<v>a<> <v>Type<> {
	<v>...<>
}<>


Tells Rust what the lifetimes need to be for values entering and leaving the function.

A lifetime associated with an argument tells the compiler that the associated data must have the same scope and lifetime.


<c>'<v>a<> - Defines a lifetime.



### Lifetime - Function Multiple Lifetimes

<cb>fn <v>function_1<>\<'<v>a<>, '<v>b<>> (<v>param_1<>: &'<v>a<> <v>Type1<>, <v>param_2<>: &'<v>b<> <v>Type2<>) -> &'<v>c<> <v>Type<> {
	<v>...<>
}<>


Tells Rust what the lifetimes need to be for values entering and leaving the function.

<c>'<v>a<> - Defines a lifetime.
<c>'<v>b<> - Defines a lifetime.



### Lifetime - Function Parameter

<cb>fn <v>function_1<>\<'<v>a<>> (<v>param_1<>: &'<v>a<> <v>Type<>) <v>...<><>



### Lifetime - Funciton Parameter With Type Annotation

<cb>fn <v>function_1<>\<'<v>a<>, <v>T<>> (<v>param_1<>: &'<v>a<> <v>T<>, <v>param_2<><v>...<>) <v>...<><>


Defines a lifetime annotation along with a type annotation.

Lifetime annotations MUST always come before type annotations.



### Lifetime - Function Return Type

<cb>fn <v>function_1<>\<'<v>a<>> () -> &'<v>a<> <v>Type<> {<>
@
@ value



## Struct Lifetimes


### Lifetime - Struct

<cb>struct <v>Struct1<>\<'<v>a<>> {
	<v>field_1<>: &'<v>a<> <v>T<>
	<v>field_2<>: &'<v>a<> <v>T<>
}<>



### Lifetime - Impl

<cb>impl \<'<v>a<>> <v>Struct1<>\<'<v>a<>> {
	<v>...<>
}<>
@
@ implement
@ impl-only



### Lifetime - Impl Trait

<cb>impl \<'<v>a<>> <v>Trait1<> for <v>Struct1<>\<'<v>a<>> {
	<v>...<>
}<>
@
@ implement
@ impl-only



## Generic Struct Lifetimes

### Lifetime - Generic Struct

<cb>struct <v>Struct1<>\<'<v>a<>, <v>T<>> {
	<v>field_1<>: &'<v>a<> <v>T<>
	<v>field_2<>: &'<v>a<> <v>T<>
}<>



### Lifetime - Generic Impl

<cb>impl \<'<v>a<>, <v>T<>> <v>Struct1<>\<'<v>a<>, <v>T<>> {
	<v>...<>
}<>
@
@ implement
@ impl-only



### Lifetime - Generic Impl Trait

<cb>impl \<'<v>a<>, <v>T<>> <v>Trait1<> for <v>Struct1<>\<'<v>a<>, <v>T<>> {
	<v>...<>
}<>
@
@ implement
@ impl-only



## Trait Lifetimes


### Lifetime - Trait

<cb>trait <v>Trait1<>\<'<v>a<>> {
	fn <v>function_1<>(&'<v>a<> self);
}<>



## Variable Lifetimes


### Lifetime - Variable

<cb><v>value_1<>: '<v>a<> <v>T<><>

<cb>let <v>value_1<>: '<v>a<> <v>T<> = <v>...<>;<>


### Lifetime - Mutable Variable

<cb><v>value_1<>: '<v>a<> mut <v>T<><>

<cb>let <v>value_1<>: '<v>a<> mut <v>T<> = <v>...<>;<>



## Lifetime - Elision Rules

3 Rules:

<*>Each argument is assigned an individual lifetime.
If exactly 1 argument, the return type gets the same lifetime.
If <c>&self<> is an argument, the return type gets the <c>self<> lifetime<>.


Rule 1:

<cb>fn function_1(<v>param_1<>: &<v>T<>, <v>param_2<>: &<v>T<>) -> &<v>T<>                   <#>// Elided<>
fn function_1<m>\<'a, 'b><>(<v>param_1<>: &<m>'a<> <v>T<>, <v>param_2<>: &<m>'b<> <v>T<>) -> &<m>'a<> <v>T<>  <#>// Compiler Expanded<><>

Rule 2:

<cb>fn function_1(<v>param_1<>: &<v>T<>) -> &<v>T<>                               <#>// Elided<>
fn function_1<m>\<'a><>(<v>param_1<>: &<m>'a<> <v>T<>) -> &<m>'a<> <v>T<>                     <#>// Compiler Expanded<><>

Rule 3:

<cb>fn function_1(&<v>self<>, <v>param_2<>: &<v>T<>) -> &<v>T<>                        <#>// Elided<>
fn function_1<m>\<'a, 'b><>(&<m>'a<> <v>self<>, <v>param_2<>: &<m>'b<> <v>T<>) -> &<m>'a<> <v>T<>       <#>// Compiler Expanded<><>


Rust Docs: <l "https://doc.rust-lang.org/reference/lifetime-elision.html">Lifetime elision<>



# Macros

Macros are a compile time build tool that run inside your code.

<*>Run at Compile Time
Modify Source Code<>

Identified with <c>!<>
@
@ custom
@ macro-only, macros-only, macro!, !


## Macro - Basics

Define:

<cb>macro_rules! <v>macro_1<> {
	() => {
		<v>...<>
	}
	($<v>param_1<>:expr, $<v>param_2<>:literal) {
		<v>...<>
		$<v>param_1<>
		<v>...<>
	}
}<>

Share:

<cb>pub(crate) <v>macro_1<>;<>

Use:

<cb><v>macro_1!<>(<v>...<>)<>


Rust Docs: <l "https://doc.rust-lang.org/rust-by-example/macros.html">macro_rules!<>
@
@ macro_rules!, summary



## Macro - Create
@
@ macro_rules!

<cb>macro_rules! <v>macro_1<> {
	() => {
		<v>...<>
	}
	($<v>param_1<>:expr, $<v>param_2<>:literal) {
		<v>...<>
		$<v>param_1<>
		<v>...<>
	}
}<>


Rust Docs: <l "https://doc.rust-lang.org/rust-by-example/macros.html">macro_rules!<>
@
@ macro_rules!, define



## Macro - Use

<cb><v>marcro_1<>!()<>

<cb><v>marcro_1<>!(<v>param_1<>, <v>param_2<>, <v>...<>)<>
@
@ call



## Macro - Public

<cb>pub(crate) use <v>macro_1<>;<>


Shares a macro inside a library or app.

Must be shared using a <c>use<> statement.
Use <c>(crate)<> when sharing macros.

@
@ share
@ use, pub(crate)



## Macro Parameter Types


### Macro Parameter - :expr

<cb>$<v>expression_1<>:expr<>

Any valid Rust expression.
@
@ expr, expression



### Macro Parameter - :ident

<cb>$<v>identifier_1<>:ident<>

Any valid Rust identifier (variable or function name).
@
@ ident, identifier



### Macro Parameter - :litreal

<cb>$<v>literal_1<>:litreal<>

A standard literal.
@
@ ident, identifier



### Macro Parameter - :lifetime

<cb>$<v>lifetime_1<>:lifetime<>

A lifetime.
@
@ lifetime, 



### Macro Parameter - :meta

<cb>$<v>attribute_1<>:meta<>

Usage:

<cb>macro_rules! <v>...<> {
	($<v>attribute_1<>:meta) {

		\#[$<v>attribute_1<>]
		<v>...<>
	}
}<>

An attribute.
@
@ meta, attribute, derive, #[derive()]



### Macro Parameter - :pat

<cb>$<v>pattern_1<>:pat<>

A pattern used in a match or let statement.
@
@ pat, pattern



### Macro Parameter - :ty

<cb>$<v>type_1<>:ty<>

A Rust type.

Examples: String, &str, u64, usize
@
@ ty, type



# Standard Macros
<meta>
index: tags
index-to: word
<>

<l "?q=assert!-only">assert!()<>
<l "?q=assert_eq!-only">assert_eq!()<>
<l "?q=assert_ne!-only">assert_ne!()<>
<l "?q=debug_assert!-only">debug_assert!()<>
<l "?q=debug_assert_eq!-only">debug_assert_eq!()<>
<l "?q=debug_assert_ne!-only">debug_assert_ne!()<>

<l "?q=eprint!-only">eprint!()<>
<l "?q=eprintln!-only">eprintln!()<>
<l "?q=format!-only">format!()<>
<l "?q=print!-only">print!()<>
<l "?q=println!-only">println!()<>
<l "?q=write-only"<>write!()<>
<l "?q=writeln-only"<>writeln!()<>

<l "?q=panic!-only">panic!()<>
<l "?q=todo!-only">todo!()<>
<l "?q=unimplemented!-only">unimplemented!()<>

<l "?q=vec!-only">vec!()<>
@
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only, !
@ summary



# Panic Macro

<cb>panic!("<v>Error Message<>");<>


Reports an error, then terminates the application.

Use for unrecoverable errors.
Caution - should be used very sparingly, if at all.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.panic.html">panic!<>
@
@ define, new, instantiate, create
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ panic!(), panic!-only



# Todo Macro

<cb>todo!();<>


Use in functions where you haven't coded the result.

Prevents compiler errors while coding.
Will panic at runtime.


<cb>fn <v>incomplete_function<>() {
	todo!();
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.todo.html">todo<>
@
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ todo!(), todo-only, todo!-only



# Unimplemented Macro

<cb>unimplemented!("<v>comment<>");<>


Use in functions where you haven't coded the result.

Prevents compiler errors while coding.
Will panic at runtime.


<cb>fn <v>incomplete_function<>() {
	unimplemented!();
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.unimplemented.html">unimplemented<>
@
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ unimplemented!(), unimplemented-only, unimplemented!-only



# Modules

A module is a container for functions and types.

A module also defines a namespace for those functions and types.


Types:

<in>Inline Module
File Module (<m>term?<>)<>

Rust Docs: <l https://doc.rust-lang.org/reference/items/modules.html<>Modules<>
@
@ mod-only, mods-only, module-only, modules-only



## Module - Basics


## Module - Declare


### Module - Declare Private

<cb>mod <v>module_name<><>


Declares a module for use inside another module.


Declared Module - Must Be:

<*>A file of same name in the declaring module's directory<>
<*>A directory of the same name in the declaring module's directory containing the file <c>mod.rs<><>

Either:

<cb>./
├── <v>declaring_module<>.rs
└── <v>module_name<>.rs<>

Or:

<cb>./
├── <v>declaring_module<>.rs
└── <v>module_name<>/
    └── mod.rs<>
@
@ create



### Module - Declare Public

<cb>pub mod <v>module_name<><>


Declares a module for use inside another module.


Declared Module - Must Be:

<*>A file of same name in the declaring module's directory<>
<*>A directory of the same name in the declaring module's directory containing the file <c>mod.rs<><>

Either:

<cb>./
├── <v>declaring_module<>.rs
└── <v>module_name<>.rs<>

Or:

<cb>./
├── <v>declaring_module<>.rs
└── <v>module_name<>/
    └── mod.rs<>
@
@ create



## Module - Define
@
@ declare, create


### Module - Define Inline Module

<cb>mod <v>name<> {
	<v>...<>
}<>


Defines a module inside a rust file.



### Module - Define Root Module File

<cb>src/
├── main.rs
└── <v>module_name<>.rs<>


Defines a root module file.

The root module file must be in the src directory.
The root module must be declared in the main.rs file.


Steps:

1. Create a file. Give it the name of the module:

	<c><v>module_name<>.rs<>

2. Declare the module in a parent module:

	In: main.rs

		<c>mod <v>module_name<>;<>

3. Place module code in the file <c>mod.rs<>:

	<c><v>module_name<>.rs<>

5. Reference the module: 

	<c>use crate::<v>module_name<>::<v>...<>;<>


Example:

Define:

<cb>src/
├── main.rs
│
│      pub mod <v>module_name<>;
│
└── <v>module_name<>.rs

        pub fn <v>do_something<>() {<v>...<>}<>

Use:

<cb>src/
├── main.rs
│
│      use <v>module_name<>::<v>do_something<>;
│
│      <v>do_something()<>;
│
└── <v>some_module<>.rs

        use crate::<v>module_name<>::<v>do_something<>;

        <v>do_something<>();<>



### Module - Define Root Module Directory

Root Module:

<cb>src/
├── main.rs
└── <v>module_name<>/
    └── mod.rs<>


Defines a root module in a directory.

The root module directory must be in the src directory.
The root module must be declared in the main.rs file.


Steps:

1. Create a directory. Give it the name of the module:

	<c><v>module_name<>/<>

2. Create the module file <c>mod.rs<>:

	<c><v>module_name<>/mod.rs<>

3. Declare the module in a parent module:

	In: main.rs

		<c>mod <v>module_name<>;<>

4. Place module code in the file <c>mod.rs<>:

	<c><v>module_name<>/mod.rs<>

5. Reference the module: 

	<c>use crate::<v>module_name<> <v>...<>;<>


Example:

Define:

<cb>src/
├── main.rs
│
│      mod <v>module_name<>;
│
└── <v>module_name<>/
    │
    └── mod.rs

            pub fn <v>do_something<>() {<v>...<>}<>

Use:

<cb>src/
├── main.rs
│
│      use <v>module_name<>::<v>do_something<>;
│
│      <v>do_something()<>;
│
└── <v>some_module<>.rs

        use crate::<v>module_name<>::<v>do_something<>;

        <v>do_something()<>;<>
@
@ mod.rs



### Module - Define Nested Module File

<cb>.
├── <v>parent_module<>.rs
└── <v>module_name<>.rs<>


Defines a module file.

The nested directory must be in the same directory as the parent module.
The module must be declared in the parent module.


Steps:

1. Create a file. Give it the name of the module:

	<c><v>module_name<>.rs<>

2. Declare the module in a parent module:

	In: <v>parent_module<>.rs

		<c>mod <v>module_name<>;<>

3. Place module code in the file <c>mod.rs<>:

	<c><v>module_name<>.rs<>

5. Reference the module:
	<c>use crate::<v>parent<>::<v>module_name<><>


Example:

Define:

<cb>src/

⫶

├── <v>parent_module<>.rs
│
│      pub mod <v>module_name<>;
│
└── <v>module_name<>.rs

        pub fn <v>do_something<>() {<v>...<>}<>

Use:

<cb>src/
├── main.rs
│
│      use <v>...<><v>parent_module<>::<v>module_name<>::<v>do_something<>;
│
│      <v>do_something()<>;
│
└── <v>some_module<>.rs

        use crate::<v>...<>::<v>parent_module<><v>module_name<>::<v>do_something<>;

        <v>do_something<>();<>



### Module - Define Nested Module Directory

<cb>.
├── <v>parent_module<>.rs
└── <v>module_name<>
    └── mod.rs<>


Defines a nested module file.

Must be in the same directory as the parent module.
Must be declared in the parent module.


Steps:

1. Create a directory. Give it the name of the module:

	<c><v>module_name<>/<>

2. Create the module file <c>mod.rs<>:

	<c><v>module_name<>/mod.rs<>

3. Declare the module in a parent module:

	In: <v>parent_module<>.rs

		<c>mod <v>module_name<>;<>

4. Place module code in the file <c>mod.rs<>:

	<c><v>module_name<>/mod.rs<>

5. Reference the module: 

	<c>use crate::<v>module_name<>::<v>...<>;<>


Example:

<cb>src/

⫶

├── <v>parent_module<>.rs
│
│      pub mod <v>module_name<>;
│
└── <v>module_name<>
    │
    └── mod.rs

        pub fn <v>do_something<>() {<v>...<>}<>

Use:

<cb>src/
├── main.rs
│
│      use <v>...<><v>parent_module<>::<v>module_name<>::<v>do_something<>;
│
│      <v>do_something()<>;
│
└── <v>some_module<>.rs

        use crate::<v>...<>::<v>parent_module<><v>module_name<>::<v>do_something<>;

        <v>do_something<>();<>
@
@ mod.rs



## Modules - Visibility

Types:

	public / private

Default:

	private

Applies to:

	mod
	function
	struct
	struct field
	impl function
	trait

Keyword:

	pub


Accepts <c>pub<>?:

<card><table><col>mod<><col>Yes<>
<col> <>
<col>struct<><col>Yes<>
<col>struct field<><col>Yes<>
<col> <>
<col>impl<><col>No<>
<col>impl fn<><col>Yes<>
<col> <>
<col> <>
<col>Trait<><col>Yes<>
<col>Trait fn<><col>No<><col>(public by default)<><><>
@
@ pub, access



## Module - Visibility - Details
@
@ access


### Module - Public Basics

<cb>pub struct <v>Public1<> {

	pub <v>public_field<>: <v>...<>,

	<v>private_field<>: <v>...<>,
}<>

<cb>impl <v>Public1<> {

	pub fn <v>public_function<>(&self) <v>...<>;

	fn <v>private_function<>(&self) <v>...<>;
}<>

<cb>pub trait <v>PublicTrait<> {

	fn <v>public_function<>(&self) <v>...<>; 
}<>
@
@ pub, pub-only, share



### Module - Pub - Available to All

<cb>pub <v>...<><>


Marks an item that can be reached outside the module.
@
@ pub, pub-only, share



### Module - Pub - Available to Project Only

<cb>pub(crate) <v>...<><>


Marks an item that can be reached outside the module.
@
@ pub(crate)
@ pub, pub-only, share



### Module - Pub - Available to Parent Only

<cb>pub(super) <v>...<><>


Marks an item that can be reached by the parent module only.
@
@ pub(super)
@ pub, pub-only, share



### Module - Public Macro

<cb>pub(crate) use <v>macro_1<>;<>

Makes a macro public.

Must have (crate) in the use statement. Macros are not sharable outside the library.
@
@ macro-only, pub(crate), (crate), use
@ pub, pub-only, share



### Module - Public Struct

<cb>pub struct <v>Public1<> {

	pub <v>public_field<>: <v>...<>,

	<v>private_field<>: <v>...<>,
}<>
@
@ struct-only
@ pub, pub-only, share



### Module - Public Trait

<cb>pub trait <v>PublicTrait<> {

	fn <v>public_function<>(&self) <v>...<>; 
}<>


Makes the trait public.

Trait functions are public by default.
@
@ pub, pub-only, share



### Module - Public Function

<cb>pub fn <v>public_function_1<>() {<v>...<>}<>

<cb>mod <v>name<> {
	pub fn <v>public_function_1<>() {
		<v>...<>
	}
}<>


Use the keyword <v>pub<> to make a function public.
@
@ fn, function-only, funct-only
@ pub, pub-only, share



### Module - Private Function

No keyword <c><->pub<><>:

<cb>fn <v>public_function_1<>() {<v>...<>}<>

<cb>mod <v>name<> {
	fn <v>private_function_1<>() {
		<v>...<>
	}
}<>
@
@ private-only



### Module - Public Module

<cb>pub mod <v>module_name<><>
@
@ pub mod



## Module - Interface
The set of public functions and types in a module



## Module - Nested

<cb>mod <v>parent_mod<> {
	pub mod <v>nested_mod<> {
		<v>...<>
		pub fn <v>public_nested_func<>() {<v>...<>}

		fn <v>private_nested_func<>() {<v>...<>}
	}

	<v>nested_mod<>::<v>public_nested_func<>();
}

<v>parent_mod<>::<v>nested_mod<>::<v>public_nested_func<>();
<>



## Module - Structure - Public / Private Fields

<cb>mod <v>mod_1<> {
	
	pub struct <v>Struct1<> {
		pub <v>publi_id<>: usize,
		<v>private_id<>: usize,
	}
}<>



# Use / Import
@
@ import, use, use-only
@ importing, using
@ module, library, crate, modules, mod-


### Use

<cb>use <v>module<>::<v>item<>;<>


Allows an item from another module to be used within the current module.



### Use - Use All

<cb>use <v>module<>::*;<>


Imports all public items from another module.

<c>*<> - Wild Card. Matches all public items.
@
@ everything
@ *, ::*



### Use - From Crate

<cb>use crate::<v>module<>::<v>item<>;<>


Imports an item defined within the current project / library.

References the absolute path to that item within the project.

<c>crate::<> - Signifies from the root of the project.
@
@ absolute path, root
@ crate::



### Use - From Parent

<cb>use super::<v>module<>::<v>item<>;<>

<cb>use super::*;<>


Imports an item relative to the parent module.

<c>super::<> - From the parent.
@
@ relative
@ super::, super::*



### Use - From Self

<cb>use self::<v>module<>::<v>item<>;<>


Imports an item relative to the current module.
@
@ relative
@ self::



### Use - With Export

<cb>pub use <v>module<>::<v>item<>;<>


Uses and then exports an item from the current module.

This allows other modules to use an item relative to this module instead of from the item's original module.
@
@ pub, public



### Use - With Export Locally

<cb>pub(crate) use <v>module<>::<v>item<>;<>


Allows an item to be used within the current project or library but does not export it to outside projects.
@
@ pub



### Use - With Alias

<cb>use <v>module<>::<v>item<> as <v>alias<>;<>
@
@ rename



# Traits

Traits defines shared methods and behavior across types.

Traits can only access methods defined in the trait itself.
Traits can NOT be instantiated directly (instantiate the implementing type instead).
@
@ trait-only, traits-only, general



## Trait - Basics

Define:

<cb>trait <v>Trait1<> {

	const <v>CONSTANT_1<>: usize = <v>42<>;

	fn <v>function_1<>();
	fn <v>function_2<>() -> Self;
	fn <v>function_with_default_implementation<>() {
		<#>// Implementation here.<>
	}

	fn <v>method<>(self);
	fn <v>method<>(&self);
	fn <v>method<>(&mut self);
	fn <v>method<>(Box\<self>);
	fn <v>method_with_default_implementation<>(&self) {
		<#>// Implementation here.<>
	}
}<>

Implement:

<cb>imp <v>Trait1<> for <v>Type<> {

	fn <v>function_1<>() {
		<#>// Implementation here.<>
	}

	fn <v>method_1<>(&self) {
		<#>// Implementation here.<>
	}

	fn <v>call_type_method<>(&<v>self<>) {
		<v>Type<>.method()
	}

	fn <v>call_trait_method<>(&<v>self<>) {
		<v>Trait1<>::method_1(<v>self<>)
	}

	fn <v>use_constant<>() {
		<s>...<> = Self::<v>CONSTANT_1<>;
	}
}<>

Call:


<cb><v>Type<>::<v>function_1<>();

let <v>instance_1<> = <v>Type<>::new();
<v>instance_1<>.<v>method_1<>();<>
@
@ summary



## Trait - Create


### Trait - Define

<cb>trait <v>TraitName<> {

	fn <v>function_1<>();
	fn <v>function_2<>() -> Self;
	fn <v>method<>(&self):
}<>
@
@ create, new



### Trait - Define Constant

<cb>trait <v>trait_1<> {
	const <v>CONSTANT_1<>: <v>Type<> = <v>value_1<>;
}<>


Defines a constant that can be used by all types that implement the trait.



### Trait - Define Function

<cb>trait <v>trait_1<> {
	fn <v>function_1<>();
	fn <v>function_2<>() -> Self;
}<>


Defines a trait function.

A trait function is independent of any trait instance.
@
@ create, new



### Trait - Define Function - Default Implementation

<cb>trait <v>trait_1<> {

	fn <v>function_1<> () {
		<#>// Implementation here.<>
	}
}<>


Defines a trait function with a default implementation.

Reduces repeated work.
Reduces the amount of work implementing structures have to.
Can be overridden with an implemenation in the struct trait impl itself.
@
@ create, new



### Trait - Define Method

<cb>trait <v>trait_1<> {
	fn <v>method_1<>(self);
	fn <v>method_2<>(&self);
	fn <v>method_3<>(&mut self);
	fn <v>method_4<>(Box\<self>);
}<>


Defines a trait method.


Borrow:

<cb>fn <v>method_1<>(&self);<>

Borrow Mutably:

<cb>fn <v>method_1<>(&mut self);<>

Boxed:

<cb>fn <v>method_1<>(Box\<self>);<>

Take Ownership<super><#>1<><>:

<cb>fn <v>method_1<>(self);<>

Trait methods are always associated with an instance of a trait.


1 - The object is destroyed after this call.
@
@ create, new, self, box



### Trait - Define Method - Default Implementation

<cb>trait <v>trait_1<> {

	fn <v>method_1<>(&self) {
		<#>// Implementation here.<>
	}
}<>


Defines a method with a default implementation.

Reduces repeated work.
Reduces the amount of work implementing structures have to.
Can be overridden with an implemenation in the struct trait impl itself.
@
@ create, new



### Trait - Define Supertrait

<cb>trait <v>Supertrait1<>: <v>Trait1<> + <v>Trait2<> {}<>


Combines one or more traits into a single trait.

Structs that inherit this trait must implement all the indivdiual traits.


Rust Docs: <l "https://doc.rust-lang.org/rust-by-example/trait/supertraits.html">Supertraits<>
@
@ make, create, define, join, include, combine, add to, +, multiple



### Trait - Define Property

You can not define a property on a trait.

You may however define a constant.



## Trait - Implement



### Trait - Struct Implement

<cb>impl <v>TraitName<> for <v>Type1<> {

	fn <v>traitFunction1<>(<v>...<>) {
		<v>...<>
	}
}<>


Implements a trait function for a given type.

Functions can be Type functions (call with ::) or instance methods (defined with &self parameter, called with '.').
@
@ impl for
@ impl-only



### Trait - Struct Implement - Default Method

<cb>trait <v>TraitName<> {

	fn <v>traitFunction1<>(<v>...<>) {
		<#>// Implement here.<>
		<v>...<>
	}
}<>


Implements a default method for a trait.

Any struct implementing the trait can use the default method without having to create their own.



### Trait - Struct Implementation - Reference Constant

<cb>= Self::<v>CONSTANT_1<><>


Returns the value of a trait defined constant.



## Trait - Calling
@
@ calls


### Trait - Call Struct Method

<cb>self.<v>method_1<>()<>

<cb><v>Struct1<>::<v>method_1<>(self)<>


Calls <c>method_1()<> on the struct.

These two calls are equivalent.
Can be called from any trait implementation for <c>Struct1<>.


Example:

<t><c><deepskyblue>







┌─▶
│
│
│
│
│
│
┌─▶
│
│
│
│
│
└─<><><|><cb>trait <v>Trait1<> {
	fn call_struct(&<v>self<>) -> &'static str;
}


struct <v>Item<>;

impl <v>Item<> {
	fn <b>call(&<v>self<>)<> -> &'static str {
		"Called item."
	}
}

impl <v>Trait1<> for <v>Item<> {
	fn call_struct(&<v>self<>) -> &'static str {
		<b><v>Item<>.call()<>		<#>// Call happens here.<>
	}
}


fn main() {
	let <v>item_1<> = <v>Item<>;
	println!("{}", <b><v>item_1<>.call_struct()<>);
}

<#>Prints: Called item.<><><>
@
@ self



### Trait - Call Trait Method

<cb><v>Trait1<>::<v>method_1<>(self)<>


Calls <c>method_1()<> on <c>Trait1<>.

Can be called from any trait implementation for Struct1, or from the Struct1 impl.


Example:

<t><c><deepskyblue>








┌──▶
│ │
│ │
│ │
│ │
│ └─▶
│
│
│
│
│
│
└────<><><|><cb>trait <v>Trait1<> {
	fn call(&<v>self<>) -> &'static str;
}


struct <v>Item<>;

impl <v>Item<> {
	fn call_trait(&<v>self<>) -> &'static str {
		<b><v>Trait1<>::call(<v>self<>)<>	<#>// Call happens here.<>
	}
}

impl <v>Trait1<> for <v>Item<> {
	<b>fn call(&<v>self<>)<> -> &'static str {
		"Called trait."
	}
}


fn main() {
	let <v>item_1<> = <v>Item<>;
	println!("{}", <b><v>item_1<>.call_trait()<>);
}

<#>Prints: Called trait.<><><>
@
@ self



### Trait - Call Trait Method

<cb>self.<v>trait_only_method<>()<>


Use <c>self.method()<> to call a trait method if and only if that method does not exist in the struct.
@
@ self



## Trait - Passing


### Trait - Function Parameter - Pass Dynamically

<cb>fn <v>function_1<>(<v>param_1<>: &dyn <v>TraitName<>) {
	<v>...<>
}<>

Passes an instance of the trait to the function.
@
@ pass, argument



### Trait - Function Parameter - Pass Statically

<cb>fn <v>function_1<>(<v>param_1<>: impl <v>TraitName<>) {
	<v>...<>
}<>

<cb>fn <v>function_1<>(<v>param_1<>: &impl <v>TraitName<>) {
	<v>...<>
}<>

<cb>fn <v>function_1<>\<T: <v>TraitName<>(<v>param_1<>: &<v>T<>) {
	<v>...<>
}<>

Passes an instance of the trait to the function.

The fuction will be reimplemented for all possible versions of the trait.
@
@ pass, argument



### Trait - Function Parameter - Multiple Traits

<cb>fn <v>function_1<>(<v>param_1<>: impl <v>Trait1<> + <v>Trait2<> + <v>Trait3<>) {
	<v>...<>
}<>

<cb>fn <v>function_1<>(<v>param_1<>: &impl <v>Trait1<> + <v>Trait2<> + <v>Trait3<>) {
	<v>...<>
}<>

Passes an instance that implements all traits to the function.
@
@ pass, argument



### Trait - Function Parameter

<cb>fn <v>function_1<>(<v>param_1<>: Box\<dyn <v>TraitName<>>) {
	<v>...<>
}<>

<cb>fn <v>function_1<>(<v>param_1<>: &Box\<dyn <v>TraitName<>>) {
	<v>...<>
}<>

Passes an instance of the trait where the actual type is not known at compile time.
@
@ pass, argument, dyn, &dyn, box



## Trait - In Struct


### Trait in Struct - Property - Static Owned

<cb>pub struct <v>ContainsItem<>\<<v>T<>: <v>ItemTrait<>> {
    item: <v>T<>,
}

impl \<<v>T<>: <v>ItemTrait<>> <v>ContainsItem<>\<<v>T<>> {

    pub fn new(<v>item<>: <v>T<>) -> Self {
        Self { <v>item<> }
    }
}<>


Stores a static reference to an item that implements the trait.
@
@ containing, internally, statically, property


### Trait in Struct - Property - Static Reference

<cb>pub struct <v>ContainsItem<>\<'a, <v>T<>: <v>ItemTrait<>> {
    item: &'a <v>T<>,
}

impl \<'a, <v>T<>: <v>ItemTrait<>> <v>ContainsItem<>\<'a, <v>T<>> {

    pub fn new(<v>item<>: &'a <v>T<>) -> Self {
        Self { <v>item<> }
    }
}<>


Stores a static reference to an item that implements the trait.
@
@ containing, internally, statically, property



# Unsafe

Rust Docs: <l "https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html">Chapter 19 - Unsafe<>



### Unsafe - Rules

Allows you to:

<*>Dereference a Raw Pointer
Read from / Write To a Mutable Variable
Read from / Write To an External Static Variable
Access a Union Field (but not assign to it)
Call an Unsafe Function
Call an External C Function (Unsafe by default?)
Implement an Unsafe Trait<>

Used by:

<*>Frameworks
Special Packages<>
@
@ basics



### Unsafe Syntax

<cb>unsafe {
	<v>...<>
}<>



# Formatting
@
@ formats, format-only, formats-only
@ formatting, formatting-only, formattings-only
@ as string, to string, to-string


### Format!

<cb>= format!()<>

<cb>= format!("Print this.");<>

<cb>= format!("{}", <v>a<>);<>

<cb>= format!("{} and {}.", <v>a<>, <v>b<>);<>

Returns:

<cb>String<>


Creates a custom string using variables.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.format.html">format<>
@
@ format macro
@ format!(), f!(), format!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Format - Pad on Left

<cb>"{:><v>length<>}"<>

Usage:

<cb>= format!("{:><v>length<>}", &<v>value<>)<>

<cb>println!("{:><v>length<>}", &<v>value<>)<>


Pads a string on the left side.


Examples:

<cb>println!("'{:>10}'", "12345");

<#>// Prints: '     12345'<><>
@
@ align right, right justify, string
@ pad-left, justify-right, right-justify, align-right, right-align
@ {:>}



### Format - Pad on Left With Fill Character

<cb>"{:<v>fill<>><v>length<>}"<>

Usage:

<cb>= format!("{:<v>fill<>><v>length<>}", &<v>value<>)<>

<cb>println!("{:<v>fill<>><v>length<>}", &<v>value<>)<>


Pads a string on the left side with a fill character.


Examples:

<cb>println!("'{:*>10}'", "12345");

<#>// Prints: '*****12345'<><>
@
@ align right, right justify, string
@ pad-left, justify-right, right-justify, align-right, right-align
@ {:>}



### Format - Pad on Right

<cb>"{:<v>length<>}"
"{:\<<v>length<>}"<>

Usage:

<cb>= format!("{:<v>length<>}", &<v>value<>)<>

<cb>println!("{:<v>length<>}", &<v>value<>)<>


Pads a string on the right side.


Examples:

<cb>println!("'{:10}'", "12345");

<#>// Prints: '12345     '<><>

<cb>println!("'{:\<10}'", "12345");

<#>// Prints: '12345     '<><>
@ align left, left justify, string
@ pad-right, justify-left, left-justify, left-right, left-align
@ {:\<}, {:}



### Format - Pad on Right With Fill Character

<cb>"{:<v>fill<>\<<v>length<>}"<>

Usage:

<cb>= format!("{:<v>fill<>\<<v>length<>}", &<v>value<>)<>

<cb>println!("{:<v>fill<>\<<v>length<>}", &<v>value<>)<>


Pads a string on the right side with a fill character.

Using a fill character requires the <c>\<<>.


Example:

<cb>println!("'{:*\<10}'", "12345");

<#>// Prints: '12345*****'<><>
@
@ align left, left justify, string
@ pad-right, justify-left, left-justify, left-right, left-align
@ {:\<}



### Format - Escape { }

<cb>"{{ ... }}"

Usage:

<cb>format!("{{ ... }}")<>

<cb>println!("{{ ... }}")<>


Escape <c>{<> and <c>}<> by doubling them up.
@
@ {{, }}



### Format Number - Decimal Places

<cb>"{:.<v>decimals<>}"<>

Usage:

<cb>= format!("{:.<v>decimals<>}", &<v>value<>)<>

<cb>println!("{:.<v>decimals<>}", &<v>value<>)<>


Prints the number with the given precision or number of digits after the decimal place.

Only works for floating types.
Integers will display no decimal places.


Example:

<cb>println!("'{:.3}'", 3.141592);

<#>// Prints: '3.142'<><>
@
@ align right, right justify, float, floats, floating values, f32, f64
@ pad-left, justify-right, right-justify, align-right, right-align
@ {:.}



### Format Number - Pad Leading Zeros

<cb>"{:0<v>length<>}"<>

Usage:

<cb>= format!("{:0<v>length<>}", &<v>value<>)<>

<cb>println!("{:0<v>length<>}", &<v>value<>)<>


Pads a number with leading zeros.

Total length will be at least the length given.


Examples:

<cb>println!("{:05}", 42);

<#>// Prints: 00042<><>
@
@ align right, right justify, integers, floats, floating values, f32, f64, 0s
@ pad-left, justify-right, right-justify, align-right, right-align
@ {:0}



### Format Number - Pad Leading Zeros, and Decimal Places

<cb>"{:0<v>length<>.<v>decimals<>}"<>

Usage:

<cb>= format!("{:0<v>length<>.<v>decimals<>}}", &<v>value<>)<>

<cb>println!("{:0<v>length<>.<v>decimals<>}}", &<v>value<>)<>


Pads a number with leading zeros and displays the given number of digits after the decimal place.


Example:

<cb>println!("{:08.3}", 3.141592);

<#>// Prints: 0003.142<><>
@
@ align right, right justify, integer, 0s, floats, floating values, f32, f64
@ pad-left, justify-right, right-justify, align-right, right-align
@ {:0}, {:.}, {:.}



### Format Number - Comma Separated

Can't do directly in Rust.
Use a 3rd party library like <l "https://crates.io/crates/num-format">num-format<>



### Format Number - To Binary

Format:

<cb>"{:b}"
"{:08b}"<>

Usage:

<cb>= format!("{:b}", &<v>value<>)<>

<cb>println!("{:b}", &<v>value<>)<>


Prints the binary form of a value.


Examples:

<cb>println!("{:b}", 11);		<#>// 1011<>
println!("{:08b}", 11);		<#>// 00001011<>
println!("{:016b}", 11);	<#>// 0000000000001011<><>

<cb>let <v>value<> = 11;
let <b>binary<> = format!("{:b}", value);

println!("{} decimal = {} binary.", &<v>value<>, &<v>binary<>);

<#>// Prints: 11 decimal = 1011 binary.<><>
@
@ integer, i8, i16, i32, i64, i128
@ u8, u16, u32, u64, fu128, usize 
@ convert, conversion
@ :b, :08b, {:b}, {:08b}


### Format Number - To Binary With Leading 0b

Format:

<cb>"{:#b}"
"{:#08b}"<>

Usage:

<cb>= format!("{:#b}", &<v>value<>)<>

<cb>println!("{:#b}", &<v>value<>)<>


Prints the binary form of a value with leading '0b'.


Examples:

<cb>println!("{:#b}", 11);		<#>// <b>0b<>1011<>
println!("{:#08b}", 11);	<#>// <b>0b<>00001011<><>

<cb>let <v>value<> = 11;
let <b>binary<> = format!("{:#b}", value);

println!("{} decimal = {} binary.", &<v>value<>, &<v>binary<>);

<#>// Prints: 11 decimal = 0b1011 binary.<><>
@
@ integer, i8, i16, i32, i64, i128
@ u8, u16, u32, u64, fu128, usize 
@ convert, conversion, :b, :#b, {:b}, {:#b}



### Format Number - To Hexadecimal (Lower Case)

Format:

<cb>"{:x}"
"{:02x}"
"{:04x}"<>

Usage:

<cb>= format!("{:x}", &<v>value<>)<>

<cb>println!("{:x}", &<v>value<>)<>


Prints the lower case hexadecimal form of a value.


Examples:

<cb>println!("{:x}", 42);		<#>// 2a<>
println!("{:02x}", 42);		<#>// 2a<>
println!("{:04x}", 42);		<#>// 002a<><>

<cb>let <v>value<> = 42;
let <b>hex<> = format!("{:04x}", value);

println!("{} decimal = {} hex.", &<v>value<>, &<v>hex<>);

<#>// Prints: 42 decimal = 002a hex.<><>
@
@ integer, i8, i16, i32, i64, i128
@ u8, u16, u32, u64, fu128, usize
@ {:x}, :x, {:02x}, :02x, {:04x}, :04x
@ convert, conversion, value



### Format Number - To Hexadecimal (Upper Case)

Format:

<cb>"{:X}"
"{:02X}"
"{:04X}"<>

Usage:

<cb>= format!("{:X}", &<v>value<>)<>

<cb>println!("{:X}", &<v>value<>)<>


Returns the upper case hexadecimal form of a value.


Examples:

<cb>println!("{:X}", 42);		<#>// 2A<>
println!("{:02X}", 42);		<#>// 2A<>
println!("{:04X}", 42);		<#>// 002A<><>

<cb>let <v>value<> = 42;
let <b>hex<> = format!("{:04X}", value);

println!("{} decimal = {} hex.", &<v>value<>, &<v>hex<>);

<#>// Prints: 42 decimal = 002A hex.<><>
@
@ integer, i8, i16, i32, i64, i128
@ u8, u16, u32, u64, fu128, usize 
@ {:x}, :x, {:02x}, :02x, {:04x}, :04x
@ convert, conversion, value



### Format Number - To Hexadecimal With Leading 0x

Format:

<cb>"{:#x}"
"{:#04x}"
"{:#06x}"<>

Usage:

<cb>= format!("{:#04x}", &<v>value<>)<>

<cb>println!("{:#04x}", &<v>value<>)<>


Returns the hexadecimal form of a value with a leading '0x'.

Note: The padding length refers to the total length of the returned string.

<in><c>format!("{:#04x}", 42)<> returns "0xa2".<>


Examples:

<cb>println!("{:#x}", 42);		<#>// <b>0x<>2a<>
println!("{:#02x}", 42);	<#>// 0x2a<>
println!("{:#04x}", 42);	<#>// 0x2a<>
println!("{:#06x}", 42);	<#>// 0x002a<><>

<cb>let <v>value<> = 42;
let <b>hex<> = format!("{:#06x}", value);

println!("{} decimal = {} hex.", &<v>value<>, &<v>hex<>);

<#>// Prints: 42 decimal = 0x002a hex.<><>
@
@ integer, i8, i16, i32, i64, i128
@ u8, u16, u32, u64, fu128, usize 
@ convert, conversion, hash, value value
@ {:x}, :x, {:02x}, :02x, {:04x}, :04x, {:06x}, :06x
@ {:#x}, :#x, {:#02x}, :#02x, {:#04x}, :04x, {:#06x}, :06x



# Files
@
@ files-only, file-only, fs::


## File - Properties


### File - Exists?

<cb>= <v>path_1<>.exists()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.exists()<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>
@
@ path.exists(), .exists(), path



### File - Get Metadata

<cb>= metadata("<v>path<>")<>

Usage:

<cb>use std::fs::metadata;

= metadata("<v>path<>")<>

Returns:

<cb>Result\<Metadata><>


Returns the metadata for a file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.metadata.html>metadata<>
@
@ std::fs::metadata(), metadata()



### File - Get File Length

<cb>= <v>metadata<>.len()<>

Usage:

<cb>use std::fs::metadata;

let <v>metadata<> = metadata("<v>path<>")?;

<v>...<> = <v>metadata<>.len();<>

Returns:

<cb>u64<>


Returns the length of the file in bytes.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.Metadata.html>Metadata<>.<l https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.len>len()<>
@
@ size
@ std::fs::metadata, fs::metadata, ::metadata, metadata.len(), .len()





### File - Get Created Date

<cb>= <v>metadata<>.created()<>

Usage:

<cb>use std::fs::metadata;

let <v>metadata<> = metadata("<v>path<>")?;

<v>...<> = <v>metadata<>.created();<>

Returns:

<cb>Result\<SystemTime><>


Returns the created system time for a file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.Metadata.html>Metadata<>.<l https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.created>created()<>
@
@ std::fs::metadata, fs::metadata, ::metadata, metadata.created(), .created()



### File - Get Modified Date

<cb>= <v>metadata<>.modified()<>

Usage:

<cb>use std::fs::metadata;

let <v>metadata<> = metadata("<v>path<>")?;

<v>...<> = <v>metadata<>.modified();<>

Returns:

<cb>Result\<SystemTime><>


Returns the created system time for a file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.Metadata.html>Metadata<>.<l https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.modified>modified()<>
@
@ std::fs::metadata, fs::metadata, ::metadata, metadata.modified(), .modified()



### File - Is Directory

<cb>= <v>metadata<>.is_dir()<>

Usage:

<cb>use std::fs::metadata;

let <v>metadata<> = metadata("<v>path<>")?;

<v>...<> = <v>metadata<>.is_dir();<>

Returns:

<cb>bool<>


Returns true if the file is a directory.

For symbolic links, Rust will follow the link to determine if the target is a directory or not.
Broken symbolic links return false.

<c>metadata()<> will return an error if the file does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.Metadata.html>Metadata<>.<l https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.is_dir>is_dir()<>
@
@ std::fs::metadata, fs::metadata, ::metadata, metadata.is_dir(), .is_dir()



### File - Is File

<cb>= <v>metadata<>.is_file()<>

Usage:

<cb>use std::fs::metadata;

let <v>metadata<> = metadata("<v>path<>")?;

<v>...<> = <v>metadata<>.is_file();<>

Returns:

<cb>bool<>


Returns true if the file is a file (symbolic or regular).

For symbolic links, Rust will follow the link to determine if the target is a file or not.
Broken symbolic links return false.
<c>metadata()<> will return an error if the file does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.Metadata.html>Metadata<>.<l https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.is_file>is_file()<>
@
@ std::fs::metadatafs, ::metadata, ::metadata, metadata.is_file(), .is_file()



### File - Is Symbolic Link

<cb>= <v>metadata<>.is_symlink()<>

Usage:

<cb>use std::fs::metadata;

let <v>metadata<> = metadata("<v>path<>")?;

<v>...<> = <v>metadata<>.is_symlink();<>

Returns:

<cb>bool<>


Returns true if the file is a symbolic link.

<c>metadata()<> will return an error if the file does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.Metadata.html>Metadata<>.<l https://doc.rust-lang.org/std/fs/struct.Metadata.html#method.is_symlink>is_symlink()<>
@
@ std::fs::metadatafs, ::metadata, ::metadata, metadata.is_symlink(), .is_symlink(), symlink, sym link



## File - Operations
@
@ ops-only


### Directory - Create

<cb>create_dir("<v>path<>");<>

Usage:

<cb>use std::fs::create_dir;

create_dir("<v>path<>");<>

Returns:

<cb>Result\<()><>


Creates a directory.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.create_dir.html>create_dir<>
@
@ new, make, folder
@ std::fs::create_dir(), fs::create_dir(), create_dir(), mkdir()



### Directory - Create Full Path

<cb>create_dir_all("<v>path<>");<>

Usage:

<cb>use std::fs::create_dir_all;

create_dir_all("<v>path<>");<>

Returns:

<cb>Result\<()><>


Creates all the directories needed to make the path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.create_dir_all.html>create_dir_all<>
@
@ new, make, folder
@ std::fs::create_dir_all(), fs::create_dir_all(), create_dir_all(), mkdir()



### Directory - Delete - Empty

<cb>remove_dir("<v>path<>");<>

Usage:

<cb>use std::fs::remove_dir;

remove_dir("<v>path<>");<>

Returns:

<cb>Result\<()><>


Deletes an empty directory.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.remove_dir.html>remove_dir<>
@
@ remove directory
@ std::fs::remove_dir(), fs::remove_dir(), remove_dir(), delete_dir()



### Directory - Delete - Non Empty

<cb>remove_dir_all("<v>path<>");<>

Usage:

<cb>use std::fs::remove_dir_all;

remove_dir("<v>path<>");<>

Returns:

<cb>Result\<()><>


Deletes a directory and all its contents.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.remove_dir_all.html>remove_dir_all<>

@
@ remove directory
@ std::fs::remove_dir_all(), fs::remove_dir_all(), remove_dir_all(), delete_dir()



### File - Copy

<cb>copy("<v>source_path<>", "<v>target_path<>");<>

Usage:

<cb>use std::fs::copy;

copy("<v>source_path<>", "<v>target_path<>");<>

Returns:

<cb>Result\<()><>


Creates a copy of a file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.copy.html>copy<>

@
@ copy file, create copy
@ std::fs::copy(), fs::copy(), copy(), copy_file()



### File - Delete

<cb>remove_file("<v>path<>");<>

Usage:

<cb>use std::fs::remove_file;

remove_file("<v>path<>");<>

Returns:

<cb>Result\<()><>


Deletes a file.

Will throw an error if the file does not exist, is a directory or the user doesn't have permission.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.remove_file.html>remove_file<>

@
@ remove file
@ std::fs::remove_file(), fs::remove_file(), remove_file(), delete_file()




## File IO
@
@ file-io-only



### File - Create Empty File

<cb>File::create("<v>path<>")?;<>

Usage:

<cb>use std::fs::File;

File::create("<v>path<>")?;<>


This will create an empty file (0 bytes).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html">File<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html#method.create">create()<>
@
@ std::fs::file::create(), fs::file::create(), ::file::create(), ::create(), file::create(), create()



### Binary File - Read

<cb>= read("<v>path<>")<>

Usage:

<cb>use std::fs::read;

= read("<v>path<>")<>

Returns:

<cb><l "?q=io-result-only>Result<>\<Vec\<u8>><>


Reads a file in as bytes (u8).


Example:

<cb>use std::fs::read;

let <v>contents<> = read("<v>contents.txt<>").expect("Read failed.");

println!("{:?}", <v>contents<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.read.html>read<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/type.Result.html>Result<>
@
@ std::fs::read(), fs::read(), ::read(), read(),
@ vec\<u8>, bytes



### Binary File - Read Into Buffer

<cb>let mut <v>file<> = File::open("<v>path<>")?;
let mut <v>contents<>: Vec\<u8> = Vec::new();
<v>file<>.read_to_end(&mut <v>contents<>)?;<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::open("<v>path<>")?;
let mut <v>contents<>: Vec\<u8> = Vec::new();
<v>file<>.read_to_end(&mut <v>contents<>)?;<>

Returns:

<cb><l "?q=io-result-only>Result<>\<Vec\<u8>><>


Reads a file in as a bytes (u8).


Example:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::open("<v>contents.txt<>")
		.expect("Couldn't read the file.");

let mut <v>contents<>: Vec\<u8> = Vec::new();

<v>file<>.read_to_end(&mut <v>contents<>)
		.expect("Couldn't read the file.");

println!("{:?}", <v>contents<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.read_to_end>read_to_end()<>
@
@ std::fs
@ std::fs::read(), fs::read(), read()
@ vec\<u8>, bytes



### Binary File - Write

<cb>= write(<v>path<>, &<v>bytes_1<>)<>

Usage:

<cb>use std::fs::write;

fs::write(<v>path<>).expect(<v>error_message<>)<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Writes a file out as bytes (u8).

Will overwrite any existing file.
Internally calls <c>File.create()<> then <c>file.write_all()<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.write.html>write<>
@
@ std::fs::write(), fs::write(), .write()
@ Vec\<u8>, bytes



### Binary File - Write 2

<cb>let mut <v>file<> = File::create(<v>path<>)?;
<v>file<>.write_all(&<v>bytes_1<>);<>

Or:

<cb>writeln!(<v>file<>, "{}", <v>bytes_1<>);<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::create(<v>path<>)?;
<v>file<>.write_all(<v>bytes_1<>)?;<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Writes a vector of bytes to a file using an instance of <c>File<>.

Will overwrite any existing file.
The file is closed automatically when the variable goes out of scope.


Example:

<cb>use std::fs::File;
use std::io::prelude::*;

let <v>bytes<>: Vec\<u8> = Vec![66, 121, 116, 101, 115, 33];

let mut <v>file<> = File::create("example.txt")
		.expect("Could not create file.");

<v>file<>.write_all(& <v>bytes<>)
		.expect("Could not write to file.");<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write>write()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write_all>write_all()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/macro.writeln.html>writeln!<>
@
@ std::fs::file
@ file.write(), write(), file.write_all(), write_all()
@ Vec\<u8>, bytes



### Binary File - Append

<cb>let mut file = File::options().append(true).open(<v>path<>)?;
<v>file<>.write_all(<v>bytes_1<>);<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::create(<v>path<>)?;
<v>file<>.write_all(<v>bytes_1<>)?;<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Appends a vector of bytes to a file using an instance of <c>File<>.

Will throw an error if the file does not exist
The file is closed automatically when the variable goes out of scope.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write>write()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write_all>write_all()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/macro.writeln.html>writeln!<>
@
@ std::fs::file
@ file.write(), write(), file.write_all(), write_all()
@ vec\<u8>, bytes, add, write



### Text File - Read

<cb>= read_to_string("<v>path<>")<>

Usage:

<cb>use std::fs::read_to_string;

= read_to_string("<v>path<>")<>

Returns:

<cb><l "?q=io-result-only>Result<>\<String><>


Reads a file in as a string.


Example:

<cb>use std::fs::read_to_string;

let <v>contents<> = read_to_string("<v>contents.txt<>")
		.expect("Couldn't read the file.");

println!("{}", <v>contents<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.read_to_string.html>read_to_string<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/struct.Error.html>Error<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/enum.ErrorKind.html>ErrorKind<>
@
@ std::fs::read_to_string(), fs::read_to_string(), read_to_string()
@ String



### Text File - Read 2

<cb><v>file<>.read_to_string(&mut <v>content<>)?;<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::open("<v>path<>")?;
let mut <v>content<> = String::new();
<v>file<>.read_to_string(&mut <v>content<>)?;<>

Returns:

<cb><l "?q=io-result-only>Result<>\<usize><>


Reads a file in as a string.

Returns the number of bytes read.


Example:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::open("<v>contents.txt<>")
		.expect("Couldn't read the file.");

let mut <v>content<> = String::new();

<v>file<>.read_to_string(&mut <v>content<>)
		.expect("Couldn't read the file.");

println!("{}", <v>content<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.read_to_string>read_to_string()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/struct.Error.html>Error<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/enum.ErrorKind.html>ErrorKind<>
@
@ std::fs::file, file.read_to_string(), .read_to_string()
@ String



### Text File - Read Lines

<cb>= read_to_string(<v>path<>)?.lines().collect();<>

Usage:

<cb>use std::fs::read_to_string;

let <v>contents<> = read_to_string(<v>path<>)?;
let <v>lines<>: Vec\<&str> = <v>contents<>.lines().collect();<>

Returns:

<cb>Vec\<&str><>


Reads a file in as a vector of lines.

Returns as Vec of &str.


Example:

<cb>use std::fs::read_to_string;

let <v>contents<> = read_to_string("<v>contents.txt<>")
		.expect("Couldn't read the file.");

let <v>lines<>: Vec\<&str> = <v>contents<>.lines().collect();

for <v>line<> in <v>lines<> {
	println!("{}", <v>line<>);
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.read_to_string.html>read_to_string<>
@
@ std::fs::File, file.lines(), .lines()
@ String, Vec\<&str>



### Text File - Read Lines 2

<cb>= read_to_string(<v>path<>)?.lines().map(|<v>value<>| <v>value<>.to_string()).collect();<>

Usage:

<cb>use std::fs::read_to_string;

let <v>contents<> = read_to_string(<v>path<>)?;
let <v>lines<>: Vec\<&str> = <v>contents<>.lines().map(|<v>value<>| <v>value<>.to_string()).collect();<>

Returns:

<cb>Vec\<String><>


Reads a file in as a vector of lines.

Returns as Vec of String.


Example:

<cb>use std::fs::read_to_string;

let <v>contents<> = read_to_string("<v>contents.txt<>")
		.expect("Couldn't read the file.");

let <v>lines<>: Vec\<String> = <v>contents<>.lines().map(|<v>value<>| <v>value<>.to_string()).collect();

for <v>line<> in <v>lines<> {
	println!("{}", <v>line<>);
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.read_to_string.html>read_to_string<>
@
@ std::fs::File, file.lines(), .lines()
@ String, Vec\<String>



### Text File - Write

<cb>write(<v>path<>, <v>contents<>);<>

Usage:

<cb>use std::fs::write;

write(<v>path<>, <v>contents<>.as_bytes());<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Writes a string to a file.

Will overwrite any existing file.
Internally calls <c>File.create()<> then <c>file.write_all()<>.


Example:

<cb>use std::fs::write;

let <v>contents<> = "File contents.";

write("example.txt", & <v>contents<>.as_bytes())
		.expect("Could not write to file.");<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.write.html>write<>
@
@ std::fs::write(), fs::write(), .write()
@ String



### Text File - Write 2

<cb>let mut <v>file<> = File::create(<v>path<>)?;
<v>file<>.write_all(<v>contents<>.as_bytes());<>

Or:

<cb>writeln!(<v>file<>, "{}", <v>contents<>);<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::create(<v>path<>)?;
<v>file<>.write_all(<v>contents<>.as_bytes())?;<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Writes a string out to a file using an instance of <c>File<>.

Will overwrite any existing file.
The file is closed automatically when the variable goes out of scope.


Example:

<cb>use std::fs::File;
use std::io::prelude::*;

let <v>contents<> = "File contents.";

let mut <v>file<> = File::create("example.txt")
		.expect("Could not create file.");

<v>file<>.write_all(& <v>contents<>.as_bytes())
		.expect("Could not write to file.");<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write>write()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write_all>write_all()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/macro.writeln.html>writeln!<>
@
@ std::fs::file
@ file.write(), write(), file.write_all(), write_all(), writeln!(), writeln()
@ String


### Text File - Write Lines

<cb>let mut <v>file<> = File::create(<v>path<>)?;
for <v>line<> in <v>lines<> {
	writeln!(<v>file<>, "{}", <v>line<>)?;
}<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::create(<v>path<>)?;
for <v>line<> in <v>lines<> {
	writeln!(<v>file<>, "{}", <v>line<>)?;
}<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Writes a list of strings to a file.

Will overwrite any existing file.
A newline is automatically appended at the end of each line by <c>writeln!()<>
The file is closed automatically when the variable goes out of scope.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/macro.writeln.html>writeln!<>
@
@ std::fs::file
@ writeln!(), writeln()
@ list of Strings, sequence



### Text File - Append

<cb>let mut file = File::options().append(true).open(<v>path<>)?;
<v>file<>.write_all(<v>contents<>.as_bytes());<>

Or:

<cb>let mut file = File::options().append(true).open(<v>path<>)?;
writeln!(<v>file<>, "{}", <v>contents<>);<>

Usage:

<cb>use std::fs::File;
use std::io::prelude::*;

let mut <v>file<> = File::create(<v>path<>)?;
<v>file<>.write_all(<v>contents<>.as_bytes())?;<>

Returns:

<cb><l "?q=io-result-only>Result<>\<()><>


Appends a string to a file using an instance of <c>File<>.

Will throw an error if the file does not exist
The file is closed automatically when the variable goes out of scope.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write>write()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write_all>write_all()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/macro.writeln.html>writeln!<>
@
@ std::fs::file
@ file.write(), write(), file.write_all(), write_all(), writeln!(), writeln()
@ String, add, write



### write() vs write_all()


fs::write():

<*>Calls: File::open(), file.write_all()<>


file.write():

<*>Writes Bytes To The File
Returns The Number Of Bytes Written<>

<*>Will Attempt To Write All Bytes
Not An Error If Not All Bytes Are Written<>


file.write_all():

<*>Writes <_>All<> Bytes To The File
Returns Nothing<>

<*>Internally Calls <c>write()<> Until All Bytes Written<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/fn.write.html>write<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write>write()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l https://doc.rust-lang.org/std/fs/struct.File.html>File<>.<l https://doc.rust-lang.org/std/fs/struct.File.html#method.write_all>write_all()<>
@
@ versus
@ file.write(), .write(), file.write_all(), .write_all()
@ std::fs::file



## Paths


### Path - File Separator Char

<cb>MAIN_SEPARATOR<>

Usage:

<cb>use std::path::MAIN_SEPARATOR;

= MAIN_SEPARATOR<>

Type:

<cb>char<>


Returns the OS specific '\\' or '/'.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/constant.MAIN_SEPARATOR.html>MAIN_SEPARATOR<>
@
@ \\, /, char
@ std::path::MAIN_SEPARATOR, path::MAIN_SEPARATOR, MAIN_SEPARATOR



### Path - File Separator Str

<cb>MAIN_SEPARATOR_STR<>

Usage:

<cb>use std::path::MAIN_SEPARATOR_STR;

= MAIN_SEPARATOR_STR<>

Type:

<cb>&str<>


Returns the OS specific '\\' or '/'.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/constant.MAIN_SEPARATOR_STR.html>MAIN_SEPARATOR_STR<>
@
@ \\, /
@ std::path::MAIN_SEPARATOR_STR, path::MAIN_SEPARATOR_STR, MAIN_SEPARATOR_STR



### Path - Paths Separator

Define:

<cb>#[cfg(target_os = "windows")]
const <v>PATH_SEPARATOR<>: &str = ";";

\#[cfg(not(target_os = "windows"))]
const <v>PATH_SEPARATOR<>: &str = ":";<>

Use:

<cb>= <v>PATH_SEPARATOR<><>


Sets <c>PATH_SEPARATOR<> based on the current OS.

There is no constant in the standard library for paths separator. Use the above code instead.
@
@ paths-separator, path_separator



# Directory
@
@ folder-only, folders-only, folders
@ dir-only, dirs-only, directory-only, directories-only


### Directory - Read

<cb>= read_dir(<v>path<>)<>

Usage:

<cb>use std::fs::read_dir;

= read_dir(<v>path<>)<>

Returns:

<cb>Result\<ReadDir><>


Returns all the entries in the directory.


Example:

<cb>use std::fs::read_dir;

let <v>directory<> = read_dir("./").unwrap();

for <v>entry<> in directory {

	let <v>entry<> = <v>entry<>.unwrap();
	let <v>file_name<> = <v>entry<>.file_name().into_string().unwrap();
	let <v>path<> = <v>entry<>.path().to_str().unwrap().to_string();

	println!("{} -> {}", <v>file_name<>, <v>path<>);
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/fn.read_dir.html">read_dir()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html">DirEntry<>
@
@ get, retrieve
@ std::fs::read_dir(), fs::read_dir(), read_dir()



### Directory - Read - Files Only

<cb>= read_dir(<v>path<>).unwrap().filter(|<v>entry<>| <v>entry<>.as_ref().unwrap().file_type().unwrap().is_file()).collect()<>

Usage:

<cb>use std::fs::read_dir;

= read_dir(<v>path<>).unwrap().filter(|<v>entry<>| <v>entry<>.as_ref().unwrap().file_type().unwrap().is_file()).collect()<>

Returns:

<cb>Vec\<Result\<ResultEntry, Error>><>


Returns the files and only the files in a directory.


Will not return symbolic links or any other type of entries.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/fn.read_dir.html">read_dir()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html">DirEntry<>
@
@ get, retrieve
@ std::fs::read_dir(), fs::read_dir(), read_dir()



### Directory - Read - Directories Only

<cb>= read_dir(<v>path<>).unwrap().filter(|<v>entry<>| <v>entry<>.as_ref().unwrap().file_type().unwrap().is_dir()).collect()<>

Usage:

<cb>use std::fs::read_dir;

= read_dir(<v>path<>).unwrap().filter(|<v>entry<>| <v>entry<>.as_ref().unwrap().file_type().unwrap().is_dir()).collect()<>

Returns:

<cb>Vec\<Result\<ResultEntry, Error>><>


Returns the directories and only directories in the directory.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/fn.read_dir.html">read_dir()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html">DirEntry<>
@
@ get, retrieve
@ std::fs::read_dir(), fs::read_dir(), read_dir()



# ReadDir

<cb>std::fs::ReadDir<>


The contents of a directory in the file system.


Example:

<cb>use std::fs::read_dir;

let <v>directory<> = read_dir("./").unwrap();

for <v>entry<> in directory {

	let <v>entry<> = <v>entry<>.unwrap();
	let <v>file_name<> = <v>entry<>.file_name().into_string().unwrap();
	let <v>path<> = <v>entry<>.path().to_str().unwrap().to_string();

	println!("{} -> {}", <v>file_name<>, <v>path<>);
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
@
@ read directory
@ std::fs::ReadDir, fs::ReadDir, ReadDir
@ dir-only, dirs-only, directory-only, directories-only


## ReadDir - Conversions
@
@ from, convert, conversion, converting
@ from readdir, readdir-to, from read-dir, read-dir-to



### ReadDir - To Paths

<cb>= <v>read_dir_1<>.map(|<v>entry<>| <v>entry<>.unwrap().path()).collect();<>

Returns:

<cb>Vec\<Path><>


Converts ReadDir into a vec of Paths.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.Path.html">Path<>
@
@ vec



### ReadDir - To String of Paths

<cb>= <v>read_dir_1<>.map(|entry| entry.unwrap().path()).collect();<>

Returns:

<cb>Vec\<String><>


Converts ReadDir into a String Vec of Paths.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.Path.html">Path<>
@
@ vec, to-strings



### ReadDir - To String of File Names

<cb>= <v>read_dir_1<>.map(|<v>entry<>| <v>entry<>.unwrap().file_name().into_string().unwrap()).collect();<>

Returns:

<cb>Vec\<String><>


Converts ReadDir into a String Vec of file names.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.ReadDir.html">ReadDir<>
@
@ vec, to-string



# DirEntry

<cb>std::fs::DirEntry<>


An entry in a directory in the file system.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html">DirEntry<>
@
@ read directory entry
@ std::fs::DirEntry, fs::DirEntry, DirEntry
@ dir-only, dirs-only, directory-only, directories-only



## DirEntry - Properties


### DirEntry - File Name

<cb>= <v>dir_entry_1<>.file_name()<>

Returns:

<cb>OsString<>


Returns the file name for the entry.

Does not include the directory.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html">DirEntry<>.<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html#method.file_name">file_name()<>
@
@ readentry.file_name(), .file_name()



## DirEntry - Conversions
@
@ from, convert, conversion, converting
@ from direntry, direntry-to, from dir-entry, dir-entry-to


### DirEntry - To PathBuf

<cb>= <v>dir_entry_1<>.path()<>

Returns:

<cb>PathBuf<>


Returns an instance of Path for the entry.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html">DirEntry<>.<l "https://doc.rust-lang.org/std/fs/struct.DirEntry.html#method.path">path()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>
@
@ readentry.path(), .path()



# BufReader

<cb>BufReader<>

Type:

<cb>std::io::BufReader<>

Reads a file using a buffer.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufReader.html">BufReader<>
@
@ buffered file reader
@ std::io::BufReader, io::BufReader



## BufReader - Basics

Read:

<cb>use std::fs::File;
use std::io::BufReader;
use std::io::Read;

<#>// Open:<>

let <v>file<> = File::open(<v>path<>)?;
let mut <v>reader<> = BufReader::new(<v>file<>);
let mut <v>buffer<> = [0_u8; <v>max_size<>];

<#>// Read:<>

loop {

	let <v>size<> = match <v>reader<>.read(&mut <v>buffer<>) {
		Err(<v>error<>) => return Err(<v>error<>),
		Ok(0) => break, // EOF
		Ok(<v>size<>) => <v>size<>,
	};

	let <v>content<> = &<v>buffer<>[..<v>size<>];
	<v>...<>
}<>

Errors:

<cb>std::io::Result<>



## BufReader - Create

<cb>= BufReader::new(<v>file<>)<>

Usage:

<cb>use std::fs::File;
use std::io::BufReader;

let <v>file<> = File::open(<v>path<>)?;
let mut <v>reader_1<> = BufReader::new(<v>file<>);<>


Returns:

<cb>BufReader<>


Returns a file reader that uses a buffer to read a file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html">File<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html#method.open">open()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufReader.html">BufReader<>
@
@ std::file::File::open(), file::File::open(), File::open()
@ new, define, instantiate



## BufReader - Operations


### BufReader - Read Bytes

<cb>= <v>reader_1<>.read(&mut <v>buffer_array<>)<>

Usage:

<cb>let mut <v>buffer<> = [0_u8; <v>max_size<>];
let <v>result<> = <v>reader_1<>.read(&mut <v>buffer<>)<>

Returns:

<cb>io::Result\<usize><>


Reads the contents of a file into a buffer.

The buffer is of type u8.
Returns the number of bytes read.
Returns 0 if at the end of the file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufReader.html">BufReader<>.<l "https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read">read()<>
@
@ std::io::bufreader.read(), io::bufreader.read(), bufreader.read(), .read()



### BufReader - Seek

<cb><v>reader_1<>.seek()<>


Places the reader head at the given file position.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufReader.html">BufReader<>.<l "https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.seek">seek()<>
@
@ to position, location
@ std::io::bufreader.seek(), io::bufreader.seek(), bufreader.seek(), .seek()



# BufWriter

<m>Untested. Please report any errors, thanks!<>

<cb>BufWriter<>

Type:

<cb>std::io::BufWriter<>

Writs a file using a buffer.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html">BufWriter<>
@
@ buffered file writer
@ std::io::BufWriter, io::BufWriter



## BufWriter - Basics

<m>Untested. Please report any errors, thanks!<>

Read:

<cb>use std::fs::File;
use std::io::BufWriter;
use std::io::Write;

<#>// Open:<>
let <v>file<> = File::open(<v>path<>)?;
let mut <v>writer<> = BufWriter::new(<v>file<>);

<#>// Write Bytes:<>
<v>writer<>.write(&<v>byte_array<>)?

<#>// Force Write:<>
<v>writer<>.flush()?;<>

Errors:

<cb>std::io::Result<>



## BufWriter - Create
@
@ new, define, instantiate


### BufWrite - Create

<cb>= BufWriter::new(<v>file<>)<>

Usage:

<cb>use std::fs::File;
use std::io::BufWriter;

let <v>file<> = File::open(<v>path<>)?;
let mut <v>writer_1<> = BufWriter::new(<v>file<>);<>


Returns:

<cb>BufWriter<>


Returns a file writer.

Uses the default buffer size (8kb).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html">File<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html#method.open">open()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html">BufWriter<>
@
@ std::file::File::open(), file::File::open(), File::open()



### BufWrite - Create, Set Capacity

<cb>= BufWriter::with_capacity(<v>size<>, <v>file<>)<>

Usage:

<cb>use std::fs::File;
use std::io::BufWriter;

let <v>file<> = File::open(<v>path<>)?;
let mut <v>writer_1<> = BufWriter::with_capacity(<v>size<>, <v>file<>);<>


Returns:

<cb>BufWriter<>


Returns a file writer.

Sets the buffer size in bytes.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fs/index.html">fs<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html">File<>::<l "https://doc.rust-lang.org/std/fs/struct.File.html#method.open">open()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html">BufWriter<>::<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.with_capacity">with_capacity()<>
@
@ with size, with capacity, set buffer
@ std::file::File::open(), file::File::open(), File::open()



## BufWrite - Operations


### BufWrite - Write Bytes

<cb>= <v>writer_1<>.write(&<v>byte_array<>)<>

Returns:

<cb>io::Result\<usize><>


Writes bytes to the buffer.

Returns the number of bytes actually accepted


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html">BufWriter<>.<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html#method.write">write()<>
@
@ std::io::BufWriter.write(), io::BufWriter.write(), BufWriter.write(), .write()



### BufWrite - Flush

<cb>= <v>writer_1<>.flush()<>

Returns:

<cb>io::Result\<()><>


Forces a write of the buffer to the destination.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.BufWriter.html">BufWriter<>.<l "https://doc.rust-lang.org/std/io/trait.Write.html#tymethod.flush">flush()<>
@
@ std::io::BufWriter.flush(), io::BufWriter.flush(), BufWriter.flush(), .flush()



# IO Error

<cb>std::io::Error<>


The error returned from an IO function call.


<l "?q=io-result-only">Result<>  |  <l "?q=errorkind-only">ErrorKind<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/struct.Error.html>Error<>
@
@ io-error-only
@ std::io::error, io::error


## IO Error - Properties


### IO Error - ErrorKind

<cb>= <v>error<>.kind()<><>

Returns:

<cb>ErrorKind<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/struct.Error.html>Error<>.<l "https://doc.rust-lang.org/std/io/struct.Error.html#method.kind">kind()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/enum.ErrorKind.html>ErrorKind<>
@
@ get



# IO ErrorKind

<cb>std::io::ErrorKind<>


The specific error that occured during an IO function call. Returned in IO Error.

<l "?q=io-result-only">Result<>  |  <l "?q=io-error-only">Error<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/enum.ErrorKind.html>ErrorKind<>
@
@ error kind
@ errorkind-only, error-kind-only, io-errorkind-only, io-error-kind-only
@ std::io::errorkind, io::errorkind


## IO ErrorKind - Enum Variants

<cb>
ErrorKind::AddrInUse
ErrorKind::AddrNotAvailable
ErrorKind::AlreadyExists
ErrorKind::BrokenPipe
ErrorKind::ConnectionAborted
ErrorKind::ConnectionRefused
ErrorKind::ConnectionReset
ErrorKind::Interrupted
ErrorKind::InvalidData
ErrorKind::InvalidInput
ErrorKind::NotConnected
ErrorKind::NotFound
ErrorKind::OutOfMemory
ErrorKind::PermissionDenied
ErrorKind::TimedOut
ErrorKind::UnexpectedEof
ErrorKind::Unsupported
ErrorKind::WouldBlock
ErrorKind::WriteZero
ErrorKind::Other<>



# IO Result

<cb>std::io::Result<>


The result from an IO function call.

<l "?q=io-error-only">Error<>  |  <l "?q=errorkind-only">ErrorKind<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l https://doc.rust-lang.org/std/io/type.Result.html>Result<>
@
@ io-result-only
@ std::io::result, io::result



# Path

<cb>Path<>

Type:

<cb>std::path::Path<>


A structure representing a path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.Path.html">Path<>
@
@ std::path::path, path::path, ::path
@ path-only, paths-only


## Path - Create

<cb>= Path::new(<v>path<>)<>

Usage:

<cb>use std::path::Path;

= Path::new(<v>path<>)<>

Returns:

<cb>std::path::Path<>


Creates an instance of Path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.new">new<>
@
@ new, instance, instantiate
@ std::path::Path::new, path::Path::new, Path::new



## Path - Properties


### Path - Display

<cb>= <v>path_1<>.display()<>

Returns:

<cb>Display<>


Returns a displayable representation of the path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.display">display()<>
@
@ path.display(), .display()



### Path - Exists?

<cb>= <v>path_1<>.exists()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.exists()<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.exists">exists()<>
@
@ path.exists(), .exists()



### Path - File Name

<cb>= <v>path_1<>.file_name()<>

Returns:

<cb>Option\<&OsStr><>


The file name portion of the path (file name and extension, but no directory).

For "<v>/user/your_name_here/file.txt<>", returns "<v>file.txt<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.file_name">file_name()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, base, get
@ path.file_name(), .file_name()



### Path - File Extension

<cb>= <v>path_1<>.extension()<>

Returns:

<cb>Option\<&OsStr><>


Returns the file extension.

Returns <c>None<> if no extension is found.

For "<v>/user/your_name_here/file.txt<>", returns "<v>txt<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.extension">extension()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, get
@ path.extension(), .extension()



### Path - File Parent

<cb>= <v>path_1<>.parent()<>

Returns:

<cb>Option\<&OsStr><>


Returns the parent directory for the path.

For "<v>/user/your_name_here/file.txt<>", returns "<v>/user/your_name_here<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.parent">parent()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, directory, folder, get
@ path.parent(), .parent()



### Path - File Stem

<cb>= <v>path_1<>.file_stem()<>

Returns:

<cb>Option\<&OsStr><>


Returns the stem of the file name (no path, no extension).

For "<v>/user/your_name_here/file.txt<>", returns "<v>file<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.file_stem">file_stem()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, base, get
@ path.file_stem(), .file_stem()



### Path - Is Absolute?

<cb>= <v>path_1<>.is_absolute()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.is_absolute()<>


Returns true if the path is a absolute path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.is_absolute">is_absolute()<>
@
@ absolute, folder
@ path.is_absolute(), .is_absolute()



### Path - Is Directory?

<cb>= <v>path_1<>.is_dir()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.is_dir()<>


Returns true if the path is a directory.

Returns false if the path does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.is_dir">is_dir()<>
@
@ directory, folder
@ path.is_dir(), .is_dir()



### Path - Is File?

<cb>= <v>path_1<>.is_file()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.is_file()<>


Returns true if the path is a file.

Returns false if the path does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.is_file">is_file()<>
@
@ path.is_file(), .is_file()



### Path - Is Relative?

<cb>= <v>path_1<>.is_relative()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.is_relative()<>


Returns true if the path is a relative path.

Returns false if the path does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.is_relative">is_relative()<>
@
@ relative, folder
@ path.is_relative(), .is_relative()



### Path - Is Symlink File?

<cb>= <v>path_1<>.is_symlink()<>

Usage:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>path<>");
= <v>path_1<>.is_symlink()<>


Returns true if the path is a symlink.

Returns false if the path does not exist.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.is_symlink">is_symlink()<>
@
@ relative, folder
@ path.is_symlink(), .is_symlink()



## Path - Operations


### Path - Canonicalize

<cb>= <v>path_1<>.canonicalize()<>

Returns:

<cb>Result\<Path><>


Returns the absolute path of the current path.

Converts all relative parts ("..") and symbolic links into the absolute path

For "<v>file.txt<>", returns the path for "<v>/user/your_name_here/file.txt<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.Path.html>Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.extension">canonicalize()<>
@
@ file parts, to absolute path, convert, into, conversion
@ path.canonicalize(), .canonicalize()



### Path - Join

<cb>= <v>path_1<>.join(<v>subpath<>)<>

Returns:

<cb>std::path::PathBuf<>


Joins a directory and subdirectory using the correct system file separator.


Example:

<cb>use std::path::Path;

let <v>path_1<> = Path::new("<v>home<>");
let <v>user_path<> = <v>path_1<>.join("<v>your_name_here<>");

println!("{}", <v>user_path<>.display())

<#>// Prints: home/your_name_here<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.Path.html">Path<>.<l "https://doc.rust-lang.org/std/path/struct.Path.html#method.join">join()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>
@
@ directories, paths, subdirectories, subpaths, folders, subfolders
@ std::path::Path.join(), path::Path.join(), Path.join(), .join()



# PathBuf

<cb>PathBuf<>

Type:

<cb>std::path::PathBuf<>


A structure representing a mutable path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>
@
@ std::path::pathbuf, path::pathbuf, ::pathbuf, pathbuf, mutable
@ pathbuf-only, pathbufs-only



## PathBuf - Create


### PathBuf - Create Empty

<cb>= PathBuf::new()<>

Usage:

<cb>use std::path::PathBuf
= PathBuf::new()<>

Returns:

<cb>std::path::PathBuf<>


Creates an empty instance of PathBuf.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.new">new<>
@
@ new, instance, instantiate
@ std::path::PathBuf::new, path::PathBuf::new, PathBuf::new



### PathBuf - Create From

<cb>= PathBuf::from(<v>value<>)<>

Usage:

<cb>use std::path::PathBuf
= PathBuf::from(<v>value<>)<>

Returns:

<cb>Cow\<Path><>


Example:

<cb>use std::path::PathBuf;

let <v>pathbuf_1<> = PathBuf::from("/home");
println!("{}", <v>pathbuf_1<>.display());

<#>// Prints: /home<><>

Creates an instance of PathBuf with the given value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.from">from<>
@
@ new, instance, instantiate
@ std::path::PathBuf::new, path::PathBuf::new, PathBuf::new



## PathBuf - Properties


### PathBuf - Display

<cb>= <v>pathbuf_1<>.display()<>

Returns:

<cb>Display<>


Returns a displayable representation of the pathbuf.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.display">display()<>
@
@ pathbuf.display(), .display()



### PathBuf - Exists?

<cb>= <v>pathbuf_1<>.exists()<>

Usage:

<cb>use std::path::PathBuf;

let <v>pathbuf_1<> = PathBuf::from("<v>path<>");
= <v>pathbuf_1<>.exists()<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.exists">exists()<>
@
@ path.exists(), .exists(), path



### PathBuf - File Name

<cb>= <v>pat;1<>.file_name()<>

Returns:

<cb>Option\<&OsStr><>


The file name portion of the pathbuf (file name and extension, but no directory).

For "<v>/user/your_name_here/file.txt<>", returns "<v>file.txt<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.file_name">file_name()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, base, get
@ pathbuf.file_name(), .file_name()



### PathBuf - File Extension

<cb>= <v>pathbuf_1<>.extension()<>

Returns:

<cb>Option\<&OsStr><>


Returns the file extension.

Returns <c>None<> if no extension is found.

For "<v>/user/your_name_here/file.txt<>", returns "<v>txt<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.extension">extension()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, get
@ pathbuf.extension(), .extension()



### PathBuf - File Parent

<cb>= <v>pathbuf_1<>.extension()<>

Returns:

<cb>Option\<&OsStr><>


Returns the parent directory for the pathbuf.

For "<v>/user/your_name_here/file.txt<>", returns "<v>/user/your_name_here<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.extension">extension()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, directory, folder, get
@ pathbuf.extension(), .extension()



### PathBuf - File Stem

<cb>= <v>pat;1<>.file_stem()<>

Returns:

<cb>Option\<&OsStr><>


The file stem portion of the pathbuf (no path, no extension).

For "<v>/user/your_name_here/file.txt<>", returns "<v>file<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.file_stem">file_stem()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ffi/index.html">ffi<>::<l "https://doc.rust-lang.org/std/ffi/struct.OsStr.html">OsStr<>
@
@ file parts, base, root, get
@ pathbuf.file_stem(), .file_stem()



### PathBuf - Is Absolute?

<cb>= <v>pathbuf_1<>.is_absolute()<>

Usage:

<cb>use std::pathbuf::PathBuf;

let <v>pathbuf_1<> = PathBuf::new("<v>pathbuf<>");
= <v>pathbuf_1<>.is_absolute()<>


Returns true if the PathBuf is a absolute path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">pathbuf<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.is_absolute">is_absolute()<>
@
@ absolute, folder
@ pathbuf.is_absolute(), .is_absolute()



### PathBuf - Is Directory?

<cb>= <v>pathbuf_1<>.is_dir()<>

Usage:

<cb>use std::pathbuf::PathBuf;

let <v>pathbuf_1<> = PathBuf::new("<v>pathbuf<>");
= <v>pathbuf_1<>.is_dir()<>


Returns true if the PathBuf is a directory.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">pathbuf<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.is_dir">is_dir()<>
@
@ directory, folder
@ pathbuf.is_dir(), .is_dir()



### PathBuf - Is File?

<cb>= <v>pathbuf_1<>.is_file()<>

Usage:

<cb>use std::pathbuf::PathBuf;

let <v>pathbuf_1<> = PathBuf::new("<v>pathbuf<>");
= <v>pathbuf_1<>.is_file()<>


Returns true if the PathBuf is a file.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">pathbuf<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.is_file">is_file()<>
@
@ pathbuf.is_file(), .is_file()



### PathBuf - Is Relative?

<cb>= <v>pathbuf_1<>.is_relative()<>

Usage:

<cb>use std::pathbuf::PathBuf;

let <v>pathbuf_1<> = PathBuf::new("<v>pathbuf<>");
= <v>pathbuf_1<>.is_relative()<>


Returns true if the PathBuf is a relative path.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">pathbuf<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.is_relative">is_relative()<>
@
@ relative, folder
@ pathbuf.is_relative(), .is_relative()



### PathBuf - Is Symlink File?

<cb>= <v>pathbuf_1<>.is_symlink()<>

Usage:

<cb>use std::pathbuf::PathBuf;

let <v>pathbuf_1<> = PathBuf::new("<v>pathbuf<>");
= <v>pathbuf_1<>.is_symlink()<>


Returns true if the PathBuf is a symlink.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">pathbuf<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.is_symlink">is_symlink()<>
@
@ relative, folder
@ pathbuf.is_symlink(), .is_symlink()


## PathBuf - Operations


### PathBuf - Append

<cb>= <v>pathbuf_1<>.push(<v>subpath<>)<>

Returns:

<cb>std::path::PathBuf<>


Joins a directory and subdirectory using the system file separator.

Returns a new PathBuf.


Example:

<cb>use std::path::PathBuf;
use std::path::MAIN_SEPARATOR_STR;

let mut <v>pathbuf_1<> = PathBuf::new();
<v>pathbuf_1<>.push(MAIN_SEPARATOR_STR);
<v>pathbuf_1<>.push("home");
<v>pathbuf_1<>.push("<v>your_name_here<>");

println!("{}", <v>pathbuf_1<>.display());

<#>// Prints: /home/your_name_here<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.push">push()<>
@
@ directories, paths, subdirectories, subpaths, folders, subfolders, push
@ std::path::PathBuf.push(), path::PathBuf.push(), PathBuf.push(), .push()



### PathBuf - Canonicalize

<cb>= <v>pathbuf_1<>.canonicalize()<>

Returns:

<cb>Result\<PathBuf><>


Returns the absolute path of the current pathbuf.

Converts all relative parts ("..") and symbolic links into the absolute path

For "<v>file.txt<>", returns the path for "<v>/user/your_name_here/file.txt<>".


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l https://doc.rust-lang.org/std/path/struct.PathBuf.html>PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.extension">canonicalize()<>
@
@ file parts, to absolute path, convert, into, conversion
@ pathbuf.canonicalize(), .canonicalize()



### PathBuf - Join

<cb>= <v>path_1<>.join(<v>subpath<>)<>

Returns:

<cb>std::path::PathBuf<>


Joins a directory and subdirectory using the system file separator.

Returns a new PathBuf.


Example:

<cb>use std::path::PathBuf;

let <v>path_1<> = PathBuf::from("<v>home<>");
let <v>user_path<> = <v>path_1<>.join("<v>your_name_here<>");

println!("{}", <v>user_path<>.display());

<#>// Prints: home/your_name_here<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>.<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html#method.join">join()<>
@
@ directories, paths, subdirectories, subpaths, folders, subfolders
@ std::path::PathBuf.join(), path::PathBuf.join(), PathBuf.join(), .join()



# Threads

<cb>std::thread::Thread<>


A native or OS thread.

These threads are controlled by the operating system, run in true parallel and can run on multiple cpu cores.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/thread/index.html>thread<>::<l https://doc.rust-lang.org/std/thread/struct.Thread.html>Thread<>
@
@ thread-only, threads-only
@ std::thread::Thread, thread::Thread, ::thread



## Thread Create
@
@ new, instantiate


### Thread - Create

<cb>spawn(move || { <v>...<> }<>

Usage:

<cb>use std::thread::spawn;

let <v>thread_1<> = spawn(|| {
	<v>...<>
});<>

Returns:

<cb>JoinHandle<>


Spawns a new thread.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/thread/index.html>thread<>::<l https://doc.rust-lang.org/std/thread/fn.spawn.html>spawn<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/thread/index.html>thread<>::<l https://doc.rust-lang.org/std/thread/struct.JoinHandle.html>JoinHandle<>
@
@ new, spawn, start
@ std::thread::spawn(), thread::spawn(), spawn()



### Thread - Create - Move Closure Ownership

<cb>spawn(move || { <v>...<> }<>

Usage:

<cb>use std::thread::spawn;

let <v>thread_1<> = thread::spawn(move || {
	<v>...<>
});<>


Spawns a new thread and calls the closure.

The closure takes ownership of all variables in scope.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/thread/index.html>thread<>::<l https://doc.rust-lang.org/std/thread/fn.spawn.html>spawn<>
@
@ new, spawn, start, move
@ std::thread::spawn(), thread::spawn(), spawn()



### Thread - Create With Builder

<cb>use std::thread;

let <v>thread_1<> = thread::Builder::new().name("<v>thread name<>".to_string()).spawn(move || {
	println!("Hello, world!");
});<>


Use <c>thread::Builder<> to create a thread with user define properties.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/thread/index.html>thread<>::<l https://doc.rust-lang.org/std/thread/struct.Builder.html>Builder<>
@
@ new, spawn, start
@ std::thread::builder::new(), builder::new()


## Thread - Operations


### Thread - Block For Results

<cb>= <v>thread_1<>.join()<>

Returns:

<cb>Result\<<v>T<>><>


Blocks until the thread completes then captures the returned value.
@
@ get return
@ thread.join(), .join()



# Channels

Creates an asynchronous channel that threads can use to communicate together.

Creates an MPSC (multi-producer single consumer) channel.

Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html>Channel<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html>Sender<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html>Receiver<>
@
@ channel-only, channels-only
@ std::sync::mpsc::channel, sync::mpsc::channel, mpsc::channel, ::channel



### Channel - Create

<cb>let (<v>sender<>, <v>receiver<>) = channel();<>

Usage:

<cb>use std::sync::mpsc::channel;
use std::sync::mpsc::Sender;
use std::sync::mpsc::Receiver;

let (<v>sender<>, <v>receiver<>): (Sender\<<v>T<>>, Receiver\<<v>T<>>) = channel();<>

Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/fn.channel.html>Channel<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html>Sender<>
Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html>Receiver<>
@
@ channel();



### Channel Sender - Send

<cb>= <v>sender<>.send(<v>message<>);<>

Returns:

<cb>Result\<(), SendError\<<v>T<>>><>


Sends a message to the channel.
The message will be received on the channel receiver.
This call never blocks the callers thread.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html>Sender<>.<l https://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html#method.send>send()<>
@
@ std::sync::mpsc::sender.send(), sender.send(), .send()



### Channel Receiver - Receive (Blocking)

<cb>= <v>receiver<>.recv()<>

Returns:

<cb>Result\<<v>T<>, RecvError\<<v>T<>>><>


Blocks until a message is received.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html>Receiver<>.<l https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.recv>recv()<>
@
@ std::sync::mpsc::Receiver.recv(), receiver.recv(), .recv()
@ std::sync::mpsc::Receiver.receive(), receiver.receive(), .receive()



### Channel Receiver - Receive (Non-Blocking)

<cb>= <v>receiver<>.try_recv()<>

Returns:

<cb>Result\<<v>T<>, TryRecvError\<<v>T<>>><>


Checks to see if a message arrived.

Continues if none found.


Rust Docs: <l https://doc.rust-lang.org/std/index.html>std<>::<l https://doc.rust-lang.org/std/sync/index.html>sync<>::<l https://doc.rust-lang.org/std/sync/mpsc/index.html>mpsc<>::<l https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html>Receiver<>.<l https://doc.rust-lang.org/std/sync/mpsc/struct.Receiver.html#method.try_recv>try_recv()<>
@
@ std::sync::mpsc::Receiver.try_recv(), receiver.try_recv(), .try_recv(), try
@ std::sync::mpsc::Receiver.try_receive(), receiver.try_receive(), .try_receive(), try



# Option

<cb>Option\<<v>Type<>><>

Type:

<cb>std::option::Option<>

Enum Variants:

<cb>pub enum Option\<<v>T<>> {
    Some(<v>T<>),
    None,
}<>


Use to define instances where a call may or may not return a value.

Option is an enum with 2 values: Some, None.
If assigning <c>None<>, you must define the type.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>
@
@ None, Some(), optional
@ options, optionals, option-only, options-only, opt-only
@ standard enums types
@ std-enum-types, standard-enum-types, system-enum-types, sys-enum-types
@ std::option::option, option::option, ::option



## Option - Basics

Type:

<cb>let <v>item_1<>: Option\<<v>T<>> = <v>...<>;<>

Create:

<cb>let <v>item_1<> = Some(<v>value_1<>);
let <v>item_2<> = None;<>

If Some:

<cb>if let Some(<v>value<>) = <v>item_1<> {
	<v>...<> = <v>value<>;
};<>

Match:

<cb>let <v>item_1_value<> = match <v>item_1<> {
	Some(<v>value<>) => <v>value<>,
	None => "No Value"
};

println!("item 1 value = {}", <v>item_1_value<>);<>

Value or Default:

<cb>let <v>item_2_value<> = <v>item_2<>.unwrap_or("<v>default value<>");

println!("item 2 value = {}", <v>item_2_value<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>
Rust Docs: <l "https://doc.rust-lang.org/std/option/enum.Option.html#variant.None">None<> | <l "https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some">Some<>



## Option - Create
@
@ define, new, instantiate


### Option - Create Some

<cb>= Some(<v>value<>)<>


Creates an <c>Option<> variable with a value.

Option is an enum with 2 values: Some, None.
If assigning <c>None<>, you must define the type.


Example:

<cb>let <v>some_value<> = Some(42);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#variant.Some">Some()<>
@
@ some()



### Option - Create None

<cb>= None<>

Usage:

<cb>let <v>item<>: Option\<<v>Type<>> = None;<>


Creates an <c>Option<> variable with no value.

when assigning <c>None<>, you must define the type.


Example:

<cb>let <v>no_value<>: Option\<i32> = None;<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#variant.None">None()<>



## Option - Properties


### Option - Is None

<cb>= <v>option_1<>.is_none()<>

Returns:

<cb>bool<>


Returns true if the option has no value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.is_none">is_none()<>
@
@ none, empty, is, has, value, item
@ option.is_none(), .is_none()



### Option - Is Some

<cb>= <v>option_1<>.is_some()<>

Returns:

<cb>bool<>


Returns true if there is a value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.is_some">is_some()<>
@
@ is, has, contains, some, value, item
@ option.is_some(), .is_some()



## Option - Operations
@
@ options, optionals, option-only, options-only
@ std::option::Option
@ data type


### Option - And

<cb>= <v>option_1<>.and(<v>option_2<>)<>

Returns:

<cb>Option\<<v>U<>><>


Returns option 2 when option 1 has a value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.and">and()<>
@
@ option.and(), .and()



### Option - And Then

<cb>= <v>option_1<>.and_then(<v>function_2<>)<>

Returns:

<cb>Option\<<v>U<>><>


Calls function 2 when option 1 has a value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.and_then">and_then()<>
@
@ apply function
@ option.and_then(), .and_then()



### Option - Get Value

<cb>= <v>optional_1<>.unwrap()<>

Returns:

<cb><v>T<><>


Returns the value inside the option.

Will panic if option is None.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap">unwrap()<>
@
@ option.unwrap(), .unwrap()



### Option - Get Value Or Default

<cb>= <v>optional_1<>.unwrap_or(<v>default<>)<>

Returns:

<cb><v>T<><>

Returns unwrapped value or if None, returns a default value.


Example:

Passing Lambda:

<cb>let no_value: Option\<&str> = None;

let <v>unwrapped<> = <v>no_value<>.unwrap_or("[No Value]");
println!("Unwrapped = {}", <v>unwrapped<>);

<#>// Prints "Unwrapped = [No Value]"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or">unwrap_or()<>
@
@ .unwrap_or()



### Option - Get Value Or Call Function

<cb>= <v>optional_1<>.unwrap_or_else(<v>else_function<>)<>

Returns:

<cb><v>T<><>


Returns unwrapped value or if None, calls parameter function.


Example:

Passing Lambda:

<cb>let no_value: Option\<&str> = None;

let <v>unwrapped<> = <v>no_value<>.unwrap_or_else(|| "[No Value]");
println!("Unwrapped = {}", <v>unwrapped<>);

<#>// Prints "Unwrapped = [No Value]"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.unwrap_or_else">unwrap_or_else()<>
@
@ apply function
@ .unwrap_or_else()



### Option - Get Value with Panic Message

<cb>= <v>optional_1<>.expect("<v>panic message<>")<>

Returns:

<cb><v>T<><>


Returns the value inside the option.

Will panic if option is None.
Panics with the custom panic message


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.expect">expect()<>
@
@ option.expect(), .expect()



### Option - Iter

<cb>= <v>option_1<>.iter()<>

Returns:

<cb>Iter\<<v>T<>><>


Returns the option as an iterator.

Some returns 1 result.
None returns no results.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.iter">iter()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/struct.Iter.html">Iter<>
@
@ get iterator
@ option.iter(), .iter()



### Option - Iter Mut

<cb>= <v>option_1<>.iter_mut()<>

Returns:

<cb>IterMut\<<v>T<>><>


Returns the option as an iterator.

Some returns 1 result.
None returns no results.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.iter_mut">iter_mut()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/struct.IterMut.html">IterMut<>
@
@ get mutable iterator
@ option.iter_mut(), .iter_mut()



### Option - Map

<cb><v>option_1<>.map(|<v>value<>| <v>...<>);

<v>option_1<>.map(<v>function_1<>);<>

Returns:

<cb>Option\<<v>U<>><>


Converts from one type to another.

Applies the function when <c>Some(value)<> exists.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.map">map()<>
@
@ apply function, convert to, conversion into
@ option.map(), .map()



### Option - Map Or

<cb>= <v>option_1<>.map_or(<v>default<>, <v>map_function<>)

= <v>option_1<>.map_or(<v>default<>, |<v>value<>| <v>...<> )<>

Returns:

<cb><v>U<><>


If option is some then apply a function. But if <v>None<>, return default.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.map_or">map_or()<>
@
@ apply function, convert to, conversion into
@ option.map_or(), .map_or()



### Option - OK Or

<cb>= <v>option_1<>.ok_or(<v>error<>)<>

Returns:

<cb>Result\<<v>T<>, <v>E<>><>


Converts an option into a result.

The ok_or() clause handles values that are <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or">ok_or()<>
@
@ option.ok_or()



### Option - OK Or Else

<cb>= <v>option_1<>.ok_or_else(|| <v>error_function<>)<>

Returns:

<cb>Result\<<v>T<>, <v>E<>><>


Converts an option into a result.

The ok_or_else() clause calls the function when values are <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else">ok_or_else()<>
@
@ apply function, convert to, conversion into
@ option.ok_or()



### Option - Or

<cb>= <v>option_1<>.or(<v>option_2<>)<>

Returns:

<cb>Option\<<v>T<>><>


Returns the option. If <c>None<>, returns option 2.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.or">or()<>
@
@ when none, if
@ option.or(), .or()



### Option - Or Else

<cb>= <v>option_1<>.or_else(<v>function_2<>)<>

Returns:

<cb>Option\<<v>T<>><>


Returns the option. If <c>None<>, calls a function and returns its value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.or_else">or_else()<>
@
@ apply function when none, if, convert to, conversion into
@ option.or_else(), .or_else()



### Option - Replace

<cb>= <v>option_1<>.replace(<v>new_value<>)<>

Returns:

<cb>Option\<<v>T<>><>


Replaces the option value with the new value and then returns the original value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.replace">replace()<>
@
@ swap
@ option.replace(), .replace()



### Option - Take

<cb>= <v>option_1<>.take()<>

Returns:

<cb>Option\<<v>T<>><>


Returns the option value and then sets the option to <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.take">take()<>
@
@ set to none
@ option.take(), .take()



### Option - Take If

<cb>= <v>option_1<>.take_if(<v>predicate_fn<>)<>

Returns:

<cb>Option\<<v>Type<>><>


if the predicate returns true, returns the option value and sets the option to <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.take_if">take_if()<>
@
@ set to none
@ option.take_if(), .take_if()



## Option - Conversions
@
@ from, convert, conversion, converting
@ option-to, option-into, into, option-from


### Option - As Dereferenced

<cb>= <v>option_1<>.as_deref()<>

Return:

<cb>Option\<&\<<v>T<> as Deref>::Target><>


Returns an option with a reference to the original value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref">as_deref()<>
@
@ option.as_deref(), .as_deref()



### Option - As Dereferenced Mut

<cb>= <v>option_1<>.as_deref_mut()<>

Return:

<cb>Option\<&mut \<<v>T<> as Deref>::Target><>


Returns a new option with a mutable reference to the original value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.as_deref_mut">as_deref_mut()<>
@
@ Mutable
@ option.as_deref(), .as_deref()



### Option - As Reference

<cb>= <v>option_1<>.as_ref()<>

Returns:

<cb>Option\<&<v>T<>><>


Converts <c>&Option\<<v>T<>><> into <c>Option\<&<v>T<>><>.

Allows you to borrow the interior value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.as_ref">as_ref()<>
@
@ borrow
@ option.as_ref(), .as_ref(),



### Option - As Reference Mut

<cb>= <v>option_1<>.as_mut()<>

Returns:

<cb>Option\<&mut <v>T<>><>


Converts <c>&Option\<<v>T<>><> into <c>Option\<&mut <v>T<>><>.

Allows you to mutably borrow the interior value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.as_mut">as_mut()<>
@
@ Mutable, borrow
@ option.as_mut(), .as_mut()



### Option - To Result

<cb>= <v>option_1<>.ok_or(<v>error<>)<>

Returns:

<cb>Result\<<v>T<>, <v>E<>><>


Converts an option into a result.

The ok_or() clause handles values that are <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or">ok_or()<>
@
@ option.ok_or()



### Option - To Result Using Function

<cb>= <v>option_1<>.ok_or_else(|| <v>error_function<>)<>

Returns:

<cb>Result\<<v>T<>, <v>E<>><>


Converts an option into a result.

The ok_or_else() clause calls the function when values are <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/enum.Option.html#method.ok_or_else">ok_or_else()<>
@
@ option.ok_or()



## Option - Patterns


### Option - If Let Some

<cb>if let Some(<v>value<>) = <v>option_1<> {
	<v>...<>
}<>


Executes the if statement only when the option contains a value.
@
@ some()



### Option - Match

<cb>match <v>optional_1<> {
	Some(<v>value<>) => {
		<v>...<>
	}
	None => {
		<v>...<>
	}
}<>


Use <c>match<> to process an <c>Option<> variable.


Example:

<cb>let <v>optional_int<> = Some(4);

match <v>optional_int<> {
	Some(<v>value<>) => {
		println!("Optional value is {}.", <v>value<>);
	}
	None => {
		println!("Optional value is None.");
	}
}

<#>// Prints "Optional value is 4."<><>
@
@ Some(), None



### Option - Propagate None

<cb><v>option_1<>?<>

Usage:

<cb>fn <v>some_function<> -> Option\<<v>T<>> {
	let <v>value<> = <v>function_returning_an_option<>()?;
}<>


Returns a none immediately without needing a <c>return<>.
@
@ ?



# Result

<cb>Result\<<v>Type<>, <v>Error<>><>

Type:

<cb>std::result::Result<>

Enum Variants:

<cb>pub enum Result\<<v>T<>, <v>E<>> {
    Ok(<v>T<>),
    Err(<v>E<>),
}<>


Use to return a data or an error from a function.

Result is an enum with 2 values: <c>Ok()<>, <c>Err()<>.
Return a good result with <c>Ok()<>.
Return an error with <c>Err()<>.
Err requires an error object be returned with the error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>
Rust Docs: <l https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok>Ok<> | <l https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err>Err<>
@
@ Ok(), Err()
@ results, result-only, results-only, res-only
@ standard enums types
@ std-enum-types, standard-enum-types, system-enum-types, sys-enum-types
@ std::result::Result, result::Result, ::result


## Result - Basics

Type:

<cb>let <v>result_1<>: Result\<<v>T<>, <v>E<>> = <v>...<>;<>

Create:

<cb>let <v>result_1<> = Ok(<v>value_1<>);
let <v>result_2<> = Err(<v>error_1<>);<>

If Ok:

<cb>if let Ok(<v>value<>) = <v>result_1<> {
	<v>...<> = <v>value<>;
}<>

Match:

<cb>match <v>result_1<> {
	Ok(<v>value<>) => <v>...<>,
	Err(<v>error<>) => <v>...<>
}<>

Function Return:

<cb>fn <v>some_function<>() -> Result\<<v>Type<>, <v>Error<>> {

	<#>// Return good result:<>
	return Ok(<v>value<>);

	<#>// Return error:<>
	return Err(<v>error<>);
}<>

Propagate Error:

<cb>fn <v>call_some_function<>() -> Result\<<v>Type<>, <v>Error<>> {

	<#>// Return Error with ?<>
	<v>...<> = <v>some_function<>()?;
	<v>...<>
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>



## Result - Create
@
@ define, new, instantiate


### Result - Create Result Value

<cb>= Ok(<v>value<>)<>

Usage:

<cb>fn <v>some_function<>() -> Result\<<v>Type<>, <v>Error<>> {
	return Ok(<v>value<>);
}<>


Creates an <c>Result<> variable with a value.


Example:

<cb>return Ok(<v>42<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>::<l https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok>Ok<>
@
@ Ok()



### Result - Create Error

<cb>= Err(<v>error<>)<>

Usage:

<cb>fn <v>some_function<>() -> Result\<<v>Type<>, <v>Error<>> {
	return Err(<v>error<>);
}<>


Creates an error <c>Result<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>::<l https://doc.rust-lang.org/std/result/enum.Result.html#variant.Ok>Err<>
@
@ err(), error()



## Result - Properties


### Result - Is Error?

<cb>= <v>result_1<>.is_err()<>

Returns:

<cb>bool<>


Returns true if the result is an error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l https://doc.rust-lang.org/std/result/enum.Result.html#method.is_err>is_err()<>
@
@ result.is_err(), .is_err()



### Result - Is OK?

<cb>= <v>result_1<>.is_ok()<>

Returns:

<cb>bool<>


Returns true if the result is successful.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l https://doc.rust-lang.org/std/result/enum.Result.html#method.is_ok>is_ok()<>
@
@ result.is_ok(), .is_ok()



## Result - Operations
@
@ resultss, result-only, results-only
@ std::result::Result


### Result - And

<cb>= <v>result_1<>.and(<v>result_2<>)<>

Returns:

<cb>Result\<<v>U<>, <v>E<>><>


Returns result 2 when result 1 has a value. Otherwise, return the error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.and">and()<>
@
@ result.and(), .and()



### Result - And Then

<cb>= <v>result_1<>.and_then(<v>function_2<>)<>

Returns:

<cb>Result\<<v>U<>, <v>E<>><>


Calls function 2 when option 1 has a value. Otherwise, return the error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then">and_then()<>
@
@ apply function
@ result.and_then(), .and_then()



### Result - Get Error

<cb>= <v>result_1<>.err()<>

Returns:

<cb>Option\<<v>E<>><>


Returns the error value or None.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.err">err()<>
@
@ result.err(), .err()



### Result - Get Error or Panic

<cb>= <v>result_1<>.expect_err("<v>panic error<>")<>

Returns:

<cb>Option\<<v>E<>><>


Returns the error value.

Panics if result is OK.
Returns the custom panic message when expect_err() panics.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.expect_err">expect_err()<>
@
@ expect
@ result.expect_err(), .expect_err()



### Result - Get OK

<cb>= <v>result_1<>.ok()<>

Returns:

<cb>Option\<<v>T<>><>


Returns the ok value or None.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.ok">ok()<>
@
@ result.ok(), .ok()



### Result - Get Value

<cb>= <v>result_1<>.unwrap()<>

Returns:

<cb><v>T<><>


Returns the value.


Will panic if the result is an error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap">unwrap()<>
@
@ unwrap
@ result.unwrap(), .unwrap()



### Result - Get Value Or Default

<cb>= <v>result_1<>.unwrap_or(<v>default<>)<>

Returns:

<cb><v>T<><>


Returns a predetermined value when the result is an error.
Otherwise returns the wrapped value.


Will panic if the result is an error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or>unwrap_or()<>
@
@ unwrap or, substitute, or else
@ result.unwrap_or(), .unwrap_or()



### Result - Get Value Or Call Function

<cb>= <v>result_1<>.unwrap_or_else(<v>else_function<>)<>

Returns:

<cb><v>T<><>


Returns the value from a function if the result is an error.
Otherwise returns the wrapped value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.unwrap_or_else">unwrap_or_else()<>
@
@ unwrap or else, apply function
@ result.unwrap_or_else(), .unwrap_or_else()



### Result - Get Value with Panic Message

<cb>= <v>result_1<>.expect("<v>panic message<>")<>

Returns:

<cb><v>T<><>


Returns the value.

Will panic if the result is an error.
Returns the custom panic message when an error.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.expect">expect()<>
@
@ unwrap, or else
@ result.expect(), .expect()



### Result - Iter

<cb>= <v>result_1<>.iter()<>

Returns:

<cb>Iter\<<v>T<>><>


Returns the result as an iterator.

Ok returns 1 result.
Err returns no results.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.iter">iter()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/struct.Iter.html">Iter<>
@
@ get iterator
@ result.iter(), .iter()



### Result - Iter Mut

<cb>= <v>result_1<>.iter_mut()<>

Returns:

<cb>IterMut\<<v>T<>><>


Returns the result as an iterator.

Ok returns 1 result.
Err returns no results.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.iter_mut">iter_mut()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/option/index.html">option<>::<l "https://doc.rust-lang.org/std/option/enum.Option.html">Option<>.<l "https://doc.rust-lang.org/std/option/struct.IterMut.html">IterMut<>
@
@ get mutable iterator
@ result.iter_mut(), .iter_mut()



### Result - Map

<cb>= <v>result_1<>.map(<v>map_function<>)

= <v>result_1<>.map(|<v>value<>| <v>...<> )<>

Returns:

<cb>Result\<<v>U<>, <v>E<>><>


Maps the wrapped value from one type to another.

Errors are returned as is.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.map">map()<>
@
@ apply function, convert to, conversion into
@ result.map(), .map()



### Result - Map Error

<cb>= <v>result_1<>.map_err(<v>error_mapping_function<>)

= <v>result_1<>.map_err(|<v>error<>| <v>...<> )<>

Returns:

<cb>Result\<<v>U<>, <v>E2<>><>


Maps errors from one type to another.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.map_err">map_err()<>
@
@ apply function, convert to, conversion into, if error
@ result.map_err(), .map_err()



### Result - Map Or

<cb>= <v>result_1<>.map_or(<v>default<>, <v>map_function<>)

= <v>result_1<>.map_or(<v>default<>, |<v>value<>| <v>...<> )<>

Returns:

<cb><v>U<><>


If result then apply a function. But if error, return default.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.map_or">map_or()<>
@
@ apply function, convert to, conversion into, if error
@ result.map_or(), .map_or()



### Result - Or

<cb>= <v>result_1<>.or(<v>result_2<>)<>

Returns:

<cb>Result\<<v>T<>, <v>F<>><>


Returns the result. If <c>Err<>, returns result 2.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.or">or()<>
@
@ when error, if
@ result.or(), .or()



### Result - Or Else

<cb>= <v>result_1<>.or_else(<v>function_2<>)<>

Returns:

<cb>Result\<<v>T<>, <v>F<>><>


Returns the result. If <c>Err<>, calls a function and returns its value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.or_else">or_else()<>
@
@ apply function when error, if, convert to, conversion into
@ result.or_else(), .or_else()



## Result - Convert
@
@ from-result, result-to, result-into, into


### Result - As Dereferenced

<cb>= <v>result_1<>.as_deref()<>

Return:

<cb>Result\<&\<<v>T<> as Deref>::Target, &<v>E<>><>


Returns a new result with a reference to the actual result value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.as_deref">as_deref()<>
@
@ result.as_deref(), .as_deref()



### Result - As Dereferenced Mut

<cb>= <v>result_1<>.as_deref_mut()<>

Return:

<cb>Result\<&mut \<<v>T<> as Deref>::Target, &mut <v>E<>><>


Returns a new result with a mutable reference to the actual result value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.as_deref_mut">as_deref_mut()<>
@
@ Mutable
@ result.as_deref(), .as_deref()



### Result - As Reference

<cb>= <v>result_1<>.as_ref()<>

Returns:

<cb>Result\<&<v>T<>, &<v>E<>><>


Converts <c>&Result\<<v>T<>, <v>E<>><> into <c>Result\<&<v>T<>, &<v>E<>><>.

Allows you to borrow the interior value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.as_ref">as_ref()<>
@
@ borrow
@ result.as_ref(), .as_ref(),



### Result - As Reference Mut

<cb>= <v>result_1<>.as_mut()<>

Returns:

<cb>Result\<&mut <v>T<>, &mut <v>E<>><>


Converts <c>&Result\<<v>T<>, <v>E<>><> into <c>Result\<&mut <v>T<>, &mut <v>E<>><>.

Allows you to mutably borrow the interior value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.as_mut">as_mut()<>
@
@ Mutable, borrow
@ result.as_mut(), .as_mut()


### Result - To Option

<cb>= <v>result_1<>.ok()<>

Returns:

<cb>Option\<<v>T<>><>


Converts a result into an option.

Errors are returned as <c>None<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>.<l "https://doc.rust-lang.org/std/result/enum.Result.html#method.ok">ok()<>
@
@ result.ok(), to-option



## Result - Patterns


### Result - If Let Error

<cb>if let Err(<v>error<>) = <v>result_1<> {
	<v>...<>
}<>



### Result - If Let OK

<cb>if let Ok(<v>value<>) = <v>result_1<> {
	<v>...<>
}<>



### Result - Match

<cb>match <v>result_1<> {
	Ok(<v>value<>) => {
		<v>...<>
	}
	Err(<v>error<>) => {
		<v>...<>
	}
}<>


Use <c>match<> to process an <c>Result<> variable.
@
@ Ok(), Err()



### Result - Propagate Err

<cb><v>result_1<>?<>

Usage:

<cb>fn <v>some_function<> -> Result\<<v>T<>, <v>E<>> {
	<v>some_subfunction<>()?;
}<>


Returns an error immediately without needing a <c>return<>.
@
@ ?, err()



# BinaryHeap

<cb>BinaryHeap\<<v>Type<>><>

Type:

<cb>std::collections::BinaryHeap<>


A priority queue, or sort of value importance.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/struct.BinaryHeap.html">BinaryHeap<>
@
@ binaryheap-only, binaryheap-only, priority, binary heap
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ std::collections::binaryheap, collections::binaryheap, ::binaryheap



# BTreeMap

<cb>BinaryMap\<<v>Key<>, <v>Value<>><>

Type:

<cb>std::collections::BTreeMap<>

A Sorted Map

Sorts on the item order.
Stored items must implement the <l ord-only>Ord trait<>.

Implementation:
Uses arrays and 'performs naive linear search'.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html">BTreeMap<>
@
@ btree-only, btrees-only,  btreemap-only, btreemaps-only, sorted, ordered, tree, treemap
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ std::collections::btreemap, collections::btreemap, ::btreemap


## BTreeMap - Create
@
@ define, new, instantiate


### BTreeMap - Create

<cb>= BTreeMap::new()<>

Usage:

<cb>use std::collections::BTreeMap;

let mut <v>btree_map_1<>: BTreeMap\<<v>Key<>, <v>Value<>> = BTreeMap::new();<>

Returns:

<cb>BTreeMap\<<v>Key<>, <v>Value<>><>


Creates an instance of BTreeMap.


Example:

<cb>use std::collections::BTreeMap;

let mut <v>btree_map_1<> = BTreeMap::new();

<v>btree_map_1<>.insert("<v>one<>", "<v>Value 1<>");
<v>btree_map_1<>.insert("<v>two<>", "<v>Value 2<>");

let <v>value<> = &<v>btree_map_1<>.get(&"<v>one<>");

println!("{}", <v>value<>.unwrap());

<#>// Prints: "Value 1"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.new">new()<>
@
@ new, define, instantiate
@ btreemap::new(), new()
@ _model_


### BTreeMap - Create From Array

<cb>= BTreeMap::from(<v>array_1<>)<>

<cb>= BTreeMap::from([
	(<v>key_1<>, <v>value_1<>),
	(<v>key_2<>, <v>value_2<>),
	(<v>key_3<>, <v>value_3<>),
	<v>...<>
])<>


Creates a BTreeMap from a list of key value tuples.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.from">from()<>
@
@ btreemap::from(), from()



## BTreeMap - Properties



### BTreeMap - Contains Key

<cb>= <v>btree_map_1<>.contains_key(<v>key<>)<>


Returns true when the btreemap contains the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.contains_key">contains_key()<>
@
@ btreemap.contains_key(), .contains_key()



### BTreeMap - Entry

<cb>= <v>btree_map_1<>.entry(<v>key<>)<>

Returns:

<cb>Entry\<<v>K<>, <v>V<>><>


Returns the btreemap entry for the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.entry">entry()<>
@
@ btreemap.entry(), .entry()



### BTreeMap - Get

<cb>= <v>btree_map_1<>.get(<v>key<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the value for the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get">get()<>
@
@ item, element, value
@ btreemap.get(), .get()



### BTreeMap - Get Mutable

<cb>= <v>btree_map_1<>.get_mut(<v>key<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the mutable value for the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.get_mut">get_mut()<>
@
@ item, element, value, mutable
@ btreemap.get_mut(), .get_mut()



### BTreeMap - Get Keys

<cb>= <v>btree_map_1<>.keys()<>

Returns:

<cb>Keys\<<v>Key<>, <v>Value<>> 	<#>// Iterator<><>


Returns an iterator for all keys.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.keys">keys()<>
@
@ iterator, iterate, all, every
@ btreemap.keys(), .keys()



### BTreeMap - Get Values

<cb>= <v>btree_map_1<>.values()<>

Returns:

<cb>Values\<<v>Key<>, <v>Value<>> 	<#>// Iterator<><>


Returns an iterator for all values.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.values">values()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/btree_map/index.html">btree_map<>::<l "https://doc.rust-lang.org/std/collections/btree_map/struct.Values.html">Values<>
@
@ items, elements, values, all, every
@ iterator, iterate
@ btreemap.values(), .values()



### BTreeMap - Get Mutable Values

<cb>= <v>btree_map_1<>.values_mut()<>

Returns:

<cb>ValuesMut\<<v>Key<>, <v>Value<>> 	<#>// Iterator<><>


Returns a mutable iterator for all values.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.values_mut">values_mut()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/btree_map/index.html">btree_map<>::<l "https://doc.rust-lang.org/std/collections/btree_map/struct.ValuesMut.html">ValuesMut<>
@
@ items, elements, values, all, every
@ iterator, iterate
@ btreemap.values_mut(), .values_mut()



### BTreeMap - Get Range

<cb>= <v>btree_map_1<>.range(<v>range<>)<>

<cb>= <v>btree_map_1<>.range((<v>min_condition<>, <v>max_condition<>))<>

Usage:

<cb>use std::ops::Bound::Included;
= <v>btree_map_1<>.range((Included(<v>min<>), Included(<v>max<>))<>

<cb>use std::ops::Bound::Excluded;
= <v>btree_map_1<>.range((Excluded(<v>min<>), Excluded(<v>max<>))<>

Returns:

<cb>Range\<<v>Key<>, <v>Value<>><>


Returns a subset of a BTreeMap.

Use the Bound enum to define min and max values and whether they are inclusive or exclusive.


Example:

<cb>use std::collections::BTreeMap;
use std::ops::Bound::Included;

let mut items: BTreeMap\<String, String> = BTreeMap::new();

<v>items<>.insert("alpha".to_string(), "α".to_string());
<v>items<>.insert("beta".to_string(), "β".to_string());
<v>items<>.insert("chi".to_string(), "χ".to_string());
<v>items<>.insert("delta".to_string(), "δ".to_string());
<v>items<>.insert("epsilon".to_string(), "ε".to_string());

let <v>range<> = <v>items<>.range(
		(Included("beta".to_string()), Included("delta".to_string())));

while let Some((<v>key<>, <v>value<>)) = <v>range<>.next() {
	println!("{} ({})", <v>value<>, <v>key<>);
}

<#>// Prints:
//
//    β (beta)
//    χ (chi)
//    δ (delta)<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.range">range()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/btree_map/index.html">btree_map<>::<l "https://doc.rust-lang.org/std/collections/btree_map/struct.Range.html">Range<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/enum.Bound.html">Bound<>
@
@ within, between, subset
@ btreemap.range(), .range()
@ std::collections::btree_map::Range, collections::btree_map::Range, btree_map::Range
@ std::ops::Bound, std::ops::Bound::Included, Bound::included, included, std::ops::Bound::excluded, Bound::excluded, excluded



### BTreeMap - Is Empty?

<cb>= <v>btree_map_1<>.is_empty()<>

Returns:

<cb>bool<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.is_empty">is_empty()<>
@
@ btreemap.is_empty(), .is_empty()



### BTreeMap - Iterate

<cb>for (<v>key<>, <v>value<>) in <v>btree_map_1<>.iter() {
	<v>...<>
}<>


Iterates over the key value pairs in the BTreeMap.

Takes O(capacity) time to execute (vs the shorter O(length) time).
Prefer <l "?q=btreemap-only">BTreeMap<> if doing this a lot or on a large data set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.iter">iter()<>
@
@ over elements, over items, over key value pairs
@ btreemap.iter(), .iter()



### BTreeMap - Length

<cb>= <v>btree_map_1<>.len()<>

Returns:

<cb>usize<>


Returns the number of items in the BTreeMap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.len">len()<>
@
@ count, length, size
@ btreemap.len(), .len()



## BTreeMap - Operations


### BTreeMap - Clear

<cb><v>btree_map_1<>.clear();<>

Removes all elements from the btreemap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.clear">clear()<>
@
@ remove all, delete all
@ btreemap.clear(), .clear()



### BTreeMap - Insert

<cb><v>btree_map_1<>.insert(<v>key<>, <v>value<>);<>


Inserts an item into the btreemap.

Will overwrite existing item if one exists.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.insert">insert()<>
@
@ add
@ item, element, value
@ btreemap.insert(), .insert()



### BTreeMap - Remove

<cb>= <v>btree_map_1<>.remove(<v>key<>)<>

Returns:

<cb>Option\<Value><>


Removes and returns the item with the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.remove">remove()<>
@
@ btreemap.remove(), .remove()
@ delete
@ item, element, value



## BTreeMap - Patterns


### BTreeMap - Insert If New

<cb><v>btree_map_1<>.entry(<v>key<>).or_insert(<v>value<>)<>

Returns:

<cb>&<v>V<><>


Inserts the key, value for the entry if the key is not already present.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.entry">entry()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/btree_map/index.html">btree_map<>::<l https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html>Entry<>.<l "https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_insert">or_insert()<>
@
@ not present
@ btreemap.entry(), .entry(), .entry().or_insert(), entry.or_insert(), .or_insert()



### BTreeMap - Insert Default If New

<cb><v>btree_map_1<>.entry(<v>key<>).or_default()<>

Returns:

<cb>&<v>V<><>


Sets the default value for the entry if one is not already present.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.entry">entry()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/btree_map/index.html">btree_map<>::<l https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html>Entry<>.<l "https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_default">or_default()<>
@
@ not present
@ btreemap.entry(), .entry(), .entry().or_default(), entry.or_default(), .or_default()


### BTreeMap - Update or Insert

<cb><v>value<> = <v>btree_map_1<>.entry(<v>key<>).or_insert(<v>value<>)
*<v>value<> = <v>updated_value<><>


Updates the value if it exists.

Creates a new value if it does not.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeMap.html>BTreeMap<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeMap.html#method.entry">entry()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/btree_map/index.html">btree_map<>::<l https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html>Entry<>.<l "https://doc.rust-lang.org/std/collections/btree_map/enum.Entry.html#method.or_insert">or_insert()<>
@
@ not present
@ btreemap.entry(), .entry(), .entry().or_insert(), entry.or_insert(), .or_insert()



# BTreeSet

<cb>BTreeSet\<<v>Type<>><>

Type:

<cb>std::collections::BTreeSet<>


A Sorted Set

Sorts on the item order.
Stored items must implement the <l ord-only>Ord trait<>.

Implementation:
Uses arrays and 'performs naive linear search'.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html">BTreeSet<>
@
@ btree-only, btrees-only,  btreeset-only, btreesets-only, sorted, ordered, tree, treeset
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ std::collections::btreeset, collections::btreeset, ::btreeset



## BTreeSet - Create
@ new, define, instantiate


### BTreeSet - Create

<cb>= BTreeSet::new()<>

Full Usage:

<cb>let <v>set_1<>: BTreeSet\<<v>T<>> = BTreeSet::new();<>

Returns:

<cb>std::collections::BTreeSet<>


Creates a new instance of <c>BTreeSet<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.new">new()<>
@
@ set::new()


### BTreeSet - Create From Array

<cb>= BTreeSet::from(<v>array_1<>)<>

<cb>= BTreeSet::from([
	(<v>value_1<>),
	(<v>value_2<>),
	(<v>value_3<>),
	<v>...<>
])<>


Creates a <c>BTreeSet<> from a list of key value tuples.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.from">from()<>
@
@ set::from(), from()



## BTreeSet - Properties


### BTreeSet - Contains

<cb>= <v>btree_set_1<>.contains(<v>value<>)<>

Returns:

<cb>bool<>


Returns true if the set contains the value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.contains">contains()<>
@
@ btreeset.contains(), .contains()



### BTreeSet - Get

<cb>= <v>btree_set_1<>.get(<v>value<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the item in the set matching the given value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.get">get()<>
@
@ item, element, value
@ btreeset.get(), .get()



### BTreeSet - Get Values

<cb>= <v>btree_set_1<>.into_iter().collect()<>


Returns:

<cb>Option\<&<v>Value<>><>


Returns all values in the set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.into_iter">into_iter()<>
@
@ items, elements, values
@ btreeset.get(), .get()



### BTreeSet - Get or Insert

<cb>= <v>btree_set_1<>.get_or_insert(<v>value<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the value if it exists. It adds the value if not present.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.get_or_insert">get_or_insert()<>
@
@ item, element, value
@ add if not present, does not exist, doesn't exist
@ btreeset.get_or_insert(), .get_or_insert()



### BTreeSet - Is Empty?

<cb>= <v>btree_set_1<>.is_empty()<>

Returns:

<cb>bool<>


Returns true if the set has no elements.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.is_empty">is_empty()<>
@
@ btreeset.is_empty(), .is_empty()



### BTreeSet - Iterate

<cb>for (<v>value<>) in <v>btree_set_1<>.iter() {
	<v>...<>
}<>


Iterates over the key value pairs in the BTreeSet.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.iter">iter()<>
@
@ over elements, over items, over key value pairs
@ btreeset.iter(), .iter()



### BTreeSet - Length

<cb>= <v>btree_set_1<>.len()<>

Returns:

<cb>usize<>


Returns the number of items in the BTreeSet.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.len">len()<>
@
@ count, length, size
@ btreeset.len(), .len()



## BTreeSet - Operations


### BTreeSet - Clear

<cb><v>btree_set_1<>.clear();<>

Removes all elements from the BTreeSet.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.clear">clear()<>
@
@ remove all, delete all
@ btreeset.clear(), .clear()



### BTreeSet - Extend

<cb><v>btree_set_1<>.extend(<v>btree_set_2<>);<>

Returns:

<cb>bool<>


Adds all items from set 2 into set 1.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.extend">extend()<>
@
@ add all, append, join
@ item, element, value
@ btreeset.extend(), .extend()



### BTreeSet - Insert

<cb><v>btree_set_1<>.insert(<v>value<>);<>

Returns:

<cb>bool<>


Inserts an item into the BTreeSet.

Returns true if the value is new.
Returns false if the value already exists.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.insert">insert()<>
@
@ add
@ item, element, value
@ btreeset.insert(), .insert()



### BTreeSet - Remove

<cb>= <v>btree_set_1<>.remove(<v>value<>)<>

Returns:

<cb>bool<>


Removes and returns the item with the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.remove">remove()<>
@
@ btreeset.remove(), .remove()
@ delete
@ item, element, value



## BTreeSet - Set Properties


### BTreeSet - Is Disjoint

<cb>= <v>btree_set_1<>.is_disjoint(<v>btree_set_2<>)<>

Returns:

<cb>bool<>


Tests if set 1 and set 2 are disjoint (no elements in common).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.is_disjoint">is_disjoint()<>
@
@ btreeset.is_disjoint(), .is_disjoint()



### BTreeSet - Is Subset

<cb>= <v>btree_set_1<>.is_subset(<v>btree_set_2<>)<>

Returns:

<cb>bool<>


Tests is set 1 is a subset of set 2 (all elements in set 1 are contained in set 2).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.is_subset">is_subset()<>
@
@ contains
@ btreeset.is_subset(), .is_subset()



### BTreeSet - Is Superset

<cb>= <v>btree_set_1<>.is_superset(<v>btree_set_2<>)<>

Returns:

<cb>bool<>


Tests is set 1 is a superset of set 2 (all elements in set 2 are contained in set 1).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.is_superset">is_superset()<>
@
@ contains
@ btreeset.is_superset(), .is_superset()



## BTreeSet - Set Operations



### BTreeSet - Difference

<cb>= <v>btree_set_1<>.difference(<v>btree_set_2<>).collect()<>

Returns:

<cb>BTreeSet<>


Returns only those elements that are in set 1 but not in set 2.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.difference">difference()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/btree_set/index.html>btree_set<>.<l "https://doc.rust-lang.org/std/collections/btree_set/struct.Difference.html">Difference()<>
@
@ elements, values, items
@ remove matching, minus, subtraction, delet, exclude, exclusion
@ btreeset.difference(), .difference()



### BTreeSet - Intersection

<cb>= <v>btree_set_1<>.intersection(<v>btree_set_2<>).collect()<>

Returns:

<cb>BTreeSet<>


Returns only those elements that are in both sets.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.intersection">intersection()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/btree_set/index.html>btree_set<>.<l "https://doc.rust-lang.org/std/collections/btree_set/struct.Intersection.html">Intersection()<>
@
@ elements, values, items
@ conjuction, intersects, common
@ btreeset.intersection(), .intersection()



### BTreeSet - Symmetric Difference

<cb>= <v>btree_set_1<>.symmetric_difference(<v>btree_set_2<>).collect()<>

Returns:

<cb>BTreeSet<>


Returns only those elements that are either set 1 or set 2 but not both.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.symmetric_difference">symmetric_difference()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/btree_set/index.html>btree_set<>.<l "https://doc.rust-lang.org/std/collections/btree_set/struct.SymmetricDifference.html">SymmetricDifference()<>
@
@ elements, values, items
@ remove matching, minus
@ btreeset.symmetric_difference(), .symmetric_difference()



### BTreeSet - Union

<cb>= <v>btree_set_1<>.union(<v>btree_set_2<>).collect()<>

Returns:

<cb>BTreeSet<>


Returns a set of all elements of set 1 and set 2 without duplicates.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.BTreeSet.html>BTreeSet<>.<l "https://doc.rust-lang.org/std/collections/struct.BTreeSet.html#method.union">union()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/btree_set/index.html>btree_set<>.<l "https://doc.rust-lang.org/std/collections/btree_set/struct.Union.html">Union()<>
@
@ elements, values, items
@ merge, join, combine, add all, append
@ btreeset.union(), .union()



# HashMap

<cb>HashMap\<<v>Key<>, <v>Value<>><>

Type:

<cb>std::collections::HashMap<>


A collection of key values stored on the heap.


Types Must Implement:

<card>Eq + Hash traits<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>
@
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ hashmap-only, hashmaps-only, hashmaps
@ std::collections::HashMap, collections::HashMap, ::HashMap


## HashMap - Create
@
@ define, new, instantiate


### HashMap - Create

<cb>= HashMap::new()<>

Usage:

<cb>use std::collections::HashMap;

let mut <v>hashmap_1<>: HashMap\<<v>Key<>, <v>Value<>> = HashMap::new();<>

Returns:

<cb>HashMap\<<v>Key<>, <v>Value<>><>


Creates an instance of HashMap.


Example:

<cb>use std::collections::HashMap;

let mut <v>hashmap_1<> = HashMap::new();

<v>hashmap_1<>.insert("<v>one<>", "<v>Value 1<>");
<v>hashmap_1<>.insert("<v>two<>", "<v>Value 2<>");

let <v>value<> = &<v>hashmap_1<>.get(&"<v>one<>");

println!("{}", <v>value<>.unwrap());

<#>// Prints: "Value 1"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.new">new()<>
@
@ new, define, instantiate
@ hashmap::new(), new()
@ _model_


### HashMap - Create From Array

<cb>= HashMap::from(<v>array_1<>)<>

<cb>= HashMap::from([
	(<v>key_1<>, <v>value_1<>),
	(<v>key_2<>, <v>value_2<>),
	(<v>key_3<>, <v>value_3<>),
	<v>...<>
])<>

Usage:

<cb>use std::collections::HashMap;

let <v>hashmap_1<> = HashMap::from([
	(<v>key_1<>, <v>value_1<>),
	(<v>key_2<>, <v>value_2<>),
	(<v>key_3<>, <v>value_3<>),
	<v>...<>
]);<>


Creates a HashMap from a list of key value tuples.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.from">from()<>
@
@ hashmap::from(), from()



## HashMap - Properties


### HashMap - Capacity

<cb>= <v>hashmap_1<>.capacity(<v>key<>)<>

Returns:

<cb>usize<>


Returns the maximum number of items the HashMap can store.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.capacity">capacity()<>
@
@ hashmap.capacity(), .capacity()



### HashMap - Contains Key

<cb>= <v>hashmap_1<>.contains_key(<v>key<>)<>


Returns true when the hashmap contains the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.contains_key">contains_key()<>
@
@ hashmap.contains_key(), .contains_key()



### HashMap - Entry

<cb>= <v>hashmap_1<>.entry(<v>key<>)<>

Returns:

<cb>Entry\<<v>K<>, <v>V<>><>


Returns the hashmap entry for the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry">entry()<>
@
@ hashmap.entry(), .entry()



### HashMap - Get

<cb>= <v>hashmap_1<>.get(<v>key<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the value for the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get">get()<>
@
@ item, element, value
@ hashmap.get(), .get()



### HashMap - Get Mutable

<cb>= <v>hashmap_1<>.get_mut(<v>key<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the mutable value for the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.get_mut">get_mut()<>
@
@ item, element, value, mutable
@ hashmap.get_mut(), .get_mut()



### HashMap - Get Keys

<cb>= <v>hashmap_1<>.keys()<>

Returns:

<cb>Keys\<<v>Key<>, <v>Value<>> 	<#>// Iterator<><>


Returns an iterator for all keys.

Takes O(capacity) time to execute (vs the shorter O(length) time).
Prefer <l "?q=btreemap-only">BTreeMap<> if doing this a lot or on a large data set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.keys">keys()<>
@
@ iterator, iterate, all, every
@ hashmap.keys(), .keys()



### HashMap - Get Values

<cb>= <v>hashmap_1<>.values()<>

Returns:

<cb>Values\<<v>Key<>, <v>Value<>> 	<#>// Iterator<><>


Returns an iterator for all values.

Takes O(capacity) time to execute (vs the shorter O(length) time).
Prefer <l "?q=btreemap-only">BTreeMap<> if doing this a lot or on a large data set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.values">values()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/hash_map/index.html">hash_map<>::<l "https://doc.rust-lang.org/std/collections/hash_map/struct.Values.html">Values<>
@
@ items, elements, values, all, every
@ iterator, iterate
@ hashmap.values(), .values()



### HashMap - Get Mutable Values

<cb>= <v>hashmap_1<>.values_mut()<>

Returns:

<cb>ValuesMut\<<v>Key<>, <v>Value<>> 	<#>// Iterator<><>


Returns a mutable iterator for all values.

Takes O(capacity) time to execute (vs the shorter O(length) time).
Prefer <l "?q=btreemap-only">BTreeMap<> if doing this a lot or on a large data set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.values_mut">values_mut()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/hash_map/index.html">hash_map<>::<l "https://doc.rust-lang.org/std/collections/hash_map/struct.ValuesMut.html">ValuesMut<>
@
@ items, elements, values, all, every
@ iterator, iterate
@ hashmap.values_mut(), .values_mut()



### HashMap - Is Empty?

<cb>= <v>hashmap_1<>.is_empty()<>

Returns:

<cb>bool<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.is_empty">is_empty()<>
@
@ hashmap.is_empty(), .is_empty()



### HashMap - Iterate

<cb>for (<v>key<>, <v>value<>) in <v>hashmap_1<>.iter() {
	<v>...<>
}<>


Iterates over the key value pairs in the HashMap.

Takes O(capacity) time to execute (vs the shorter O(length) time).
Prefer <l "?q=btreemap-only">BTreeMap<> if doing this a lot or on a large data set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.iter">iter()<>
@
@ over elements, over items, over key value pairs
@ hashmap.iter(), .iter()



### HashMap - Length

<cb>= <v>hashmap_1<>.len()<>

Returns:

<cb>usize<>


Returns the number of items in the hashmap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.len">len()<>
@
@ count, length, size
@ hashmap.len(), .len()



## HashMap - Operations


### HashMap - Clear

<cb><v>hashmap_1<>.clear();<>

Removes all elements from the hashmap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.clear">clear()<>
@
@ remove all, delete all
@ hashmap.clear(), .clear()



### HashMap - Insert

<cb><v>hashmap_1<>.insert(<v>key<>, <v>value<>);<>


Inserts an item into the hashmap.

Will overwrite existing item if one exists.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.insert">insert()<>
@
@ add
@ item, element, value
@ hashmap.insert(), .insert()



### HashMap - Remove

<cb>= <v>hashmap_1<>.remove(<v>key<>)<>

Returns:

<cb>Option\<Value><>


Removes and returns the item with the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.remove">remove()<>
@
@ hashmap.remove(), .remove()
@ delete
@ item, element, value



## HashMap - Patterns


### HashMap - Insert If New

<cb><v>hashmap_1<>.entry(<v>key<>).or_insert(<v>value<>)<>

Returns:

<cb>&<v>V<><>


Inserts the key, value for the entry if the key is not already present.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry">entry()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/hash_map/index.html">hash_map<>::<l https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html>Entry<>.<l "https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert">or_insert()<>
@
@ not present
@ hashmap.entry(), .entry(), .entry().or_insert(), entry.or_insert(), .or_insert()



### HashMap - Insert Default If New

<cb><v>hashmap_1<>.entry(<v>key<>).or_default()<>

Returns:

<cb>&<v>V<><>


Sets the default value for the entry if one is not already present.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry">entry()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/hash_map/index.html">hash_map<>::<l https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html>Entry<>.<l "https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_default">or_default()<>
@
@ not present
@ hashmap.entry(), .entry(), .entry().or_default(), entry.or_default(), .or_default()


### HashMap - Update or Insert

<cb><v>value<> = <v>hashmap_1<>.entry(<v>key<>).or_insert(<v>value<>)
*<v>value<> = <v>updated_value<><>


Updates the value if it exists.

Creates a new value if it does not.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashMap.html>HashMap<>.<l "https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.entry">entry()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/hash_map/index.html">hash_map<>::<l https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html>Entry<>.<l "https://doc.rust-lang.org/std/collections/hash_map/enum.Entry.html#method.or_insert">or_insert()<>
@
@ not present
@ hashmap.entry(), .entry(), .entry().or_insert(), entry.or_insert(), .or_insert()



# HashSet

<cb>HashSet\<<v>T<>><>

Type:

<cb>std::collections::HashSet<>

An Unordered Set of Values Stored on the Heap.


Types Must Implement:

<card>Eq + Hash traits<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>
@
@ hashset-only, hashsets-only, set
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ std::collections::HashSet, collections::HashSet, ::hashset



## HashSet - Create
@ new, define, instantiate


### HashSet - Create

<cb>= HashSet::new()<>

Full Usage:

<cb>use std::collections::HashSet;

let <v>set_1<>: HashSet\<<v>T<>> = HashSet::new();<>

Returns:

<cb>std::collections::HashSet<>


Creates a new instance of <c>HashSet<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.new">new()<>
@
@ hashset::new()


### HashSet - Create From Array

<cb>= HashSet::from(<v>array_1<>)<>

<cb>use std::collections::HashSet;

= HashSet::from([
	(<v>value_1<>),
	(<v>value_2<>),
	(<v>value_3<>),
	<v>...<>
])<>


Creates a <c>HashSet<> from a list of key value tuples.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.from">from()<>
@
@ hashset::from(), from()



## HashSet - Properties


### HashSet - Capacity

<cb>= <v>hashset_1<>.capacity()<>

Returns:

<cb>usize<>


Returns the maximum number of items the HashSet can store.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.capacity">capacity()<>
@
@ hashset.capacity(), .capacity()



### HashSet - Contains

<cb>= <v>hashset_1<>.contains(<v>value<>)<>

Returns:

<cb>bool<>


Returns true if the set contains the value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.contains">contains()<>
@
@ hashset.contains(), .contains()



### HashSet - Get

<cb>= <v>hashset_1<>.get(<v>value<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the item in the set matching the given value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.get">get()<>
@
@ item, element, value
@ hashset.get(), .get()



### HashSet - Get Values

<cb>= <v>hashset_1<>.into_iter().collect()<>


Returns:

<cb>Option\<&<v>Value<>><>


Returns all values in the set.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.into_iter">into_iter()<>
@
@ items, elements, values
@ hashset.get(), .get()



### HashSet - Get or Insert

<cb>= <v>hashset_1<>.get_or_insert(<v>value<>)<>

Returns:

<cb>Option\<&<v>Value<>><>


Returns the value if it exists. It adds the value if not present.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.get_or_insert">get_or_insert()<>
@
@ item, element, value
@ add if not present, does not exist, doesn't exist
@ hashset.get_or_insert(), .get_or_insert()



### HashSet - Is Empty?

<cb>= <v>hashset_1<>.is_empty()<>

Returns:

<cb>bool<>


Returns true if the set has no elements.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.is_empty">is_empty()<>
@
@ hashset.is_empty(), .is_empty()



### HashSet - Iterate

<cb>for (<v>value<>) in <v>hashset_1<>.iter() {
	<v>...<>
}<>


Iterates over the key value pairs in the HashSet.

Takes O(capacity) time to execute (vs the shorter O(length) time).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.iter">iter()<>
@
@ over elements, over items, over key value pairs
@ hashset.iter(), .iter()



### HashSet - Length

<cb>= <v>hashset_1<>.len()<>

Returns:

<cb>usize<>


Returns the number of items in the hashset.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.len">len()<>
@
@ count, length, size
@ hashset.len(), .len()



## HashSet - Operations


### HashSet - Clear

<cb><v>hashset_1<>.clear();<>

Removes all elements from the hashset.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.clear">clear()<>
@
@ remove all, delete all
@ hashset.clear(), .clear()



### HashSet - Extend

<cb><v>hashset_1<>.extend(<v>hashset_2<>);<>

Returns:

<cb>bool<>


Adds all items from hashset 2 into hashset 1.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.extend">extend()<>
@
@ add all
@ item, element, value, append, join
@ hashset.extend(), .extend()



### HashSet - Insert

<cb><v>hashset_1<>.insert(<v>value<>);<>

Returns:

<cb>bool<>


Inserts an item into the hashset.

Returns true if the value is new.
Returns false if the value already exists.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.insert">insert()<>
@
@ add
@ item, element, value
@ hashset.insert(), .insert()



### HashSet - Remove

<cb>= <v>hashset_1<>.remove(<v>value<>)<>

Returns:

<cb>bool<>


Removes and returns the item with the given key.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.remove">remove()<>
@
@ hashset.remove(), .remove()
@ delete
@ item, element, value



## HashSet - Set Properties


### HashSet - Is Disjoint

<cb>= <v>hashset_1<>.is_disjoint(<v>hashset_2<>)<>

Returns:

<cb>bool<>


Tests if hashset 1 and hashset 2 are disjoint (no elements in common).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.is_disjoint">is_disjoint()<>
@
@ hashset.is_disjoint(), .is_disjoint()



### HashSet - Is Subset

<cb>= <v>hashset_1<>.is_subset(<v>hashset_2<>)<>

Returns:

<cb>bool<>


Tests is hashset 1 is a subset of hashset 2 (all elements in hashset 1 are contained in hashset 2).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.is_subset">is_subset()<>
@
@ contains
@ hashset.is_subset(), .is_subset()



### HashSet - Is Superset

<cb>= <v>hashset_1<>.is_superset(<v>hashset_2<>)<>

Returns:

<cb>bool<>


Tests is hashset 1 is a superset of hashset 2 (all elements in hashset 2 are contained in hashset 1).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.is_superset">is_superset()<>
@
@ contains
@ hashset.is_superset(), .is_superset()



## HashSet - Set Operations



### HashSet - Difference

<cb>= <v>hashset_1<>.difference(<v>hashset_2<>).collect()<>

Returns:

<cb>HashSet<>


Returns only those elements that are in hashset 1 but not in hashset 2.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.difference">difference()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/hash_set/index.html>hash_set<>.<l "https://doc.rust-lang.org/std/collections/hash_set/struct.Difference.html">Difference()<>
@
@ elements, values, items
@ remove matching, minus, subtraction, delet, exclude, exclusion
@ hashset.difference(), .difference()



### HashSet - Intersection

<cb>= <v>hashset_1<>.intersection(<v>hashset_2<>).collect()<>

Returns:

<cb>HashSet<>


Returns only those elements that are in both sets.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.intersection">intersection()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/hash_set/index.html>hash_set<>.<l "https://doc.rust-lang.org/std/collections/hash_set/struct.Intersection.html">Intersection()<>
@
@ elements, values, items
@ conjuction, intersects, common
@ hashset.intersection(), .intersection()



### HashSet - Symmetric Difference

<cb>= <v>hashset_1<>.symmetric_difference(<v>hashset_2<>).collect()<>

Returns:

<cb>HashSet<>


Returns only those elements that are either hashset 1 or hashset 2 but not both.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.symmetric_difference">symmetric_difference()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/hash_set/index.html>hash_set<>.<l "https://doc.rust-lang.org/std/collections/hash_set/struct.SymmetricDifference.html">SymmetricDifference()<>
@
@ elements, values, items
@ remove matching, minus
@ hashset.symmetric_difference(), .symmetric_difference()



### HashSet - Union

<cb>= <v>hashset_1<>.union(<v>hashset_2<>).collect()<>

Returns:

<cb>HashSet<>


Returns a set of all elements of hashset 1 and hashset 2 without duplicates.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.HashSet.html>HashSet<>.<l "https://doc.rust-lang.org/std/collections/struct.HashSet.html#method.union">union()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/hash_set/index.html>hash_set<>.<l "https://doc.rust-lang.org/std/collections/hash_set/struct.Union.html">Union()<>
@
@ elements, values, items
@ merge, join, combine, add all, append
@ hashset.union(), .union()



## HashSet - Conversions
@
@ from, convert, conversion, converting
@ from hashset, hashset-to, hashset-into, into


### Hashset - To Vec

<cb>= <v>set_1<>.into_iter().collect();<>

Usage:

<cb>let <v>vec_2<>: Vec\<_> = <v>set_1<>.into_iter().collect();<>

Returns:

<cb>Vec\<<v>Type<>><>


Converts a HashSet into a Vec.
@
@ to-vec




# LinkedList

<cb>LinkedList\<<v>Type<>><>

Type:

<cb>std::collections::LinkedList<>


An linked list (ordered list).

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l "https://doc.rust-lang.org/std/collections/struct.LinkedList.html">LinkedList<>
@
@ linkedlist-only, linkedlist-only,  linklist-only, linklist-only, ordered, linked list
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ std::collections::linkedlist, collections::linkedlist, ::linkedlist



# VecDeque

<cb>VecDeque\<<v>Type<>, <v>Allocator<>><>

Type:

<cb>std::collections::VecDeque<>

Double Ended Queue


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>
@
@ vecdeque-only, vecdeques-only, vecdeck
@ double sided vec, double ended queue
@ Standard Collections
@ standard-collection-types, std-coll-types, std-col-types, system-collection-types, sys-coll-types, sys-col-types
@ std:collections::VecDeque, collections::VecDeque, ::vecdeque



## VecDeque - Create


### VecDeque - Create

<cb>= VecDeque::new()<>

Full Usage:

<cb>use std::collections::VecDeque;

let <v>vec_deque_1<>: VecDeque\<i32> = VecDeque::new();<>


Example:

<cb>use std::collections::VecDeque;

let mut <v>vec_deque_1<> = VecDeque::new();
<v>vec_deque_1<>.push_front("a");
<v>vec_deque_1<>.push_front("b");
<v>vec_deque_1<>.push_front("c");

for <v>item<> in <v>vec_deque_1<>.iter() {
	print!("{} ", <v>item<>);
}
println!();

<#>// Prints: "c b a "<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.new">new()<>
@
@ VecDeque::new()
@ new, define, instantiate



### VecDeque - Create From Vec

<cb>= VecDec::from(<v>vec_1<>)<>

Usage:

<cb>use std::collections::VecDeque;

let <v>vec_deque_1<> = VecDeque::from(vec![<v>item_1<>, <v>item_2<>, <v>...<>]);<>

Returns:

<cb>VecDeque\<<v>type<>><>


Creates a vecdeque from a vec.


Example:

<cb>use std::collections::VecDeque;

let <v>vec_1<> = vec!["<v>a<>", "<v>b<>", "<v>c<>"];
let <v>vec_deque_1<> = VecDeque::from(<v>vec_1<>);

for <v>item<> in <v>vec_deque_1<>.iter() {
	print!("{} ", <v>item<>);
}
println!();

<#>// Prints: "a b c "<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>
@
@ vec!, vec![]
@ new, define, instantiate



## VecDeque - Properties


### VecDeque - Contains?

<cb>= <v>vec_deque_1<>.contains(<v>item<>);<>


Returns true if the item exists in the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.contains">contains()<>
@
@ has, in, includes
@ item, element, value


### VecDeque - Get Back

<cb><v>vec_deque_1<>.back(<v>item<>);<>


Returns an item from the end of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.back">back()<>
@
@ vecdeque.back(), .back()


### VecDeque - Get Back Mutable

<cb><v>vec_deque_1<>.back_mut(<v>item<>);<>


Returns a mutable item from the end of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.back_mut">back_mut()<>
@
@ item, element, value, end, last
@ vecdeque.back_mut(), .back_mut()



### VecDeque - Get Front

<cb><v>vec_deque_1<>.front(<v>item<>);<>


Returns an item from the beginning of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.front">front()<>
@
@ item, element, value, beginning, first
@ vecdeque.front(), .front()



### VecDeque - Get Front Mutable

<cb><v>vec_deque_1<>.front_mut(<v>item<>);<>


Returns a mutable item from the beginning of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.front_mut">front_mut()<>
@
@ item, element, value
@ vecdeque.front_mut(), .front_mut()


### VecDeque - Get Item

<cb><v>vec_deque_1<>.get(<v>item<>);<>


Returns an item from the beginning of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.get">get()<>
@
@ item, element, value
@ by index, position
@ vecdeque.get(), .get()



### VecDeque - Get Item Mutable

<cb><v>vec_deque_1<>.get_mut(<v>item<>);<>


Returns a mutable item from the beginning of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.get_mut">get_mut()<>
@
@ item, element, value
@ by index, position
@ vecdeque.get_mut(), .get_mut()



### VecDeque - Is Empty

<cb>= <v>vec_deque_1<>.is_empty()<>

Returns:

<cb>Bool<>


Returns true when there are no items in the vec.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.is_empty">is_empty()<>
@
@ vecdeque.is_empty(), .is_empty()
@ no size, not.



### VecDeque - Length

<cb>= <v>vec_deque_1<>.len()<>

Returns:

<cb>usize<>


Returns the number of items in the VecDeque.


Example:

<cb>let <v>vec_deque_1<> = vecdeque!["<v>a<>", "<v>b<>", "<v>c<>"];

println!("Size {}.", <v>vec_deque_1<>.len());

<#>// Prints: "Size 3."<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.len">len()<>
@
@ count, length, size
@ vecdeque.len(), .len()



## VecDeque - Operations


### VecDeque - Append

<cb><v>vec_deque_1<>.append(<v>vec_decque_2<>);<>


Appends one queue to the end of another.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.append">append()<>
@
@ add all, insert
@ vecdeque.append(), .append()



### VecDeque - Clear

<cb><v>vec_deque_1<>.clear()<>


Clears all elements from the VecDeque.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.clear">clear()<>
@
@ remove all, delete all
@ vecdeque.clear(), .clear()



### VecDeque - Pop Front

<cb><v>vec_deque_1<>.pop_front(<v>item<>);<>


Removes and returns an item from the beginning of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.pop_front">pop_front()<>
@
@ item, value, element
@ beginning, first, get, retrieve, remove, delete
@ vecdeque.pop_front(), .pop_front()



### VecDeque - Pop Back

<cb><v>vec_deque_1<>.pop_back(<v>item<>);<>


Removes and returns an item from the end of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.pop_back">pop_back()<>
@
@ item, value, element
@ end, last, get, retrieve, remove, delete
@ vecdeque.pop_back(), .pop_back()


### VecDeque - Push Front

<cb><v>vec_deque_1<>.push_front(<v>item<>);<>


Adds an item to the beginning of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.push_front">push_front()<>
@
@ item, value, element
@ add, insert, beginning, first
@ vecdeque.push_front(), .push_front()



### VecDeque - Push Back

<cb><v>vec_deque_1<>.push_back(<v>item<>);<>


Adds an item to the end of the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.push_back">push_back()<>
@
@ item, value, element
@ Add, insert, append, end, last
@ vecdeque.push_back(), .push_back()



### VecDeque - Remove

<cb><v>vec_deque_1<>.remove(<v>index<>);<>

Returns:

<cb>Option\<<v>T<>><>


Removes an item from any position in the queue.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/collections/index.html">collections<>::<l https://doc.rust-lang.org/std/collections/struct.VecDeque.html>VecDeque<>.<l "https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.remove">remove()<>
@
@ item, value, element
@ delete
@ vecdeque.remove(), .remove()



# Smart Pointers

Smart Pointers Traits:

<cb><l "?q=deref-only">Deref<>
<l "?q=drop-only">Drop<><>

Standard Library Smart Pointers:

<cb><l "?q=arc-only">Arc\<<v>T<>><>
<l "?q=box-only">Box\<<v>T<>><>
<l "?q=cell-only">Cell\<<v>T<>><>
<l "?q=cow-only">Cow\<<v>T<>><>
<l "?q=rc-only">Rc\<<v>T<>><>
<l "?q=ref-only">Ref\<<v>T<>><>
<l "?q=refcell-only">RefCell\<<v>T<>><>
<l "?q=refmut-only">RefMut\<<v>T<>><>
<l "?q=rwlock-only">RwLock\<<v>T<>><>
<l "?q=weak-only">Weak\<<v>T<>><><>


Rust Docs: <l "https://doc.rust-lang.org/book/ch15-00-smart-pointers.html">Smart Pointers<>
@
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only
@ wrapper-only, wrappers-only, wrap, memory management



# Arc

Type:

<cb>std::sync::Arc\<<v>T<>><>

Use:

<cb>use std::sync::Arc;<>


An Arc is a pointer to memory on the heap that can have multiple owners across multiple threads.

Immutable by default.
Arc is thread safe.

ARC = Atomically Reference Counted


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>
@
@ arc-only, arc\<t>
@ std::sync::arc, sync::arc, ::arc, arc
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



## Arc - Create

<cb>= Arc::new(<v>value<>)<>

Usage:

<cb>use std::sync::Arc;

let <v>arc_1<>: Arc\<<v>T<>> = Arc::new(<v>value<>);<>


Creates a new Arc pointer with data placed on the heap.


Example:

<cb>use std::sync::Arc;

let <v>arc_1<> = Arc::new(<v>42<>_i32);

println!("{}", <v>arc_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>.<l "https://doc.rust-lang.org/std/sync/struct.Arc.html#method.new">new()<>
@
@ define, instantiate, new
@ Arc::new(), new()



## Arc - Properties


### Arc - Get - Borrow (Immutable)

Use as if it were not wrapped in an Arc type.


Arc automatically dereferences into the underlying type.



### Arc - Get - Access Directly

Not possible.

You can not access the warpped value directly.
Use <c>try_unwrap()<>.
@
@ reference, data, element, value



### Arc - Reference Count

<cb>= Arc::strong_count(<v>arc_1<>);<>


Returns a count of all the arc instances for that arc item.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>.<l "https://doc.rust-lang.org/std/sync/struct.Arc.html#method.strong_count">strong_count()<>
@
@ strong count, instances, existing, current
@ arc::strong_count(), strong_count()



## Arc - Operations


### Arc - Clone Arc

<cb>= arc_1.clone()

= Arc::clone(<v>arc_1<>)<>


Either of these will create a new Arc instance pointing to the same underlying data.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>.<l "https://doc.rust-lang.org/std/sync/struct.Arc.html#method.clone">clone()<>
@
@ create, define, instantiate, new, create copy, share, 2nd
@ arc::clone(), arc.clone(), .clone()



### Arc - Clone Value

<cb>= (*<v>arc_1<>).clone()<>


Creates a copy of the wrapped item.
@
@ element, value, item, copy, unwrap, wrapped



### Arc - Get - Own

<cb>= <v>arc_1<>.try_unwrap()<>

Returns:

<cb>Result\<T, Arc\<T>><>


Returns the underlying item but destroys the arc.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>.<l "https://doc.rust-lang.org/std/sync/struct.Arc.html#method.try_unwrap">try_unwrap()<>
@
@ arc::try_unwrap(), arc.try_unwrap(), .try_unwrap()



## Arc - Patterns


### Arc - Mutable Value

Use Arc + Mutex:

<cb><l "?q=arc+mutex">Arc\<Mutex\<<v>T<>>><><>



## Arc - Extras


### Arc - Memory

<cb><t><|><|>┌───────────────────┐    ┌───────────────────────────┐
Arc\<<v>T<>><|>=<|>│ pointer:  usize ──│──▶ │ strong_count: AtomicUsize │
<|><|>└───────────────────┘    │ weak count:   AtomicUsize │
<|><|>                         │ item:         T           │
<|><|>                         └───────────────────────────┘<><>
@
@ memory size, memory-only, mem-only



# Arc + Mutex - Mutable Shared Value.

Type:

<cb>Arc\<Mutex\<<v>T<>>><>

Use:

<cb>use std::sync::Arc;
use std::sync::Mutex;<>


To make a thread safe shared mutable reference to a value, wrap the value in Arc, Mutex.
@
@ shared mutable value, thread safe, mutate
@ arc+mutex, mutex+arc



### Arc + Mutex - Create Mutable

<cb>= Arc::new(Mutex::new(<v>value<>));<>

Usage:

<cb>use std::sync::Arc;
use std::sync::Mutex;

= Arc::new(Mutex::new(<v>value<>));<>

Returns:

<cb>Arc\<Mutex\<<v>T<>>><>


Creates a thread safe mutable shared reference to a value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>.<l "https://doc.rust-lang.org/std/sync/struct.Arc.html#method.new">new()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Mutex.html>Mutex<>
@
@ arc::new(), new()



### Arc + Mutex - Get Mutable

<cb>= <v>arc_1<>.get_mut()<>

Returns:

<cb>Option\<&mut <v>T<>><>


Access the underlying data immutably.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>.<l "https://doc.rust-lang.org/std/sync/struct.Arc.html#method.get_mut">get_mut()<>
@
@ immutably
@ arc.get_mut(), .get_mut()



### Arc + Mutex - Get Mutable with Lock

<cb>= <v>arc_1<>.lock()<>

Returns:

<cb>LockResult\<MutableGuard><>


Access the underlying data so it is mutable.

The underlying data is automatically dereferenced. Use as normal.
The lock automatically releases when the guard goes out of scope.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Arc.html>Arc<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l https://doc.rust-lang.org/std/sync/struct.Mutex.html>Mutex<>.<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html#method.lock">lock()<>
@
@ mutably, mutable, release, releases
@ arc.lock(), .lock()



# Box

Type:

<cb>Box\<<v>T<>><>


A smart pointer that allocates and then points to data on the heap.

A box can have only one owner.
Creating a box creates data on the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/boxed/index.html">boxed<>::<l https://doc.rust-lang.org/std/boxed/struct.Box.html>Box<>
@
@ box-only, boxed, smart-pointer, smart pointer, single owner
@ std::boxed::box, boxed::box, ::box
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



### Box - Create

<cb>= Box::new(<v>value<>)<>

Usage:

<cb>let <v>box_1<>: Box\<<v>T<>> = Box::new(<v>value<>);<>

Returns:

<cb>Box\<<v>T<>><>


Creates a pointer to a value on the heap.


Example:

<cb>let <v>box_1<> = Box::new(<v>42<>_i32);

println!("{}", <v>box_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/boxed/index.html">boxed<>::<l https://doc.rust-lang.org/std/boxed/struct.Box.html>Box<>.<l "https://doc.rust-lang.org/std/boxed/struct.Box.html#method.new">new()<>
@
@ define, new, instantiate, create
@ Box::new(), Box\<T>, boxed:box



### Box - Get - Borrow

<cb>= &*<v>boxed_item<><>


Use <c>&*<> to borrow (reference) the dereferenced value.
@
@ &*



### Box - Get - Borrow (Mutably)

<cb>= &mut *<v>boxed_item<><>


Use <c>&mut *<> to mutably borrow the dereferenced value.
@
@ mutable



### Box - Get - Own

<cb>= *<v>boxed_item<><>


Dereferences the value stored in the boxed item and takes ownership of it.



## Box - Extras


### Box - Memory

<cb><t><|><|>┌───────────────────┐    ┌──────┐
Box\<<v>T<>><|>=<|>│ pointer:  usize ──│──▶ │ item │
<|><|>└───────────────────┘    └──────┘<><>
@
@ memory size, memory-only, mem-only



# Cell

Type:

<cb>std::cell::Cell\<<v>T<>><>

Defines a mutable memory location.

This is a zero cost abstraction.
Works with types that implement the Copy trait only.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.Cell.html">Cell<>
@
@ cell-only, cell\<t>
@ std::cell::cell, cell::cell, ::cell, cell
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



# Cow

<cb>= <>

Type:

<cb>std::borrow::Cow<>

Definition:

<cb>pub enum Cow\<'a, B>
		where B: 'a + ToOwned + ?Sized, {
	Borrowed(&'a B),
	Owned(\<B as ToOwned>::Owned),
}<>


A smart pointer that allows a function to return either unchanged data (reuse) or new data (create). Allows the function to decided at runtime.

COW = Clone on Write

Allows the reuse (return) of data passed to the function if the function does not modify it. The function will return it as <c>Borrowed<>.
Also allows the function to return new data if required. The function returns new data as <c>Owned<>.

Returned data type must allow <c>clone()<>.


The Good:

<*>Saves on Memory
ACID Compliant<>

The Bad:

<*>Overhead of Tables (logical pointers to object, tracking, etc.)
Memory Fragmentation<>

Use Cases:

<*>Shadow Storage
Virtual Memory
File Systems
Versioning<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/borrow/index.html">borrow<>::<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html">Cow<>
@
@ cow-only, enum
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only
@ std::borrow::cow


## Cow - Define


### Cow - Create Borrowed

<cb>= Cow::Borrowed(<v>value<>)<>

Usage:

<cb>use std::borrow::Cow;

let <v>cow_1<> = = Cow::Borrowed(<v>value<>)<>

Returns:

<cb>Cow\<<v>T<>><>


Creates a Cow of a borrowed value.

This value will be cloned for <c>.into_owned()<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/borrow/index.html">borrow<>::<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html">Cow<>



### Cow - Create Owned

<cb>= Cow::Borrowed(<v>value<>)<>

Usage:

<cb>use std::borrow::Cow;

let <v>cow_1<> = = Cow::Owned(<v>value<>)<>

Returns:

<cb>Cow\<<v>T<>><>


Creates a Cow of an owned value.

This value will be returned for <c>.into_owned()<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/borrow/index.html">borrow<>::<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html">Cow<>



## Cow - Operations


### Cow - To Owned

<cb>= <v>cow_1<>.into_owned();<>


Returns either the owned version or creates it if needed.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/borrow/index.html">borrow<>::<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html">Cow<>.<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html#method.into_owned">into_owned()<>
@
@ cow.to_owned(), .to_owned()



### Cow - To Ref

<cb>= <v>cow_1<>.as_ref();<>


Returns a reference to the underlying data.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/borrow/index.html">borrow<>::<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html">Cow<>.<l "https://doc.rust-lang.org/std/borrow/enum.Cow.html#method.as_ref">as_ref()<>
@
@ cow.as_ref(), .as_ref()



## Cow - Patterns


### Cow - Match

<cb>match <v>cow_1<> {
        Borrowed(<v>value<>) => <v>...<>,
        Owned(<v>value<>) => <v>...<>,
    }
}<>

Usage:

<cb>use std::borrow::Cow::{Borrowed, Owned};

match <v>cow_1<> {
        Borrowed(<v>value<>) => <v>...<>,
        Owned(<v>value<>) => <v>...<>,
    }
}<>



# Rc

Type:

<cb>std::rc::Rc\<<v>T<>><>


An Rc is a pointer to memory on the heap that can have multiple owners.

Immutable by default.
Rc is not thread safe.

RC = Reference Counted


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>
@
@ rc-only, rc\<t>
@ std::rc::Rc, rc::Rc, ::rc, rc
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



## Rc - Create

<cb>= Rc::new(<v>value<>)<>

<cb>use std::rc::Rc;

let <v>rc_1<>: Rc\<<v>T<>> = Rc::new(<v>value<>);<>


Creates a new Rc pointer with data placed on the heap.


Example:

<cb>use std::rc::Rc;

let <v>rc_1<> = Rc::new(<v>42<>_i32);

println!("{}", <v>rc_1<>);

<#>// Prints: "42"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.new">new()<>
@
@ create, define, instantiate, new
@ Rc::new(), new()



## Rc - Properties


### Rc - Get - Borrow (Immutable)

Use as if not it were not wrapped in an Rc type.

Rc automatically dereferences into the underlying type.



### Rc - Get - Access Directly (Nope)

Not possible.

You can not access the warpped value directly.
Use clone if necessary.
@
@ reference, data, element, value



### Rc - Reference Count

<cb>= Rc::strong_count(<v>rc_1<>);<>


Returns a count of all the rc instances for that rc item.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.strong_count">strong_count()<>
@
@ strong count, instances, existing, current
@ rc::strong_count(), strong_count()



## Rc - Operations



### Rc - Clone Rc

<cb>= rc_1.clone()<>

or

<cb>= Rc::clone(<v>rc_1<>)<>


Either of these will create a new Rc instance pointing to the same underlying data.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.clone">clone()<>
@
@ create, define, instantiate, new, create copy, share, 2nd
@ rc::clone(), rc.clone(), .clone()



### Rc - Clone Value

<cb>= (*<v>rc_1<>).clone()<>


Creates a copy of the wrapped item.
@
@ element, value, item, copy, unwrap



### Rc - Get - Own

<cb>= <v>rc_1<>.try_unwrap()<>

Returns:

<cb>Result\<T, Rc\<T>><>


Returns the underlying item but destroys the Rc.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.try_unwrap">try_unwrap()<>
@
@ rc::try_unwrap(), rc.try_unwrap(), .try_unwrap()



## Rc - Convert
@
@ from, convert, conversion, converting
@ rc-to, rc-into


### Rc - To Weak

<cb>= Rc::downgrade(&<v>rc_1<>)<>

Usage:

<cb>use std::rc::Rc;
let <v>weak_1<> = Rc::downgrade(&<v>rc_1<>);<>


Creates a weak pointer to the data referenced by the Rc pointer.

Yes, this is an associated function on the Rc type, not a method on an Rc instance.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.downgrade">downgrade()<>
@
@ to-weak
@ rc::downgrade(), downgrade()



## Rc - Patterns


### RC - Borrow Vec of RC

<cb>= <v>vec_1<>.into_iter().map(|<v>rc_value<>| Rc::as_ref(&<v>rc_value<>)).collect()<>

Returns:

<cb>Vec\<RC\<<v>T<>>><>


Convertst a vec of Rc values into a vec of borrowed values.
@
@ into vec\<&t>
@ from rc, rc-to, to-borrowed, convert, conversion



### Rc - Mutable Value

Use Rc + RefCell:

<cb><l "?q=rc+refcell">Rc\<RefCell\<<v>T<>>><><>



### Rc - Reference without Ownership

Use Weak:

<cb><l "?q=weak-cell">Weak\<<v>T<>><><>



## Rc - Extras


### Rc - Memory

<cb><t><|><|>┌───────────────────┐    ┌───────────────────────────┐
Rc\<<v>T<>><|>=<|>│ pointer:  usize ──│──▶ │ strong_count: AtomicUsize │
<|><|>└───────────────────┘    │ weak count:   AtomicUsize │
<|><|>                         │ item:         T           │
<|><|>                         └───────────────────────────┘<><>
@
@ memory size, memory-only, mem-only



# Rc + Refcell - Mutable Shared Value

Type:

<cb>Rc\<RefCell\<<v>T<>>><>

Use:

<cb>use std::rc::Rc;
std::cell::RefCell;<>


To make a shared mutable value, wrap the value in Rc, Refcell.
@
@ rc+refcell, refcell+rc
@ shared mutable value, mutate
@ std::rc::rc, rc::rc, std::cell::refcell, cell::refcell


### Rc + RefCell - Create Mutable

<cb>= Rc::new(RefCell::new(<v>value<>));<>

Usage:

<cb>use std::rc::Rc;
use std::cell::RefCell;

= Rc::new(RefCell::new(<v>value<>));<>

Returns:

<cb>Rc\<RefCell\<<v>T<>>><>


Creates a mutable shareable reference to a value.

Not sharable across threads.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.new">new()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l https://doc.rust-lang.org/std/cell/struct.RefCell.html>RefCell<>.<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.new">new()<>
@
@ create, define, instantiate, new
@ Rc::new(), new(), refcell



### Rc + RefCell - Get Immutable

<cb>= <v>rc_1<>.borrow()<>

Returns:

<cb>&<v>T<><>


Access the underlying data immutably.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.borrow">borrow()<>
@
@ immutably, immutable, borrow
@ rc.borrow(), .borrow()



### Rc + RefCell - Get Mutable

<cb>= <v>rc_1<>.borrow_mut()<>

Returns:

<cb>&mut <v>T<><>


Access the underlying data so it is mutable.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l https://doc.rust-lang.org/std/rc/struct.Rc.html>Rc<>.<l "https://doc.rust-lang.org/std/rc/struct.Rc.html#method.borrow_mut">borrow_mut()<>
@
@ mutably, get, borrow
@ rc.borrow_mut(), .borrow_mut()



# Ref

Type:

<cb>std::cell::Ref\<<v>T<>><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.Ref.html">Ref<>
@
@ ref-only, ref\<t>
@ std::cell::ref, cell::ref, ::ref, ref
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



# RefCell

Type:

<cb>std::cell::RefCell\<<v>T<>><>


Defines a mutable memory location.

Tracks borrows and mutable borrows at runtime.
Allows a value to be mutated inside a struct method that is defined as immutable.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>
@
@ refcell-only, refcell\<t>
@ std::cell::refcell, cell::refcell, ::refcell, refcell
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



## RefCell - Create

<cb>= RefCell::new(<v>wrapped_value<>)<>

Usage:

<cb>use std::cell::RefCell;
= RefCell::new(<v>wrapped_value<>)<>


Creates a RefCell containing the wrapped value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.new">new()<>
@
@ create, define, instantiate, new
@ refcell::new()



## RefCell - Operations


### RefCell - Borrow

<cb>= <v>refcell_1<>.borrow()<>

Returns:

<cb>&\<<v>T<>><>


Borrows the internal value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.borrow">borrow()<>
@
@ refcell.borrow(), .borrow()



### RefCell - Borrow Mutable

<cb>= <v>refcell_1<>.borrow_mut()<>

Returns:

<cb>&mut \<<v>T<>><>


Mutably borrows the internal value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.borrow_mut">borrow_mut()<>
@
@ refcell.borrow_mut(), .borrow_mut()



### RefCell - Get Owned

<cb>= <v>refcell_1<>.into_inner()<>

Returns:

<cb><v>T<><>


Returns the interior value and destroys the refcell.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.into_inner">into_inner()<>
@
@ default
@ refcell.into_inner(), .into_inner()



### RefCell - Replace

<cb>= <v>refcell_1<>.replace(<v>new_value<>)<>

Returns:

<cb><v>T<><>


Returns the value and replaces it with a new value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.replace">replace()<>
@
@ swap
@ refcell.replace(), .replace()



### RefCell - Swap

<cb>= <v>refcell_1<>.swap(<v>refcell_2<>)<>

Returns:

<cb><v>T<><>


Swaps the inner values in refcell_1 and refcell_2 without having to recreate either.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.swap">swap()<>
@
@ swap
@ refcell.swap(), .swap()



### RefCell - Take

<cb>= <v>refcell_1<>.take()<>

Returns:

<cb><v>T<><>


Returns the value and replaces it with the default value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html">RefCell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.take">take()<>
@
@ default
@ refcell.take(), .take()



## RefCell - Patterns


### RefCell - Immutable Self

<cb>fn <v>function_1<>(&self) {
	self.<v>refcell_value_1<>.borrow_mut() = <v>...<>;
}<>


Use RefCell to allow a value to be updated when self must be referenced without 'mut'.
@
@ mutate, mutable
@ &self



# RefMut

Type:

<cb>std::cell::RefMut\<<v>T<>><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cell/index.html">cell<>::<l "https://doc.rust-lang.org/std/cell/struct.RefMut.html">RefMut<>
@
@ refmut-only, refmut\<t>
@ std::cell::refmut, cell::refmut, ::refmut, refmut
@ smart-only
@ smart pointer, smart-pointer-only



# RwLock

Type:

<cb>std::sync::RwLock\<<v>T<>><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.RwLock.html">RwLock<>
@
@ rwlock-only, rwlock\<t>
@ std::sync::rwlock, sync::rwlock, ::rwlock, rwlock
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



# Weak

Type:

<cb>std::rc::Weak<>


A pointer that contains a non-owning reference to some data.

Allows data to be dropped from memory even though this pointer still references it.
Makes <_>no<> guarantees that the data still being present

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l "https://doc.rust-lang.org/std/rc/struct.Weak.html">Weak<>
@
@ weak-only, non-owing, non-owner
@ std::rc::weak, rc::weak, ::weak, weak
@ smart pointer, smart-only, smart-pointer-only, smart-pointers-only



## Weak - Create

<cb>= Weak::new(<v>value<>)<>

Usage:

<cb>use std::rc::Weak;

let <v>weak_1<>: Weak\<<v>T<>> = Weak::new(<v>value<>);<>


Create a new Weak pointer with data placed on the heap.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l "https://doc.rust-lang.org/std/rc/struct.Weak.html">Weak<>::<l "https://doc.rust-lang.org/std/rc/struct.Weak.html#method.new">new()<>
@
@ weak::new(), new()
@ create, define, instantiate, new



## Weak - Convert
@
@ from, convert, conversion, converting
@ weak-to, weak-into


### Weak - To Rc

<cb>= <v>weak_1<>.upgrade()<>

Returns:

<cb>Option\<Rc\<<v>T<>>><>

Converts a Weak pointer into an Rc pointer.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/rc/index.html">rc<>::<l "https://doc.rust-lang.org/std/rc/struct.Weak.html">Weak<>::<l "https://doc.rust-lang.org/std/rc/struct.Weak.html#method.upgrade">upgrade()<>
@
@ to-rc
@ weak.upgrade(), .upgrade(), mutable, own



# Standard Traits
<meta>
index: tags
index-to: word
<>
@
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only

<l "?q=asmut-only">AsMut<>
<l "?q=asref+trait">AsRef<>
<l "?q=clone-only+trait">Clone<>
<l "?q=copy-only+trait">Copy<>
<l "?q=debug-only+trait">Debug<>
<l "?q=deref-only+trait">Deref<>
<l "?q=default-only+trait">Default<>
<l "?q=display-only+trait">Display<>
<l "?q=drop-only+trait">Drop<>
<l "?q=eq-only+trait">Eq<>
<l "?q=error-only+trait">Error<>
<l "?q=from-only+trait">From<>
<l "?q=slice-only+trait">Index<>
<l "?q=slice-only+trait">IndexMut<>
<l "?q=into-only+trait">Into<>
<l "?q=intoiterator-only+trait">IntoIterator<>
<l "?q=iterator-only+trait">Iterator<>
<l "?q=ord-only+trait">Ord<>
<l "?q=partialeq-only+trait">PartialEq<>
<l "?q=toowned-only+trait">ToOwned<>
<l "?q=tostring-only+trait">ToString<>
<l "?q=tryfrom-only+trait">TryFrom<>
@
@ summary



# Marker Traits

<l "?q=copy-only+trait">Copy<>
<l "?q=send-only+trait">Send<>
<l "?q=sized-only+trait">Sized<>
<l "?q=sync-only+trait">Sync<>
<l "?q=unpin-only+trait">Unpin<>
@
@ summary



# AsMut Trait

<cb>pub trait AsMut\<<v>T<>> {
    fn as_mut(&self) -> &mut <v>T<>;
}<>


Converts a type into a mutable reference of another type.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/convert/index.html">convert<>::<l "https://doc.rust-lang.org/std/convert/trait.AsMut.html">AsMut<>
@
@ asmut-only
@ std::convert::asmut, convert::asmut, asmut\<T>
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only


## AsMut - Properties


### AsMut - As Mututable Reference

<cb>= <v>as_mut_1<>.as_mut()<>

Returns:

<cb>&mut <v>T<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/convert/index.html">convert<>::<l "https://doc.rust-lang.org/std/convert/trait.AsMut.html">AsMut<>.<l "https://doc.rust-lang.org/std/convert/trait.AsMut.html#tymethod.as_mut">as_mut()<>
@
@ convert to, return
@ asmut.as_mut(), .as_mut()



# AsRef Trait

<cb>pub trait AsRef\<<v>T<>> {
    fn as_ref(&self) -> &<v>T<>;
}<>


Converts a type into a reference of another type.


Example:

<cb>fn <v>print_value<>\<T: AsRef\<str>> (<v>value<>: T) {
    println!("Value: {}", <v>value<>.as_ref());
}

fn main() {
	<v>print_value<>("one");
    <v>print_value<>("two".to_string());
}<>

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/convert/index.html">convert<>::<l "https://doc.rust-lang.org/std/convert/trait.AsRef.html">AsRef<>
@
@ asref-only
@ std::convert::asref, convert::asref, asref\<T>
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only


## AsRef - Properties


### AsRef - As Reference

<cb>= <v>as_ref_1<>.as_ref()<>

Returns:

<cb>&<v>T<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/convert/index.html">convert<>::<l "https://doc.rust-lang.org/std/convert/trait.AsRef.html">AsRef<>.<l "https://doc.rust-lang.org/std/convert/trait.AsRef.html#tymethod.as_ref">asRef()<>
@
@ convert to, return
@ asref.as_ref(), .as_ref()



# Clone Trait

<cb>trait Clone {
	fn clone(&<v>self<>) -> Self;
	fn clone_from(&mut <v>self<>, <v>source<>: &Self) { <v>...<> }
}<>

Type:

<cb>std::clone::Clone<>


Creates a copy of an item.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/clone/index.html>clone<>::<l https://doc.rust-lang.org/std/clone/trait.Clone.html>Clone<>
@
@ std::clone::Clone, clone::Clone, ::clone
@ .clone(), .clone_from()
@ clone-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Copy Trait

<cb>trait Copy { }<>

Type:

<cb>std::marker::Copy<>


Allows an item to be copied.

This is a marker trait and defines no methods.
Allows items to have "copy semantics'.
Assigning one item from another that implements copy will get a bitwise copy of the latter item.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/marker/index.html>marker<>::<l "https://doc.rust-lang.org/std/marker/trait.Copy.html">Copy<>
@
@ std::marker::copy, marker::copy, ::copy
@ copy-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Debug Trait

<cb>pub trait Debug {
	fn fmt(&self, f: &mut Formatter\<'_>) -> Result\<(), Error>;
}<>

Type:

<cb>std::fmt::Debug<>


Prints a programmer readable representation of the item.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l "https://doc.rust-lang.org/std/fmt/trait.Debug.html">Debug<>
@
@ fmt()
@ std::fmt::Debug, fmt::Debug, ::Debug
@ debug-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Default Trait

<cb>pub trait Default {
	fn default() -> Self;
}<>

Type:

<cb>std::default::Default<>


Creates an instance with basic default values.


Example:

<cb>struct <v>Point<> {
	x: f32,
	y: f32
}

impl Default for <v>Point<> {
	fn default() -> Self {
		Self {
			x: 0.0, y: 0.0
		}
	}
}

let <v>point<> = <v>Point<>::default();

println!("x: {}, y: {}", <v>point<>.x, <v>point<>.<v>y<>);

<#>// x: 0, y: 0<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/default/index.html">default<>::<l "https://doc.rust-lang.org/std/default/trait.Default.html">Default<>
@
@ fmt()
@ std::fmt::Default, fmt::Default, ::Default
@ default-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Deref Trait

<cb>trait Deref {
    type <v>Target<>: ?Sized;

    fn deref(&self) -> &Self::Target;
}<>

Type:

<cb>std::ops::Deref<>


Allows a type to behave like a reference to another type.

Use * to dereference.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Deref.html">Deref<>
@
@ deref()
@ std::ops::deref, ops::deref, ::deref
@ deref-only, defer-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Display Trait

<cb>pub trait Display {
	fn fmt(&self, <v>formatter<>: &mut Formatter\<'_>) -> Result\<(), Error>;
}<>

Usage:

<cb>use std::fmt::Display;
use std::fmt::Formatter;
use std::fmt;

impl Display for <v>Struct1<> {

	fn fmt(&self, <v>formatter<>: &mut Formatter) -> fmt::Result {
		write!(<v>formatter<>, "<v>...<>", <v>...<>)
	}
}<>

Type:

<cb>std::fmt::Display<>


Prints a human readable representation of the item.

Implementing this automatically implements the <c>ToString<> trait too.


Example:

<cb>use std::fmt::Display;
use std::fmt::Formatter;
use std::fmt::Result;

struct Point {
	<v>x<>: i32,
	<v>y<>: i32
}

impl Display for Point {

	fn fmt(&self, <v>formatter<>: &mut Formatter) -> Result {
		write!(<v>formatter<>, "{}, {}", self.<v>x<>, self.<v>y<>)
	}
}

fn main() {

	let <v>point<> = Point {<v>x<>: 3, <v>y<>: 4};
	println!("Point: {}", <v>point<>);
}<>


Rust Docs:

	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l "https://doc.rust-lang.org/std/fmt/trait.Display.html">Display<>
	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l https://doc.rust-lang.org/std/fmt/struct.Error.html>Error<>
	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l https://doc.rust-lang.org/std/fmt/type.Result.html>Result<>
@
@ fmt(), tostring, .to_string()
@ std::fmt::Display, fmt::Display, ::Display
@ display-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## Display - Operations


### Display - fmt

<cb><v>display_1<>.fmt(<v>formatter_1<>)<>

Returns (these are equivalent):

<cb>Result\<(), std::fmt::Error>

std::fmt::Result\<()><>


Use to give the formatter the text representation of the item.


Example:

<cb>use std::fmt::Display;
use std::fmt::Formatter;
use std::fmt::Result;

struct Point {
	<v>x<>: i32,
	<v>y<>: i32
}

impl Display for Point {

	fn fmt(&self, <v>formatter<>: &mut Formatter) -> Result {
		write!(<v>formatter<>, "{}, {}", self.<v>x<>, self.<v>y<>)
	}
}<>


Rust Docs:

	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l "https://doc.rust-lang.org/std/fmt/trait.Display.html">Display<>.<l https://doc.rust-lang.org/std/fmt/trait.Display.html#tymethod.fmt<>fmt()<>
	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l https://doc.rust-lang.org/std/fmt/struct.Error.html>Error<>
	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l https://doc.rust-lang.org/std/fmt/struct.Formatter.html>Formatter<>
	<l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/fmt/index.html">fmt<>::<l https://doc.rust-lang.org/std/fmt/type.Result.html>Result<>
@
@ format
@ display.fmt(), .fmt()



# Drop Trait (destructor)

<cb>trait Drop {
	fn drop(&mut self);
}<>

Type:

<cb>std::ops::Drop<>


The <c>drop()<> is called automatically when the object goes out of scope.

Use this to implement a destructor on a type.
This <b>must not<> fail.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Drop.html">Drop<>
@
@ drop(), destructor
@ std::ops::Drop, ops::Drop, ::drop
@ drop-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Eq Trait

Type:

<cb>std::cmp::Eq<>


Allows items to be compared for equality.

Requires that <c>x == x<>.
Requires the implementation of the PartialEq trait.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.Eq.html">Eq<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.PartialEq.html">PartialEq<>
@
@ equality, equals, compare, comparison
@ std::cmp::eq, cmp::eq, ::eq, 
@ eq-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Error Trait

<cb>pub trait Error: Debug + Display {
	fn source(&self) -> Option\<&(dyn Error + 'static)>;
	fn description(&self) -> &str;
    <s>fn cause(&self) -> Option\<&dyn Error>;<>
    fn provide\<'a>(&'a self, demand: &mut Demand\<'a>);
}<>

Type:

<cb>std::error::Error<>


The standard implementation of a Rust error.

Return inside Result::Err.


Must Also Implement:

<card>Debug, Display traits<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/error/index.html">error<>::<l "https://doc.rust-lang.org/std/error/trait.Error.html">Error<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/result/index.html">result<>::<l "https://doc.rust-lang.org/std/result/enum.Result.html">Result<>::<l https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err>Err<>
@
@ error-only
@ std::error::Error, error::Error, ::Error
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## Error - Properties



### Error - Cause (deprecated)

<cb>= <v>error<>.cause()<>

Returns:

<cb>Option\<&dyn Error><>


<m>Deprecated.<>

Use <c>.source()<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/error/index.html">error<>::<l "https://doc.rust-lang.org/std/error/trait.Error.html">Error<>.<l https://doc.rust-lang.org/std/error/trait.Error.html#method.cause>cause()<>
@
@ call stack
@ error.cause(), .cause()



### Error - Description (deprecated)

<cb>= <v>error<>.description()<>

Returns:

<cb>&str<>


<m>Deprecated.<>

Returns the original error if any.

Deprecated.
Use .to_string() or implement the Display Trait instead.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/error/index.html">error<>::<l "https://doc.rust-lang.org/std/error/trait.Error.html">Error<>.<l https://doc.rust-lang.org/std/error/trait.Error.html#method.description>description()<>
@
@ call stack
@ error.description(), .description()



### Error - Source

<cb>= <v>error<>.source()<>

Returns:

<cb>Option\<&(dyn Error + 'static)><>


Returns the original error if any.
@
@ call stack, get
@ error.source(), .source()



### Error - To String

<cb>= <v>error<>.to_string()<>
@
@ error.to_string(), .to_string()
@ to-string, convert



## Error - Example Implementations


### Error Example - Minimal Implementation

<cb>use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};

\#[derive(Debug)]
struct <v>CustomError<> {
    <v>description<>: String,
}

impl Error for <v>CustomError<> {}

impl Display for <v>CustomError<> {
    fn fmt(&self, formatter: &mut Formatter\<'_>) -> fmt::Result {
        write!(formatter, "{}", self.<v>description<>)
    }
}<>

Return:

<cb>return Err(<v>CustomError<>{description: <v>description<>});<>


This implements a custom error type with one property - <c>description<>.
@
@ basic, basics, sample, simple, example, custom, define, create
@ error-only



### Error Example - Enum Implementation

<cb>use std::error::Error;
use std::fmt::Display;
use std::fmt::Formatter;
use std::fmt::Result as FormatResult;

\#[derive(Debug)]
enum <v>CustomError<> {
	NotFound,
	NotAuthorized,
	Other(String),
}

impl Display for <v>CustomError<> {
	fn fmt(&self, formatter: &mut Formatter) -> FormatResult {
		match self {
			<v>CustomError<>::NotFound => write!(formatter, "Not found"),
			<v>CustomError<>::NotAuthorized => write!(formatter, "Not authorized"),
			<v>CustomError<>::Other(message) => write!(formatter, "{}", message),
		}
	}
}

impl Error for CustomError {}<>

Return:

<cb>return Err(<v>CustomError<>::NotFound;<>


This implements a custom error type with one property - <c>description<>, and the new method..
@
@ basic, basics, sample, simple, example, custom, define, create
@ error-only



### Error Example - Nested Error

<cb>use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};

\#[derive(Debug)]
struct <v>NestedError<> {
    <v>description<>: String,
    <v>source<>: Option\<Box\<dyn Error>>,
}

impl <v>NestedError<> {
	pub fn new(description: String, source: Option\<Box\<dyn Error>>) -> Self
		Self {description, source}
	}
}

impl Error for <v>NestedError<> {
    fn source(&self) -> Option\<&(dyn Error + 'static)> {
        match &self.source {
            Some(<v>source<>) => Some(<v>source<>.as_ref()),
            None => None
        }
    } 
}

impl Display for <v>NestedError<> {
    fn fmt(&self, formatter: &mut Formatter\<'_>) -> fmt::Result {
        write!(formatter, "{}", self.<v>description<>)
    }
}<>

Return:

<cb>return Err(<v>NestedError<>::new(<v>description<>, <v>source<>));<>


This implements a custom error that nests another error.
@
@ basic, basics, sample, simple, example, custom, define, create
@ error-only



# From Trait

<cb>pub trait From\<<v>T<>> {
	fn from(<v>T<>) -> Self;
}<>

Type:

<cb>std::convert::From<>

Converts an item from one type into another.

Automatically implements the <c>Into<> trait.
This <b>must not<> fail.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/convert/index.html">convert<>::<l "https://doc.rust-lang.org/std/convert/trait.From.html">From<>
@
@ Convert, conversion, from, to
@ std::convert::From, convert::From, ::From, from()
@ from-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## From Trait - Implement

<cb>impl From\<<v>FromType<>> for <v>ToType<> {
    fn from(<v>value<>: <v>FromType<>) -> <v>ToType<> {
        <v>...<>
    }
}<>

<cb>= <v>ToType<>::from(<v>value<>)<>


Defines the conversion from one type into another.



## From Trait - Examples

For usize:

<cb>struct <v>Data<> {
    <v>value<>: usize
}

impl From\<usize> for <v>Data<> {
    fn from(<v>value<>: usize) -> Self {
        <v>Data<> {<v>value<>}
    }
}

fn main() {

	let <v>data<> = Data::from(42);
	println!("Value: {}", <v>data<>.<v>value<>);
}<>


For String:

<cb>struct <v>Data<> {
    <v>value<>: String
}

impl\<<v>T<>: ToString> From\<<v>T<>> for <v>Data<> {
    fn from(<v>value<>: <v>T<>) -> Self {
        <v>Data<> {
            <v>value<>: <v>value<>.to_string(),
        }
    }
}

fn main() {

	let <v>data<> = Data::from(42);
	println!("Value: {}", <v>data<>.<v>value<>);
}<>



# Hash Trait

<cb>trait Hash {
    fn hash\<<v>H<>>(&self, state: &mut <v>H<>)
       where <v>H<>: Hasher;
}<>

Type:

<cb>std::hash::Hash<>


Returns the hash value for a type.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/hash/index.html">hash<>::<l "https://doc.rust-lang.org/std/hash/trait.Hash.html">Hash<>
@
@ hashset, hashmap
@ std::hash::hash, hash::hash, ::hash, 
@ hash-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Hasher Trait

<cb>trait Hasher {
    ...
}<>

Type:

<cb>std::hash::Hasher<>


Converts a stream of bytes into a hash value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/hash/index.html">hash<>::<l "https://doc.rust-lang.org/std/hash/trait.Hasher.html">Hasher<>
@
@ std::hash::hasher, hash::hasher, ::hasher
@ hasher-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Index Trait

<cb>trait Index {
    fn index(&self, <v>value<>: IndexValueType);
}<>

Type:

<cb>std::ops::Index<>


Implements indexing on a type (<c>= <v>item<>[<v>index<>]<>).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Index.html">Index<>
@
@ index-only
@ std::ops::Index, ops::Index, ::Index
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Index Mut Trait

<cb>trait IndexMut {
    fn index_mut(&mut self, <v>value<>: IndexValueType);
}<>

Type:

<cb>std::ops::IndexMut<>


Implements mutable indexing on a type (<c>= <v>item<>[<v>index<>]<>).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.IndexMut.html">IndexMut<>
@
@ indexmut-only, mutable
@ std::ops::IndexMut, ops::IndexMut, ::IndexMut
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Into Trait

<cb>pub trait Into\<<v>T<>> {
	fn into(<v>self<>) -> T;
}<>

Type:

<cb>std::convert::Into<>

Converts an item from one type into another.

Prefer the <c>From<> trait over <c>Into<>.
Automatically implements the <c>From<> trait.
Often requires turbofish / type annotations to help the type inference system.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/convert/index.html">convert<>::<l "https://doc.rust-lang.org/std/convert/trait.Into.html">Into<>
@
@ Convert, conversion, from, to, turbofish
@ std::convert::Into, convert::Into, ::Into, into()
@ into-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## Into Trait - Implement

Usage:

<cb>impl Into\<<v>ToType<>> for <v>FromType<> {
    fn into(<v>value<>: <v>FromType<>) -> <v>ToType<> {
        <v>...<>
    }
}<>

<cb>= <v>from<>.into()
= <v>from<>.into::\<<v>ToType<>>()<>


Defines the conversion from one type into another.



# IntoIterator Trait

<cb>pub trait IntoIterator {
	type <v>Item<>;
	type <v>IntoIter<>: Iterator\<Item = Self::<v>Item<>

	fn into_iter(self) -> Self::<v>IntoIter<>;
}<>

Type:

<cb>std::iter::IntoIterator<>


Allows a type to return an iterator for it's contents.

Items implementing this trait can be iterated over with a for statement.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.IntoIterator.html">IntoIterator<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>
@
@ std::iter::IntoIterator, iter::IntoIterator, ::IntoIterator
@ intoiterator-only, into-iterator-only, into-iterators-only, intoiter-only, intoiters-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## IntoIterator - Operations
@
@ functions


### IntoIterator - Into Iter

<cb>= <v>iterator_1<>.into_iter()<>

Returns:

<cb>Iterator\<Item = <v>V<>><>


Returns an iterator for the given type.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.IntoIterator.html">IntoIterator<>.<l "https://doc.rust-lang.org/std/iter/trait.IntoIterator.html#tymethod.into_iter">into_iter()<>
@
@ get iterator
@ .into_iter()



# Iterator Trait

<cb>pub trait Iterator {
	type <v>Item<>;

	fn next(&mut self) -> Option\<Self::<v>Item<>>;
	fn count(self) -> usize { ... }
	<v>...<>
}<>

Type:

<cb>std::iter::Iterator<>

Provides the functions used by iterators such as <c>Vec.iter()<>.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>
@
@ std::iter::Iterator, iter::Iterator, ::Iterator
@ iterator-only, iterators-only, iter-only, iters-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## Iterator - Create

<cb>= <v>item<>.iter()<>


Returns an iterator to the item.

The item values are borrowed.


Sheet: <l "?q=iterator-only">Iterator<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>
@
@ .iter(), iter()



## Iterator - Operations


### Iterator - All

<cb>= <v>iterator_1<>.all(<v>test_function<>)<>

Returns:

<cb>bool<>


Returns true if every item in the iterator returns true from the test function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.all">all()<>
@
@ item, element, value
@ .all()



### Iterator - Any

<cb>= <v>iterator_1<>.any(<v>test_function<>)<>

Returns:

<cb>bool<>


Returns true if a single item in the iterator returns true from the test function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.any">any()<>
@
@ item, element, value
@ .any()


	
### Iterator - Collect

<cb>= <v>iterator_1<>.collect()

= <v>iterator_1<>.collect()::\<Vec\<<v>T<>>><>

Returns:

<cb>Vec\<<v>T<>><>


Turns an iterator into a collection of values.

Often requires turbofish / type annotations to help the type inference system.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect">collect()<>
@
@ to into
@ iterator.collect(), iter.collect(), .collect(), vec, sequence
@ convert, conversion, converting, from iterator, iterator-to, to-vec, from, to, into



### Iterator - Count

<cb>= <v>iterator_1<>.count()<>

Returns:

<cb>usize<>


Returns the number of elements in the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count">count()<>
@
@ items, elements, values, size, length
@ .count()



### Iterator - Eq

<cb>= <v>iterator_1<>.eq(<v>iterator_2<>)<>

Returns:

<cb>bool<>


Compares two iterators to see if they are equal.

Useful for testing.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq">eq()<>
@
@ items, elements, values, equals, is equal
@ .count()



### Iterator - Find

<cb>= <v>iterator_1<>.find(<v>match_function<>)><>

Returns:

<cb>Optional:\<T><>


Returns the item that returns true for the match function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find">find()<>
@
@ item, element, value
@ .find()



### Iterator - First

<cb>= <v>iterator_1<>.next()<>

Returns:

<cb>Optional\<T><>


Use <c>.next()<> to get the first item from an iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next">next()<>
@
@ item, element, value, get, find
@ .first(), 1st



### Iterator - For Each

<cb><v>iterator_1<>.for_each(<v>function_1<>);<>

<cb><v>iterator_1<>.for_each(|<v>value<>| <v>...<>);<>


Applies a function to each item in the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.for_each">for_each()<>
@
@ apply function, call
@ item, element, value, values
@(), .for_each()



### Iterator - Last

<cb>= <v>iterator_1<>.last()<>

Returns:

<cb>Optional\<T><>


Returns the last item from the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.last">last()<>
@
@ item, element, value
@ .last()



### Iterator - Min

<cb>= <v>iterator_1<>.min()<>

Returns:

<cb>Optional\<T><>


Returns the minimum value from the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min">min()<>
@
@ minimum, value
@ .min()



### Iterator - Max

<cb>= <v>iterator_1<>.max()<>

Returns:

<cb>Optional\<T><>


Returns the maximum value from the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max">max()<>
@
@ maximum, value, greatest, largest
@ .max()



### Iterator - Next

<cb>= <v>iterator_1<>.next()<>

Returns:

<cb>Optional\<T><>


Returns the next item from the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next">next()<>
@
@ item, element, value, get
@ .next()



### Iterator - Nth

<cb>= <v>iterator_1<>.nth(<v>index<>)<>

Returns:

<cb>Optional\<T><>


Returns the nth element from the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth">nth()<>
@
@ item, element, value
@ .nth()



### Iterator - Position

<cb>= <v>iterator_1<>.position(<v>match_function<>)<>

Returns:

<cb>Optional\<T><>


Returns the position where the match function returns true.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position">position()<>
@
@ item, element, value
@ .position(), index, find



### Iterator - Sum

<cb>= <v>iterator_1<>.sum()<>


Totals the values in the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum">sum()<>
@
@ all items, elements, values
@ .sum()



### Iterator - Take (Take n Items)

<cb>= <v>iterator_1<>.take(<v>count<>)<>

Return: <c>Iterator\<<v>T<>><>


Returns the next <c><v>count<><> items from the iterator.

Returns a mutable iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take">take()<>
@
@ items, elements, values, get, n, count, number of, first
@ .take()



## Iterator - Transformation Operations

These are functions that return a new iterator.


### Iterator - Chain

<cb>= <v>iterator_1<>.chain(<v>iterator_2<>)

= <v>iterator_1<>.chain(<v>sequence_2<>.iter())<>


Combines to iterators together.

Use to chain two or more sequences together.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.chain">chain()<>
@
@ iterator.chain(), iter.chain(), .chain()



### Iterator - Cloned

<cb>= <v>iterator_1<>.cloned()<>


Clones all elements in the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned">cloned()<>
@
@ iterator.cloned(), iter.cloned(), .cloned()



### Iterator - Enumerate

<cb>= <v>iterator_1<>.enumerate()<>

Usage:

<cb>for (<v>index<>, <v>item<>) in <v>items<>.into_iter().enumerate() { <v>...<><>

Returns:

<cb>Iterator\<(usize, T)><>


Enumerates all element within the iterator.


Example:

<cb>let <v>items<> = vec!["one", "two", "three"];

for (<v>index<>, <v>item<>) in <v>items<>.into_iter().enumerate() {
	println!("{} {}", <v>index<>, <v>item<>);
}

<#>// Prints:
//
//   0 one
//   1 two
//   2 three<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.enumerate">enumerate()<>
@
@ iterator.enumerate(), iter.enumerate(), .enumerate()



### Iterator - Filter

<cb>= <v>iterator_1<>.filter(<v>match_function<>)<>

Returns:

<cb>Filter\<<v>P<>><>


Returns a new iterator for all item where the match function is true.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter">filter()<>
@
@ iterator.filter(), iter.filter(), .filter()



### Iterator - Filter Map

<cb>= <v>iterator_1<>.filter_map(<v>filter_function<>)<>

Returns

<cb>FilterMap\<<v>F<>><>


Maps values into <c>Option\<<v>T<>><> and then filters out the <c>None<> values.

None items are filtered out.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map">filter_map()<>
@
@ item, element, value, none, exclude, remove
@ Some(), Option
@ .filter_map()



### Iterator - Flatten

<cb>= <v>iterator_1<>.flatten()<>


Flattens all iterator values in the top level and one level down.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flatten">flatten()<>
@
@ iterator.flatten(), iter.flatten(), .flatten()



### Iterator - Fold

<cb>= <v>iterator_1<>.fold(<v>initial<>, <v>fold_function<>)<>

Returns:

<cb><v>B<><>

Fold Function:

<cb>|<v>result<>, <v>item<>| -> <v>result<><>


Folds the iterator values into an accumulator returning the final result.

All values are passed into the fold function along with the result from the previous calculation.
The final result is returned.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold">fold()<>
@
@ items, elements, values, get, to single value, to 1 one result
@ .fold()



### Iterator - Map

<cb>= <v>iterator_1<>.map(<v>mapping_function<>)<>


Maps (converts) the iterator values into new values using the mapping function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map">map()<>
@
@ iterator.map(), iter.map(), .map()
@ convert, conversion



### Iterator - Reduce

<cb>= <v>iterator_1<>.Reduce(<v>fold_function<>)<>

Returns:

<cb>Option\<<v>T<>><>

Reduce Function:

<cb>|<v>item_1<>, <v>item_2<>| -> <v>result<><>


Reduces the iterator down to one value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.reduce">reduce()<>
@
@ items, elements, values, get, to single value, to 1 one result
@ .reduce()



### Iterator - Rev

<cb>= <v>iterator_1<>.rev()<>


Reverses the items in the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev">rev()<>
@
@ reverse
@ iterator.rev(), iter.rev(), .rev()



### Iterator - Skip

<cb>= <v>iterator_1<>.skip(<v>count<>)<>


Skips a certain number of items in the iterator.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip">skip()<>
@
@ item, element, value
@ iterator.skip(), iter.skip(), .skip()




### Iterator - Skip While

<cb>= <v>iterator_1<>.skip_while(<v>match_function<>)<>


Skips all iterator values that return true from the match function.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip_while">skip_while()<>
@
@ item, element, value
@ iterator.skip_while(), iter.skip_while(), .skip_while()




### Iterator - Step By

<cb>= <v>iterator_1<>.step_by(<v>size<>)<>


Returns a sequence returning every nth item in the list (the given size).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.step_by">step_by()<>
@
@ items, elements, values
@ iterator.step_by(), iter.step_by(), .step_by()



### Iterator - Zip

<cb>= <v>iterator_1<>.zip(<v>list_2<>.iter())<>

Usage:

<cb>let <v>zipped<>: Vec\<(<v>Type1<>, <v>Type2<>)> = <v>list_1<>.iter().zip(<v>list_2<>.iter());

... = <v>zipped_item<>.0
... = <v>zipped_item<>.1<>

Returns:

<cb>Vec\<(<v>Type1<>, <v>Type2<>)><>


Zips together (pairs up) the values from two iterators.

Creates a vec of zipped tuples.

List Size: The new iterator will have the same number of elements as the shortest list.
Zipped Type: You must declare the zipped type explicitly.


Example:

<cb>
let <v>a<> = vec![1, 2, 3, 4];
let <v>b<> = vec!["one", "two", "three"];

let <v>zipped<>: Vec\<(&i32, &str)> = <v>a<>.iter().zip(<v>b<>.iter()).collect();

for <v>pair<> in <v>zipped<>.iter() {
    println!("{} {}", <v>pair<>.0, <v>pair<>.1);
}

<#>// Prints:
//
// 1 one
// 2 two
// 3 three<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/iter/index.html">iter<>::<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html">Iterator<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip">zip()<>
@
@ iterator.zip(), iter.zip(), .zip()



# Ord Trait

<cb>pub trait Ord: Eq + PartialOrd\<Self> {
    fn cmp(&self, <v>other<>: &Self) -> Ordering;
}<>

Type:

<cb>std::cmp::Ord<>


Allows items to be compared defining which is greater.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html">Ord<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/enum.Ordering.html">Ordering<>
@
@ equality, equals, compare, comparison
@ std::cmp::ord, cmp::ord, ::ord, 
@ ord-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



## Ord - Operations


### Ord - Max

<cb>= <v>item_1<>.max(<v>other<>)<>

Returns:

<cb>\<<v>T<>><>


Returns the maximum of 2 values.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html">Ord<>.<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.max">max()<>
@
@ ord.max()



### Ord - Min

<cb>= <v>item_1<>.min(<v>other<>)<>

Returns:

<cb>\<<v>T<>><>


Returns the minimum of 2 values.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html">Ord<>.<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.min">min()<>
@
@ ord.min()



### Ord - clamp

<cb>= <v>item_1<>.clamp(<v>item_min<>, <v>item_max<>)<>


Clamps the range of item values between a min and a max.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html">Ord<>.<l "https://doc.rust-lang.org/std/cmp/trait.Ord.html#method.clamp">clamp()<>
@
@ ord.min()



# PartialEq Trait

<cb>pub trait PartialEq\<<v>Other<>> {
    fn eq(<v>other<>: &<v>Other<>) -> bool;
    fn ne(<v>other<>: &<v>Other<>) -> bool;
}<>

Type:

<cb>std::cmp::PartialEq<>


Allows items to be compared for equality.

Use when the following may be true: x != x.
(example: NaN != NaN)


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/cmp/index.html">cmp<>::<l "https://doc.rust-lang.org/std/cmp/trait.PartialEq.html">PartialEq<>
@
@ equality, equals, compare, comparison
@ std::cmp::partialeq, cmp::partialeq, ::partialeq, 
@ partialeq-only, partial-eq-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Send Trait

<cb>trait Send { }<>

Type:

<cb>std::marker::Send<>


Defines a type than can be sent across threads.

This is a marker trait and defines no methods.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/marker/index.html>marker<>::<l "https://doc.rust-lang.org/std/marker/trait.Send.html">Send<>
@
@ std::marker::send, marker::send, ::send
@ send-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Sized Trait

<cb>trait Sized { }<>

Type:

<cb>std::marker::Sized<>


Defines a type which has a known and constant size at compile time.

This is a marker trait and defines no methods.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/marker/index.html>marker<>::<l "https://doc.rust-lang.org/std/marker/trait.Sized.html">Sized<>
@
@ std::marker::sized, marker::sized, ::sized
@ sized-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Sync Trait

<cb>trait Sync { }<>

Type:

<cb>std::marker::Sync<>


Defines a type than can be shared safely across threads.

This is a marker trait and defines no methods.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/marker/index.html>marker<>::<l "https://doc.rust-lang.org/std/marker/trait.Sync.html">Sync<>
@
@ std::marker::sync, marker::sync, ::sync
@ sync-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# ToOwned Trait

<cb>pub trait ToOwned {
    type Owned: Borrow\<Self>;

    fn to_owned(&self) -> Self::Owned;
    fn clone_into(&self, target: &mut Self::Owned) { <v>...<> }
}<>

Type:

<cb>std::borrow::ToOwned<>


Converts borrowed data into owned data.

Ownership is created by cloning the data (creating a new copy).


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/borrow/index.html">borrow<>::<l "https://doc.rust-lang.org/std/borrow/trait.ToOwned.html">ToOwned<>
@
@ to owned
@ .to_owned(), .clone_into()
@ std::borrow::ToOwned, borrow::ToOwned, ::ToOwned
@ toowned-only, to-owned-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# ToString Trait

<cb>pub trait ToString {
	fn to_string(&self) -> String;
}<>

Type:

<cb>std::string::ToString<>


Prints a human readable representation of the item.

Implementing the <c>Display<> Trait automatically implements the ToString as well.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/string/index.html">string<>::<l "https://doc.rust-lang.org/std/string/trait.ToString.html">ToString<>
@
@ to string
@ .to_string(), tostring, tostring-only
@ std::string::tostring, string::tostring, ::tostring, string::tostring
@ tostring-only, to-string-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only


# TryFrom Trait

<cb>pub trait TryFrom\<<v>T<>> {
    type Error;

    fn try_from(value: <v>T<>) -> Result\<Self, Self::Error>;
}<>

Type:

<cb>std::convert::TryFrom<>


Converts one type into another.

This operation may fail.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/convert/index.html>convert<>::<l https://doc.rust-lang.org/std/convert/trait.TryFrom.html>TryFrom<>
@
@ try from
@ .try_from(), 
@ std::convert::TryFrom, convert::TryFrom, ::TryFrom, tryfrom-only
@ try-from-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Unpin Trait

<cb>trait Unpin { }<>

Type:

<cb>std::marker::Unpin<>


Defines a type than can be safely moved after being pinned.

This is a marker trait and defines no methods.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l https://doc.rust-lang.org/std/marker/index.html>marker<>::<l "https://doc.rust-lang.org/std/marker/trait.Unpin.html">Unpin<>
@
@ std::marker::unpin, marker::unpin, ::unpin
@ unpin-only
@ standard-traits-only, system-traits-only, std-traits-only, sys-traits-only



# Syncronized Library

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>
@
@ sync-only, synchronized-only



## Mutex

<cb>std::sync::Mutex<>

<cb>Mutex\<<v>T<>><>


Defines a mutex around some data that can be shared across threads but only allows one single thread access to the data at a time.


Mutex = Mutable Exclusion


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html">Mutex<>
@
@ mutex-only
@ std::sync::Mutex, sync::Mutex, ::Mutex


### Mutex - Create

<cb>= Mutex::new(<v>value<>);<>
@
@ mutex::new(), new()



### Mutex - Get Lock

<cb>= <v>mutex_1<>.lock()<>

Usage:

<cb>if let Some(<v>value<>) = <v>mutex_1<>.lock() {
	<v>...<>
}<>

Returns:

<cb>LockResult\<MutexGuard\<<v>T<>>><>


Returns the value.

The value is wrapped in a guard. The compiler handles this transparantly so you treat it just like normal.
Will panic if another thread panics while holding the lock.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html">Mutex<>.<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html#method.lock">lock()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.MutexGuard.html">MutexGuard<>
@
@ mutex.lock(), .lock()



### Mutex - Get - Borrow

<cb>= <v>guard<>.borrow()<>

Usage:

<cb>let <v>guard_1<> = <v>mutex_1<>.lock().unwrap()
let <v>item<> = <v>guard_1<>.borrow()<>

Returns:

<cb>&\<<v>T<>><>


Borrows the item stored inside the mutex.

The item is borrowed immutably.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html">Mutex<>.<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html#method.borrow">borrow()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.MutexGuard.html">MutexGuard<>
@
@ immutable, immutably
@ guard.borrow(), .borrow()



### Mutex - Get - Borrow Mutable

<cb>= <v>guard_1<>.borrow_mut()<>

Usage:

<cb>let mut <v>guard<> = <v>mutex_1<>.lock().unwrap()
let <v>item<> = <v>guard<>.borrow_mut()<>

Returns:

<cb>&\<<v>T<>><>


Borrows the item stored inside the mutex.

The item is mutable.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html">Mutex<>.<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html#method.borrow_mut">borrow_mut()<>
@
@ value
@ guard.borrow(), .borrow()



### Mutex - Release Lock (Automatic)

Locks are automatically released once the mutex guard goes out of scope.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.MutexGuard.html">MutexGuard<>
@
@ mutexguard, unlock



### Mutex - Release Lock (Manual)

<cb><v>mutex_1<>.unlock(<v>guard_1<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html">Mutex<>.<l "https://doc.rust-lang.org/std/sync/struct.Mutex.html#method.unlock">unlock()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/index.html">sync<>::<l "https://doc.rust-lang.org/std/sync/struct.MutexGuard.html">MutexGuard<>
@
@ mutexguard.unlock(), .unlock()



# Environment Variables
@
@ environment-only, environment-variables-only, env-var-only


### Environment Variable - Get

<cb>= var("<v>name<>")<>

Usage:

<cb>use std::env::var;

= var("<v>name<>")<>

returns:

<cb>Result\<String, VarError><>


Returns an environment variable.

Returns an error if the variable doesn't exist.


Example:

<cb>use std::env::var;

let <v>home<> = var("HOME").unwrap();

println!("HOME: {}", <v>home<>);<>



Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/fn.var.html">var<>
@
@ value
@ std::env::var, std::env::var(), env::var(), var()



### Environment Variables - Get Names

<cb>= std::env::vars().map(|(<v>name<>, _)| <v>name<>).collect();<>

Usage:

<cb>use std::env::vars;

let <v>names<>: Vec\<String> = vars().map(|(<v>name<>, _)| <v>name<>).collect();<>

returns:

<cb>Vec\<String><>


Returns all environment variable names.


Example:

<cb>use std::env::vars;

let mut <v>names<>: Vec\<String> = vars().map(|(<v>name<>, _)| <v>name<>).collect();
<v>names<>.sort();

for <v>name<> in <v>names<> {
	println!("{}", <v>name<>);
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/fn.vars.html">vars<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/struct.Vars.html">Vars<>
@
@ std::env::var, std::env::var(), env::var(), var(), names, keys



### Environment Variables - Get Name Values

<cb>= vars()<>

Usage:

<cb>use std::env::vars;

= vars()<>

returns:

<cb>Vars<>


Returns all environment variables as name value pairs.


Example:

<cb>use std::env::vars;

for (<v>name<>, <v>value<>) in vars() {
	println!("{<v>name<>:40}:  {<v>value<>}");
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/fn.vars.html">vars<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/struct.Vars.html">Vars<>
@
@ std::env::var, std::env::var(), env::var(), var(), names, keys, values


# Standard Types
<meta>index-to: word<>
@
@ std-only, std-type-only, std-types-only, std-struct-only, std-structs-only
@ standard-only, standard-type-only, standard-types-only, standard-struct-only, standard-structs-only


# Chars

<cb>std::str::Chars<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>
@
@ chars-only, characters-only
@ std::str::Chars, str::chars, ::chars
@ standard-type-only, standard-types-only, std-type-only, std-types-only



## Chars - Properties


### Chars - Contains?

<cb>= <v>chars_1<>.any(|item| item == <v>character<>)<>


Returns true if contains the character.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/str/struct.Chars.html#impl-Any-for-Chars%3C%27a%3E">any()<>
@
@ in, includes, has
@ chars.any(), .any(), char?



### Chars - Get

<cb>= <v>chars_1<>.nth(<v>index<>)<>

Returns:

<cb>Option\<char><>


Returns a single character.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth">nth()<>
@
@ character, value, location
@ chars().nth(), .nth()



### Chars - Length

<cb>= <v>chars_1<>.count()<>


Returns the number of actual characters.

Takes O(N) Time due to utf-8 complexity.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count">count()<>
@
@ length, size, count
@ chars().count(), .count()



## Char - Convert
@
@ from, convert, conversion, converting, into, chars
@ from chars, chars-to, chars-into
@ from characters, characters-to, characters-into



### Chars - To Vec of Char

<cb>= <v>chars_1<>.collect()<>

Returns:

<cb>Vec\<char><>


Returns a Vec of chars.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/str/index.html">str<>::<l "https://doc.rust-lang.org/std/str/struct.Chars.html">Chars<>.<l "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect">collect()<>
@
@ to-vec
@ .collect()



# Duration

<cb>std::time::Duration<>

Usage:

<cb>use std::time::Duration;<>


Defines a duration in time.


Size:

<cb>12 Bytes (96 bits)<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>
@
@ time length
@ duration-only
@ std::time::Duration, time::Duration, ::Duration
@ standard-type-only, standard-types-only, std-type-only, std-types-only



## Duration - Create


### Duration - Create from Microseconds

<cb>= Duration::from_micros(<v>microseconds_u64<>)<>

Usage:

<cb>use std::time::Duration;

= Duration::from_micros(<v>microseconds_u64<>)<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_micros">from_micros()<>
@
@ in, integer, u64
@ Duration::from_micros(), from_micros()



### Duration - Create from Milliseconds

<cb>= Duration::from_millis(<v>milliseconds_u64<>)<>

Usage:

<cb>use std::time::Duration

= Duration::from_millis(<v>milliseconds_u64<>)<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_millis">from_millis()<>
@
@ in, integer, u64
@ Duration::from_millis(), from_millis()



### Duration - Create from Nanoseconds

<cb>= Duration::from_nanos(<v>nanoseconds_u64<>)<>

Usage:

<cb>use std::time::Duration

= Duration::from_nanos(<v>nanoseconds_int<>)<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_nanos">from_nanos()<>
@
@ in, integer, u64
@ Duration::from_nanos(), from_nanos()



### Duration - Create from Seconds

<cb>= Duration::from_secs(<v>seconds_u64<>)
= Duration::from_secs_f32(<v>seconds_f32<>)
= Duration::from_secs_f64(<v>seconds_f64<>)<>

Usage:

<cb>use std::time::Duration

= Duration::from_secs(<v>seconds<>)<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_secs">from_secs()<> | <l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_secs_f32">from_secs_f32()<> | <l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_secs_f64">from_secs_f64()<>
@
@ in, integer, float, f32, f64, u64
@ Duration::from_secs(), Duration::from_secs_f32(), Duration::from_secs_f64()
@ from_secs(), from_secs_f32(), from_secs_f64()



## Duration - Properties


### Duration - In Microseconds

<cb>= <v>duration_1<>.as_micros()<>

Returns:

<cb>u128<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>.<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_micros">as_micros()<>
@
@ to, convert, conversion
@ duration.as_micros(), .as_micros(), duration.as_micros(), .as_micros()



### Duration - In Milliseconds

<cb>= <v>duration_1<>.as_millis()<>

Returns:

<cb>u128<>


Returns true if the duration is zero.Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>.<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_millis">as_millis()<>
@
@ to, convert, conversion
@ duration.as_millis(), .as_millis(), duration.as_milliseconds(), .as_milliseconds()



### Duration - In Nanoseconds

<cb>= <v>duration_1<>.as_nanos()<>

Returns:

<cb>u128<>


Returns true if the duration is zero.Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>.<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_nanos">as_nanos()<>
@
@ to, convert, conversion
@ duration.as_nanos(), .as_nanos(), duration.as_nanos(), .as_nanos()



### Duration - In Seconds

<cb>= <v>duration_1<>.as_secs()<>

Returns:

<cb>u64<>


Returns true if the duration is zero.Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>.<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.as_secs">as_secs()<>
@
@ to, convert, conversion
@ duration.as_secs(), .as_secs(), duration.as_seconds(), .as_seconds()



### Duration - Is Zero

<cb>= <v>duration_1<>.is_zero()<>

Returns:

<cb>bool<>


Returns true if the duration is zero.Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>.<l "https://doc.rust-lang.org/std/time/struct.Duration.html#method.is_zero">is_zero()<>
@
@ is zero, naught, 0
@ duration.is_zero(), .is_zero()



# Instant

<cb>std::time::Instant<>

Usage:

<cb>use std::time::Instant;<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Instant.html">Instant<>
@
@ point in time
@ instance, instance-only
@ instant-only
@ std::time::Instant, time::Instant, ::instant
@ standard-type-only, standard-types-only, std-type-only, std-types-only



## Instant - Create
@
@ new, instantiate


### Instant - Create Now

<cb>= Instant::now()<>

Usage:

<cb>use std::time::Instant;

= Instant::now();<>


Creats an instant for right now.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Instant.html">Instant<>::<l "https://doc.rust-lang.org/std/time/struct.Instant.html#method.now">now<>
@
@ instant::new(), instant::now(), now()



## Instant - Operations


### Instant - Duration Since

<cb>= <v>instant_2<>.duration_since(<v>instant_1<>)<>

Returns:

<cb>Duration<>


Returns the duration between two instants.

If instant 2 is after instant 1, returns 0.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Instant.html">Instant<>.<l "https://doc.rust-lang.org/std/time/struct.Instant.html#method.duration_since">duration_since()<>
@
@ difference between, time
@ instant.duration_since(), .duration_since()



### Instant - Elapsed

<cb>= <v>instant_1<>.elapsed()<>

Returns:

<cb>Duration<>


Returns the elapsed time since the instant.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Instant.html">Instant<>.<l "https://doc.rust-lang.org/std/time/struct.Instant.html#method.elapsed">elapsed()<>
@
@ elapsed time, duration
@ instant.elapsed(), .elapsed()



# SystemTime

<cb>std::time::SystemTime<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.SystemTime.html">SystemTime<>
@ 
@ system time
@ std::time::SystemTime, time::SystemTime, ::systemtime
@ systemtime-only
@ standard-type-only, standard-types-only, std-type-only, std-types-only



## SystemTime - Create
@
@ new, instantiate


### SystemTime - Now

<cb>= SystemTime::now()<>

Usage:

<cb>use std::time::SystemTime;

= SystemTime::now()<>

Returns:

<cb>SystemTime<>


Returns the current system time.
@
@ now, today
@ systemtime::now(), now()



### SystemTime - Epoch

<cb>= UNIX_EPOCH<>

Usage:

<cb>use std::time::UNIX_EPOCH;

= UNIX_EPOCH<>

Returns:

<cb>SystemTime<>


Returns the current system time.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/constant.UNIX_EPOCH.html">UNIX_EPOCH<>

@
@ original epoch time
@ systemtime::UNIX_EPOCH, UNIX_EPOCH, std::time::UNIX_EPOCH



## SystemTime - Operations
@
@ops


### SystemTime - Compare

<cb>= <v>system_time_1<> == <v>system_time_2<>

= <v>system_time_1<> \< <v>system_time_2<><>


All comparison operators work with SystemTime.


<in><table><col><c><v>a<> == <v>b<><>     <><col>Equals<>
<col><c><v>a<> != <v>b<><><><col>Not Equals<>
<col><c><v>a<> > <v>b<><><><col>Greater Than<>
<col><c><v>a<> \< <v>b<><><><col>Less Than<>
<col><c><v>a<> >= <v>b<><><><col>Greater Than or Equals<>
<col><c><v>a<> \<= <v>b<><><><col>Less Than or Equals<><><>
@
@ Boolean, ==, !=, \<>, \<, \<=, >, >/
@ less than, greater than, less that or equal, greater than or equal, comparison



### SystemTime - Duration

<cb>= <v>systemtime_1<>.duration_since(<v>systemtime_2<>)<>

Returns:

<cb>Result\<Duration, SystemTimeError><>


Returns the duration between two system times.
@
@ systemtime.duration_since(), .duration_since()
@ between systemtimes, system times




### SystemTime - Duration from Epoch

<cb>= <v>systemtime_1<>.duration_since(SystemTime::UNIX_EPOCH)<>

Returns:

<cb>Result\<Duration, SystemTimeError><>


Returns the duration from the Unix epoch (January 1st, 1970 at 00:00:00 UTC) and the system time.


Example:

<cb>use std::time::SystemTime;

let <v>now<> = SystemTime::now();

let <v>since_epoch<> = <v>now<>.duration_since(SystemTime::UNIX_EPOCH).unwrap();

println!("Time Since Epoch: {} secs", <v>since_epoch<>.as_secs());<>
@
@ systemtime.duration_since(), .duration_since()
@ between
@ systemtime::UNIX_EPOCH, UNIX_EPOCH



### Atomic Bool

<cb>AtomicBool<>

Type:

<cb>std::sync::atomic::AtomicBool<>

Defines an atomic boolean than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicBool.html">AtomicBool<>
@
@ boolean
@ std::sync::atomic::atomicbool, sync::atomic::atomicbool, atomic::boatomicbool, b boatomicbool, atomicbool-only



### Atomic I8

<cb>AtomicI8<>

Type:

<cb>std::sync::atomic::AtomicI8<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI8.html">AtomicI8<>
@
@ counter, signed integer
@ std::sync::atomic::atomici8, sync::atomic::atomici8, atomic::atomici8, atomici8, atomici8-only



### Atomic I16

<cb>AtomicI16<>

Type:

<cb>std::sync::atomic::AtomicI16<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI16.html">AtomicI16<>
@
@ counter, signed integer
@ std::sync::atomic::atomici16, sync::atomic::atomici16, atomic::iatomici16,  iatomici16, atomici16-only



### Atomic I32

<cb>AtomicI32<>

Type:

<cb>std::sync::atomic::AtomicI32<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI32.html">AtomicI32<>
@
@ counter, signed integer
@ std::sync::atomic::atomici32, sync::atomic::atomici32, atomic::iatomici32,  iatomici32, atomici32-only



### Atomic I64

<cb>AtomicI64<>

Type:

<cb>std::sync::atomic::AtomicI64<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicI64.html">AtomicI64<>
@
@ counter, signed integer
@ std::sync::atomic::atomici64, sync::atomic::atomici64, atomic::iatomici64,  iatomici64, atomici64-only



### Atomic U8

<cb>AtomicU8<>

Type:

<cb>std::sync::atomic::AtomicU8<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU8.html">AtomicU8<>
@
@ counter, unsigned integer
@ std::sync::atomic::atomicu8, sync::atomic::atomicu8, atomic::atomicu8, atomicu8, atomicu8-only



### Atomic U16

<cb>AtomicU16<>

Type:

<cb>std::sync::atomic::AtomicU16<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU16.html">AtomicU16<>
@
@ counter, unsigned integer
@ std::sync::atomic::atomicu16, sync::atomic::atomicu16, atomic::uatomicu16,  uatomicu16, atomicu16-only



### Atomic U32

<cb>AtomicU32<>

Type:

<cb>std::sync::atomic::AtomicU32<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU32.html">AtomicU32<>
@
@ counter, unsigned integer
@ std::sync::atomic::atomicu32, sync::atomic::atomicu32, atomic::uatomicu32,  uatomicu32, atomicu32-only



### Atomic U64

<cb>AtomicU64<>

Type:

<cb>std::sync::atomic::AtomicU64<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicU64.html">AtomicU64<>
@
@ counter, unsigned integer
@ std::sync::atomic::atomicu64, sync::atomic::atomicu64, atomic::uatomicu64,  uatomicu64, atomicu64-only



### Atomic ISize

<cb>AtomicIsize<>

Type:

<cb>std::sync::atomic::AtomicIsize<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicIsize.html">AtomicIsize<>
@
@ counter, signed integer
@ std::sync::atomic::atomicisize, sync::atomic::atomicisize, atomic::isiatomicisize, is isiatomicisize, atomicisize-only



### Atomic Usize

<cb>AtomicUsize<>

Type:

<cb>std::sync::atomic::AtomicUsize<>

Defines an atomic integer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html">AtomicUsize<>
@
@ counter, unsigned integer
@ std::sync::atomic::atomicusize, sync::atomic::atomicusize, atomic::usiatomicusize, us usiatomicusize, atomicusize-only



### Atomic Ptr

<cb>AtomicPtr<>

Type:

<cb>std::sync::atomic::AtomicPtr<>

Defines an atomic pointer than can be safely shared across threads.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/sync/atomic/index.html">atomic<>::<l "https://doc.rust-lang.org/std/sync/atomic/struct.AtomicPtr.html">AtomicPtr<>
@
@ pointer
@ std::sync::atomic::atomicptr, sync::atomic::atomicptr, atomic::patomicptr,  patomicptr, atomicptr-only



# Testing
@
@ unit tests
@ test-only, tests-only, testing-only, unit-test-only, unit-testing-only


## Test - Basics

Test Folder:

<cb><v>project<>
└── tests
    ├── tests.rs
	└── <v>*.rs<><>

Test:

<cb>#[cfg(test)]
mod test {

	use super::*;

	#[test]
	fn <v>basic_test<>() {
		assert!(<v>expression<>, "<v>Fail message.<>");
	}

	#[test]
	#[ignore]
	fn <v>disabled_test<>() {
		<v>...<>
	}

	#[test]
	#[should_panic(expected = "<v>Message when panics as expected.<>")]
	fn test_panic() {
		<v>...<>
	}
}<>

Assertions:

<cb>assert!(<v>expression<>);
assert!(<v>expression<>, "<v>message<>");

assert_eq!(<v>actual<>, <v>expected<>);
assert_eq!(<v>actual<>, <v>expected<>, "<v>message<>");

assert_ne!(<v>actual<>, <v>not_expected<>);
assert_ne!(<v>actual<>, <v>not_expected<>, "<v>message<>");<>
@
@ summary



## Test - Definition
@
@ new, create


### Test - Define Test Module

<cb>#[cfg(test)]<>

Usage

<cb>#[cfg(test)]
mod test {

	<v>...<>
}<>
@
@ #[cfg(test)]



### Test - Define Test Module - Import All

<cb>use super::*;<>

Usage:

<cb>#[cfg(test)]
mod test {
	use super::*;

	<v>...<>
}<>


Imports all functions, structs and traits from the parent module.
@
@ super, super::*



### Test - Define Test Function

<cb>#[test]<>

Usage:

<cb>#[test]
fn <v>basic_test<>() {
	<v>...<>
}<>

<cb>#[cfg(test)]
mod test {

	#[test]
	fn <v>basic_test<>() {

		<#>Assertions Here<>

		assert(<v>expression<>, "<v>Fail message.<>");
	}
}<>
@
@ #[test]



### Test - Define Test Function - Disable

<cb>#[ignore]<>

Usage:

<cb>#[test]
\#[ignore]
fn <v>basic_test<>() {
	<v>...<>
}<>


Disables a test.

Disables unused code warnings.
@
@ disable, ignore, skip, no warnings
@ #[ignore]



## Test - Assertions
@
@ assert macros


### Test Assertion

<cb>assert!(<v>expression<>);<>

Usage:

<cb>#[test]
fn <v>assert_test<>() {
	assert!(<v>expression<>);
}<>


Passes when the expression returns true.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.assert.html">assert<>
@
@ is true
@ assert!(), assert-only, assert!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Test Assertion - Equals

<cb>assert_eq!(<v>actual<>, <v>expected<>);<>

Usage:

<cb>#[test]
fn <v>assert_test<>() {
	assert_eq!(<v>actual<>, <v>expected<>);
}<>


Passes when actual equals expected.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.assert_eq.html">assert_eq<>
@
@ is equal
@ assert_eq!(), assert_eq-only, assert_eq!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Test Assertion - Not Equals

<cb>assert_ne!(<v>actual<>, <v>not_expected<>);<>

Usage:

<cb>#[test]
fn <v>assert_test<>() {
	assert_ne!(<v>actual<>, <v>not_expected<>);
}<>


Passes when actual not equals expected.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.assert_ne.html">assert_ne<>
@
@ assert_ne!(), assert_ne-only, assert_ne!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Test Assertion - Panic

<cb>\#[should_panic]
\#[should_panic(expected = "<v>Message when panics as expected.<>")]<>

Usage:

<cb>\#[test]
\#[should_panic]
fn <v>this_should_panic<>() {
    <v>some_function()<>;
}<>
@
@ should, for, when, panics
@ \#[test], \#[should_panic]



### Test Assertion - Assertion Custom Message

<cb>assert!(<v>expression<>, "<v>Message<>");
assert!(<v>expression<>, "<v>Message {} {}<>", <v>param_1<>, <v>param_2<>, ...);<>

<cb>assert_eq!(<v>actual<>, <v>expected<>, "<v>Message<>");
assert_eq!(<v>actual<>, <v>expected<>, "<v>Message {} {}<>", <v>param_1<>, <v>param_2<>, ...);<>

<cb>assert_ne!(<v>actual<>, <v>not_expected<>, "<v>Message<>");
assert_ne!(<v>actual<>, <v>not_expected<>, "<v>Message {} {}<>", <v>param_1<>, <v>param_2<>, ...);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.assert.html">assert<> | <l "https://doc.rust-lang.org/std/macro.assert_eq.html">assert_eq<> | <l "https://doc.rust-lang.org/std/macro.assert_ne.html">assert_ne<>
@
@ assert!(), assert_eq!(), assert_ne!()



### Test Debug Assertion

<cb>debug_assert!(<v>expression<>);<>

Usage:

<cb>#[test]
fn <v>assert_test<>() {
	debug_assert!(<v>expression<>);
}<>


Passes when the expression returns true.

This assertion is only present during development (non optimized builds).
This is removed by the compilen in the production version.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.debug_assert.html">debug_assert<>
@
@ is true
@ debug_assert!(), debug_assert-only, debug_assert!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Test Debug Assertion - Equals

<cb>debug_assert_eq!(<v>actual<>, <v>expected<>);<>

Usage:

<cb>#[test]
fn <v>assert_test<>() {
	debug_assert_eq!(<v>actual<>, <v>expected<>);
}<>


Passes when actual equals expected.

This assertion is only present during development (non optimized builds).
This is removed by the compilen in the production version.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.debug_assert_eq.html">debug_assert_eq<>
@
@ is equal
@ debug_assert_eq!(), debug_assert_eq-only, debug_assert_eq!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Test Debug Assertion - Not Equals

<cb>debug_assert_ne!(<v>actual<>, <v>not_expected<>);<>

Usage:

<cb>#[test]
fn <v>assert_test<>() {
	debug_assert_ne!(<v>actual<>, <v>not_expected<>);
}<>


Passes when actual not equals expected.

This assertion is only present during development (non optimized builds).
This is removed by the compilen in the production version.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.debug_assert_ne.html">debug_assert_ne<>
@
@ debug_assert_ne!(), debug_assert_ne-only, debug_assert_ne!-only
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only



### Test Debug Assertion - Assertion Custom Message

<cb>debug_assert!(<v>expression<>, "<v>Message<>");
debug_assert!(<v>expression<>, "<v>Message {} {}<>", <v>param_1<>, <v>param_2<>, ...);<>

<cb>debug_assert_eq!(<v>actual<>, <v>expected<>, "<v>Message<>");
debug_assert_eq!(<v>actual<>, <v>expected<>, "<v>Message {} {}<>", <v>param_1<>, <v>param_2<>, ...);<>

<cb>debug_assert_ne!(<v>actual<>, <v>not_expected<>, "<v>Message<>");
debug_assert_ne!(<v>actual<>, <v>not_expected<>, "<v>Message {} {}<>", <v>param_1<>, <v>param_2<>, ...);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.debug_assert.html">debug_assert<> | <l "https://doc.rust-lang.org/std/macro.debug_assert_eq.html">debug_assert_eq<> | <l "https://doc.rust-lang.org/std/macro.debug_assert_ne.html">debug_assert_ne<>
@
@ debug_assert!(), debug_assert_eq!(), debug_assert_ne!()



### Test Assertions - assert!() vs debug_assert!()

<c>assert!()
assert_eq!()
assert_ne!()<> :

<*>Is present in development and release versions.<>


<c>debug_assert!()
debug_assert_eq!()
debug_assert_ne!()<> :

<*>Is present in development version only.
Removed by the compiler in the release version.
Use in code to test only in development.<>
@
@ versus
@ assert!(), assert_eq!(), assert_ne!()
@ debug_assert!(), debug_assert_eq!(), debug_assert_ne!()



## Test Fixtures
There is no specific language features to setup and teardown test fixtures.

Instead, implement your own <c>setup()<> and <c>teardown()<> functions and call them from each test method.



### Test Fixture - Setup

There is no special built-in Rust features for creating and manage test environments.
Instead, define your own and call from your test methods.

Define:

<cb>fn setup() -> <v>setup_data_type<> {
	<v>...<>
}<>

Use:

<cb>\#[test]
fn <v>some_test<>() {

	let <v>test_data<> = setup();
	<v>...<>
}<>
@
@ setup(), create, define



# Printing
@
@ printing-only



### dbg!

<cb>dbg!(<v>str_1<>)<>

Prints the text along with module file name, line number and variable name.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.dbg.html">dbg!<>
@
@ debug print, line number, file name
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ std::dbg!(), dbg!()



### eprint!

<cb>eprint!("Print this.");<>

<cb>eprint!("Values {} and {}.", <v>a<>, <v>b<>);<>


Prints to the error out.
No newline is sent.


Example:

<cb>for <v>value<> in 0..=3 {
	eprint!("{} ", <v>value<>);
}
eprintln!();

<#>// Prints: "0 1 2 3 "<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.eprint.html">eprint<>
@
@ print, printing, error out, errout, no newline
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ eprint, eprint!(), eprint-only, eprint!-only



### eprintln!

<cb>eprintln!()<>

<cb>eprintln!("Print this.");<>

<cb>eprintln!("{}", <v>a<>);<>

<cb>eprintln!("{} and {}.", <v>a<>, <v>b<>);<>


Prints a line followed by newline to the standard out.


Examples:

Print Empty Line:

<cb>eprintln!()<>

Print Variable Value:

<cb>let <v>name<> = "<v>your_name_here<>";

eprintln!("My name is {}.", <v>name<>);

<#>// Prints "My name is your_name_here".<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.eprintln.html">eprintln<>
@
@ print line, newline, printing, error out, errout
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ eprintln!(), eprintline, p!(), eprintln-only, eprintln!-only



### print!

<cb>print!("Print this.");<>

<cb>print!("Values {} and {}.", <v>a<>, <v>b<>);<>


Prints to the standard out.
No newline is sent.


Example:

<cb>for <v>value<> in 0..=3 {
	print!("{} ", <v>value<>);
}
println!();

<#>// Prints: "0 1 2 3 "<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.print.html">print<>
@
@ standard out, stdout, no newline, macros
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ print, print!(), print-only, print!-only



### print! - Stay on Line

<cb>print!("Print and stay on line.\\r");<>

<cb>print!("{}\\r", <v>value<>);<>

Usage:

<cb>use std::io::stdout;
use std::io::Write;

print!("{}\\r", <v>value<>);
stdout().flush().unwrap();<>


Prints to the standard out.
No newline is sent.

Requires the <c>.flush()<> to submit the print.
Using <c>std::io::Write<> brings in the <c>flush()<> trait.


Example:

<cb>use std::io::stdout;

for <v>value<> in (5..=0).rev() {
	print!("{}\\r", <v>value<>);
	stdout().flush().unwrap();
}
println!();

<#>// Prints: "5", "4", "3", "2", "1", "0"<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.print.html">print<>
@
@ standard out, stdout, no newline, macros
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ print, print!(), print-only, print!-only
@ stdio().flush(), .flush()



### println!

<cb>println!()<>

<cb>println!("Print this.");<>

<cb>println!("{}", <v>a<>);<>

<cb>println!("{} and {}.", <v>a<>, <v>b<>);<>


Prints the value followed by newline to the standard out.


Examples:

Print Empty Line:

<cb>println!()<>

Print Variable Value:

<cb>let <v>name<> = "<v>your_name_here<>";

println!("My name is {}.", <v>name<>);

<#>// Prints "My name is your_name_here".<><>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.println.html">println<>
@
@ standard out, stdout, line, newline
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ println!(), printline, macros, p!(), println-only, println!-only



### println! - Debug String

<cb>println!("{:?}", <v>value<>);<>


Prints the debug version of the value.

For structs, this includes property names with their values.


Must implement:

<cb>#[derive(Debug)]<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.println.html">println<>
@
@ standard out, stdout, printing line, newline
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ #[derive(Debug)], derive, :?, {:?}, macros
@ println!(), printline, p!(), println-only, println!-only



### println! - Debug String, Formatted

<cb>println!("{:?#}", <v>value<>);<>


Prints a formatted debug version of the value.

For structs, this includes property names with their values.


Must implement:

<cb>#[derive(Debug)]<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.println.html">println<>
@
@ standard out, stdout, printing line, newline, pretty print
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ #[derive(Debug)], derive, :#?, {:#?}, macros
@ println!(), printline, p!(), println-only, println!-only



### println! - Escape { }

<cb>println!("{{ ... }}")<>


Escape <c>{<> and <c>}<> by doubling them up.
@
@ {{, }}



### write!

<cb>write!(<v>write_1<>, <v>str_1<>)<>

Usage:

<cb>use std::io::{Write, Result};

write!(<v>write_1<>, <v>str_1<>)<>

Returns:

<cb>Result\<()><>


Prints the value to <v>write_1<>.

<v>write_1<> needs to implement the Write trait.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.write.html">write<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/trait.Write.html">Write<> (trait)
@
@ standard out, stdout, no newline, macros
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ write, write!(), write-only, write!-only



### writeln!

<cb>writeln!(<v>write_1<>, <v>str_1<>)<>

Usage:

<cb>use std::io::{Write, Result};

writeln!(<v>write_1<>, <v>str_1<>)<>

Returns:

<cb>Result\<()><>


Prints the value followed by newline to <v>write_1<>.

<v>write_1<> needs to implement the Write trait.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.writeln.html">writeln<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/trait.Write.html">Write<> (trait)
@
@ write, line, newline
@ standard macros, standard-macros-only, standard-macro-only, std-macro-only, std-macros-only
@ writeln!(), printline, macros, p!(), writeln-only, writeln!-only



### writeln! - To Standard Out

<cb>writeln!(stdio(), <v>std_1<>)
stdio().flush();<>

Usage:

<cb>use std::io::stdout;
use std::io::Write;

writeln!(stdio(), <v>std_1<>)
stdio().flush();<>


Writes values to the standard out.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.writeln.html">writeln<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/fn.stdio.html">stdio()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/trait.Write.html">Write<>
@
@ std out
@ std::io::stdio(), io::stdio()



### writeln! - To Standard Error

<cb>writeln!(stdio(), <v>std_1<>)
stdio().flush();<>

Usage:

<cb>use std::io::stderr;
use std::io::Write;

writeln!(stderr(), <v>std_1<>)
stdio().flush();<>


Writes values to the standard error.

Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.writeln.html">writeln<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/fn.error.html">error()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/trait.Write.html">Write<>
@
@ std err
@ std::io::stderr(), io::stderr()



# How To
@
@ how-to


### Command - Execute

<cb>cmd!(<v>command<> <v>param1<> <v>param2<> <v>...<>)<>

Equivalent To:

<cb>let <v>command1<> = std::process::Command::new("<v>command<>");
<v>command<>.arg("<v>param1<>");
<v>command<>.arg("<v>param2<>");<>

The <c>cmd!<> command and parameters do not require quotes around the names (<m>confirm<>).
@
@ cmd!, std::process::Command:



### Command Line Arguments - Get

<cb>= args().collect()<>

Full Form:

<cb>use std::env::args();

let <v>args<>: Vec\<String> = env::args().collect();<>

Returns:

<cb>Vec\<String><>


Returns the command line arguments passed to your application.

Includes the command name (first entry).


Example:

<cb>use std::env::args;

fn main() {

	let <v>args<>: Vec\<String> = args().collect();

	let <v>command<> = &<v>args<>[0];
	let <v>first<> = &<v>args<>[1];

	println!("All:     {:?}", <v>args<>);
	println!("Command: {}", <v>command<>);
	println!("First:   {}", <v>first<>);
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>.<l "https://doc.rust-lang.org/std/env/fn.args.html">args()<>
@
@ parameters, params, args
@ std::env::args(), env::args(), args(), args().collect()



### Command Line Arguments - Get All Except First (Command Name)

<cb>= args().skip(1).collect()<>

Full Form:

<cb>use std::env::args;

let <v>args<>: Vec\<String> = args().skip(1).collect();<>

Returns:

<cb>Vec\<String><>


Returns the command line arguments passed to your application.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>.<l "https://doc.rust-lang.org/std/env/fn.args.html">args()<>
@
@ parameters, params, args
@ std::env::args(), env::args(), args(), args().collect()



### Compile - Small Code

cargo.toml:

<cb>[profile.release]
codegen-units = 1
lto = true
opt-level = "z"
panic = "abort"
strip = true<>


Compile:

<cb>cargo --release<>


Commented cargo.toml:

<cb>[profile.release]
codegen-units = 1	<#># Minimizes Size By Reducing Parallel Build Processes<>
lto = true			<#># Enable Link Time Optimization<>
opt-level = "z"		<#># Optimize for size<>
panic = "abort"		<#># Prevents stack unwinding, etc.<>
strip = true		<#># Strips symbols<><>
@
@ command, cargo, --release



### Current Working Directory - Get

<cb>= current_dir()<>

Usage:

<cb>use std::env::current_dir;

= current_dir()<>

Returns:

<cb>Result\<PathBuf><>


Returns the current directory.


Example:

<cb>use std::env::current_dir;
use std::path::PathBuf;

let <v>path<>: PathBuf = current_dir().unwrap();
let <v>directory<> = <v>path<>.to_str().unwrap();

println!("Current Directory: {}", &<v>directory<>);<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/fn.current_dir.html">current_dir<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/path/index.html">path<>::<l "https://doc.rust-lang.org/std/path/struct.PathBuf.html">PathBuf<>
@
@ pwd, cwd, path
@ std::env::current_dir(), env::current_dir(), current_dir()



### Function - Curry

<cb>= move |<v>...<>| <v>function_1<>(<v>a<>, <v>...<>)<>


Use a closure to curry a function parameter.


Example:

<cb>fn add(<v>x<>: isize, <v>y<>: isize, <v>z<>: isize) -> isize {
	<v>x<> + <v>y<> + <v>z<>
}

let <v>a<> = 1;
let <v>b<> = 2;
let <v>c<> = 3;

let <v>curried<> = |<v>y<>, <v>z<>| add(<v>a<>, <v>y<>, <v>z<>);

let <v>total<> = <v>curried<>(<v>b<>, <v>c<>);

println!("{}", <v>total<>);

<#>// Prints: 6<><>
@
@ curried, parameter, closure



### Index Operations - Implement

To implement index operations, implement traits Index, IndexMut for usize, Range, RangeInclusive, RangeFrom, RangeTo

Implement:

<cb>std::ops::Index
std::ops::IndexMut<>

For These:

<cb>usize
std::ops::Range
std::ops::RangeInclusive
std::ops::RangeFrom
std::ops::RangeTo<>


Implement these to implement index operations on a type (<c>= <v>item<>[<v>index<>]<>, <c>= <v>item<>[<v>from<>..<v>to<>]<>, etc.).


Example:

<cb>use std::ops::{Index, IndexMut};
use std::ops::{Range, RangeInclusive, RangeFrom, RangeTo};

pub struct Data\<V> {
    <v>items<>: Vec\<V>,
}

<#>// Index: [index] ─────────────────── //<>

impl\<V> Index\<usize> for Data\<V> {
    type <v>Output<> = V;

    fn index(&self, <v>index<>: usize) -> &Self::Output {
        &self.<v>items<>[<v>index<>]
    }
}

impl\<V> IndexMut\<usize> for Data\<V> {
    fn index_mut(&mut self, <v>index<>: usize) -> &mut Self::Output {
        &mut self.<v>items<>[<v>index<>]
    }
}

<#>// Range: [from..to] ──────────────── //<>

impl\<V> Index\<Range\<usize>> for Data\<V> {
    type Output = [V];

    fn index(&self, range: Range\<<v>usize<>>) -> &Self::Output {
        &self.<v>items<>[<v>range<>]
    }
}

impl\<V> IndexMut\<Range\<usize>> for Data\<V> {
    fn index_mut(&mut self, <v>range<>: Range\<usize>) -> &mut Self::Output {
        &mut self.<v>items<>[<v>range<>]
    }
}

<#>// Range: [from..=to] ─────────────── //<>

impl\<V> Index\<RangeInclusive\<usize>> for Data\<V> {
    type Output = [V];

    fn index(&self, range: RangeInclusive\<<v>usize<>>) -> &Self::Output {
        &self.<v>items<>[<v>range<>]
    }
}

impl\<V> IndexMut\<RangeInclusive\<usize>> for Data\<V> {
    fn index_mut(&mut self, <v>range<>: RangeInclusive\<usize>) -> &mut Self::Output {
        &mut self.<v>items<>[<v>range<>]
    }
}

<#>// Range: [from..] ────────────────── //<>

impl\<V> Index\<RangeFrom\<usize>> for Data\<V> {
    type Output = [V];

    fn index(&self, range: RangeFrom\<<v>usize<>>) -> &Self::Output {
        &self.<v>items<>[<v>range<>]
    }
}

impl\<V> IndexMut\<RangeFrom\<usize>> for Data\<V> {
    fn index_mut(&mut self, <v>range<>: RangeFrom\<usize>) -> &mut Self::Output {
        &mut self.<v>items<>[<v>range<>]
    }
}

<#>// Range: [..to] ──────────────────── //<>

impl\<V> Index\<RangeTo\<usize>> for Data\<V> {
    type Output = [V];

    fn index(&self, range: RangeTo\<<v>usize<>>) -> &Self::Output {
        &self.<v>items<>[<v>range<>]
    }
}

impl\<V> IndexMut\<RangeTo\<usize>> for Data\<V> {
    fn index_mut(&mut self, <v>range<>: RangeTo\<usize>) -> &mut Self::Output {
        &mut self.<v>items<>[<v>range<>]
    }
}

<#>// Main ───────────────────────────── //<>

fn main() {

	let <v>items<> = Data {<v>items<>: vec![1, 2, 3, 4, 5]};
    let <v>item<> = &<v>items<>[2];

    println!("Item: {}", <v>item<>);

	for item in &items[1..4] {
		println!("{}", item);
	}
}<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/trait.Index.html">Index<> | <l "https://doc.rust-lang.org/std/ops/trait.IndexMut.html">IndexMut<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/ops/index.html">ops<>::<l "https://doc.rust-lang.org/std/ops/struct.Range.html">Range<> | <l "https://doc.rust-lang.org/std/ops/struct.RangeInclusive.html">RangeInclusive<> | <l "https://doc.rust-lang.org/std/ops/struct.RangeFrom.html">RangeFrom<> | <l "https://doc.rust-lang.org/std/ops/struct.RangeTo.html">RangeTo<>

@
@ [], .., ..=, index, range, overload operator



### Input - Read

<cb>= stdin().read_line(&mut <v>value<>)<>

Usage:

<cb>use std::io::stdin;

let mut <v>value<> = String::new();

match stdin().read_line(&mut <v>value<>) {
	Ok(_) => {
		<v>value<>.pop();  <#>// Removes the \\n at the end the input.<>
		<v>value<>
	}

	Err(<v>error<>) => {
		<v>...<>
	}
}<>

Returns:

<cb>Result\<usize><>


Reads from the standard input into <c>value<>.

Returns the number of bytes read.
Includes the <c>\\n<> used to complete the input.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/io/index.html">io<>::<l "https://doc.rust-lang.org/std/io/struct.Stdin.html">Stdin<>.<l "https://doc.rust-lang.org/std/io/struct.Stdin.html#method.read_line">read_line()<>
@
@ std::io::stdin(), io::stdin(), stdin(), stdin().read_line(), .read_line()



### Minimalist Application

<cb>#![no_std]
\#![no_main]

extern crate libc;

\#[no_mangle]
pub extern "c" fn main() -> isize {
	0
}

\#[panic_handler]
fn my_panic(_info: &core::panic::PanicInfo) -> ! {
	loop{}
}<>


Creates the smallest code possible.


Use Small Code compiler options.
@
@ small, smallest, tiny
@ #![no_std], no_std,  #![no_main], no_main



### OS - Get

<cb>= std::env::consts::OS<>

Returns:

<c>&str<>

Possible Values:

<cb>"android"
"dragonfly"
"freebsd"
"ios"
"linux"
"macos"
"netbsd"
"openbsd"
"solaris"
"windows"<>


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/env/index.html">env<>::<l "https://doc.rust-lang.org/std/env/consts/index.html">consts<>::<l "https://doc.rust-lang.org/std/env/consts/constant.OS.html">OS<>
@
@ std::env::consts::OS, env::consts::OS, consts::OS
@ OS, operating system, macos, android, dragonfly, freebsd, ios, linux, macos, netbsd, openbsd, solaris, windows



### Pass String or &str

<cb>\<<v>IntoString<>: Into\<String>><>

Usage:

<cb>fn <v>some_function<>\<<v>IntoString<>: Into\<String>>(<v>string_1<>: <v>IntoString<>) {
	= <v>string_1<>.into()
}<>


Use the <c><link "?q=into-only trait">Into<><> trait when you need to pass either <c>String<> or <c>&str<>.

Call .into() to convert to an actual String.


Example:

<cb>fn print_string\<<v>IntoString<>: Into\<String>>(<v>string_1<>: <v>IntoString<>) {
	let <v>actual<> = <v>string_1<>.into();
	println!("{}", &actual);
}

print_string("<v>As &str<>");
print_string(String::from("<v>As String<>"));

<#>// Prints:
//
//    As &str
//    As String<><>
@
@ either or, passing, into, parameter, IntoString
@ Into\<String>



### Project Directory Structure - Standard App Layout

<cb><v>project<>/
├── .git/
├── .gitignore
│
├── Cargo.toml
│
├── src/
│   ├── <b>main.rs<>
│   ├── <v>module_file<>.rs
│   └── <v>module_directory<>/
│       └── mod.rs
│
└── tests/
    ├── tests.rs
    └── <v>test_module_1<>.rs<>
@
@ standard, std rust, src, main.rs, tests, setup



### Project Directory Structure - Standard Library Layout

<cb>.<v>library<>/
├── .git/
├── .gitignore
│
├── Cargo.toml
│
├── src/
│   ├── <b>lib.rs<>
│   ├── prelude.rs
│   ├── <v>module_file<>.rs
│   └── <v>module_directory<>/
│       └── mod.rs
│
└── tests/
    ├── tests.rs
    └── <v>test_module_1<>.rs<>
@
@ standard, std rust, src, lib.rs, tests, crate, setup



### Resource File - Binary - Include

<cb>= include_bytes!("<v>path<>/<v>binary_file<>")<>

Usage:

<cb>const BINARY: &[u8] = include_bytes!("<v>path<>/<v>binary_file<>");<>

Returns:

<cb>&[u8]<>


Adds a binary resource file into the application or library.

The path is relative to the current module.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.include_bytes.html">include_bytes!<>
@
@ load, reference, image, bytes
@ std::include_bytes!(), include_bytes!()



### Resource File - Text - Include

<cb>= include_str!("<v>path<>/<v>file.txt<>")<>

Usage:

<cb>const TEXT: &str = include_str!("<v>path<>/<v>file.txt<>");<>

Returns:

<cb>&str<>


Adds a text resource file into the application or library.

The path is relative to the current module.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/macro.include_str.html">include_str!<>
@
@ load, reference
@ std::include_str!(), include_str!()



### Sleep

<cb>sleep(<v>duration<>);<>

Usage:

<cb>use std::thread::sleep;
use std::time::Duration;

let <v>sleep_duration<> = Duration::from_millis(<v>time_in_milliseconds<>);

sleep(<v>sleep_duration<>);<>


Suspends the current thread for the time defined in the duration.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/thread/index.html">thread<>::<l "https://doc.rust-lang.org/std/thread/fn.sleep.html">sleep()<>
Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/time/index.html">time<>::<l "https://doc.rust-lang.org/std/time/struct.Duration.html">Duration<>
@
@ std::thread::sleep, sleep()



### String - Return &str or String

<cb>Cow\<'a, str><>

<cb>fn \<'a><v>function_1<>(<v>...<>) -> Cow\<'a, str>  {
	<v>...<>
}<>


Use Cow to return either a str or String from a function.


Example:

<cb>use std::borrow::Cow;

fn dot_dot_dot\<'a>(<v>text<>: &'a str) -> Cow\<'a, str> {
	if <v>text<>.chars().count() \<= 5 {
		Cow::Borrowed(<v>text<>)
	}
	else {
		let <v>start<>: String = <v>text<>.chars().take(10).collect();
		Cow::Owned([<v>start<>, "..."].concat())
	}
}

println!("{}", dot_dot_dot("12345"));
println!("{}", dot_dot_dot("1234567890"));

<#>// Prints:
//
// 12345
// 12345...<><>
@
@ cow, cow-only, patterns



### System - Exit, Return Exit Code

<cb>exit(<v>exit_code<>);<>

Usage:

<cb>use std::process::exit;

exit(<v>exit_code<>);<>


Returns from execution with the given exit code.


Recommended Exit Codes:

	0	OK
	1	General Error
	2	Command-line Validation


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/process/index.html">process<>::<l "https://doc.rust-lang.org/std/process/fn.exit.html">exit<>
@
@ error code, status, number, end program, stop, quit, .exit(), .exit(), .quit(), application, program
@ std::process::exit(), process::exit(), exit()



### Unit Tests - Count

From Bash CLI:

<cb>cargo test -- --list | grep ": test" | wc -l<>



### Variable - Replace Value

<cb>= replace(<v>destination<>, <v>replacement_value<>)<>

Usage:

<cb>use std::mem::replace;

= replace(<v>destination<>, <v>replacement_value<>)<>


Replaces a value with a new value. Returns the original value.


Uses:
Move a value out of a mutable reference, especially behind a complex structure.
Update a value inside a mutable variable without violating the borrow checker.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/mem/index.html">mem<>::<l "https://doc.rust-lang.org/std/mem/fn.replace.html">replace()<>
@
@ update
@ std::mem::replace(), mem::replace(), ::replace(), replace()



### Variable - Swap Values

<cb>= swap(&mut <v>item_1<>, &mut <v>item_2<>)<>

Usage:

<cb>use std::mem::swap;

= swap(&mut <v>item_1<>, &mut <v>item_2<>)<>


Swaps the values of two variables while keeping mutability.

The variables must be of the same type.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/mem/index.html">mem<>::<l "https://doc.rust-lang.org/std/mem/fn.swap.html">swap()<>
@
@ update
@ std::mem::swap(), mem::swap(), ::swap(), swap()



### Variable - Take Values

<cb>= take(&mut <v>item_1<>)<>

Usage:

<cb>use std::mem::take;

= take(&mut <v>item_1<>)<>


Takes the value from a variable and replaces it with the default value.


Rust Docs: <l "https://doc.rust-lang.org/std/index.html">std<>::<l "https://doc.rust-lang.org/std/mem/index.html">mem<>::<l "https://doc.rust-lang.org/std/mem/fn.take.html">take()<>
@
@ update
@ std::mem::take(), mem::take(), ::take(), take()



# Naming Conventions
@
@ Names, naming-conventions-only, conventions-only


## Naming Conventions - Basics

<table><col>Constant<><col><c><v>UPPER_SNAKE_CASE<><><>
<col> <>
<col>Constructor - General<><col>new

<c>with_<v>more_details<><><>
<col> <>
<col>Constructor - Conversion<><col><c>from_<v>some_other_type<><><>
<col> <>
<col>Crate<><col>No Convention?<>
<col> <>
<col>Enum Variant<><col><c><v>TitleCase<><><>
<col> <>
<col>Feature<><col>No Convention?<>
<col> <>
<col>Function<><col><c><v>snake_case<><><>
<col> <>
<col>Lifetime<><col><c><v>lowercase<><><>
<col> <>
<col>Method<><col><c><v>snake_case<><><>
<col> <>
<col>Macro<><col><c><v>snake_case<>!<><>
<col> <>
<col>Module<><col><c><v>snake_case<><><>
<col> <>
<col>Static<><col><c><v>UPPER_SNAKE_CASE<><><>
<col> <>
<col>Trait<><col><c><v>TitleCase<><><>
<col> <>
<col>Type<><col><c><v>TitleCase<><><>
<col> <>
<col>Type Parameter<><col><c><v>T<><>  (Upper Case Letter)

<c><v>TitleCase<><><>
<col> <>
<col>Variable<><col><c><v>snake_case<><><>
<col> <>
<col>Variable - Constants<><col><c><v>UPPER_SNAKE_CASE<><><>
<col> <>
<col>Variable - Unused<><col><c><v>_leading_underscore<><><><>

See:
<l>https://rust-lang.github.io/api-guidelines/naming.html<>
@
@ summary



## Naming Convention Details


### Convention - Constants

<cb><v>UPPER_SNAKE_CASE<><>


### Convention - Constructors - General

<cb>new<>

<cb>with_<v>more_details<><>


### Convention - Constructors - Conversion

<cb>from_<v>some_other_type<><>


### Convention - Crates

No convention?


### Convention - Modules

<cb><v>snake_case<><>


### Convention - Enum Variants

<cb><v>TitleCase<><>


### Convention - Features

No convention?

<m>See: C-FEATURE
<l>https://rust-lang.github.io/api-guidelines/naming.html#c-feature<><>


### Convention - Functions

<cb><v>snake_case<><>


### Convention - Lifetimes

<cb>lowercase<>

Use short words.
Some recommend a single letter but I strongly disagree.


### Convention - Macros

<cb><v>snake_case<>!<>


### Convention - Methods

<cb><v>snake_case<><>


### Convention - Statics

<cb><v>UPPER_SNAKE_CASE<><>


### Convention - Traits

<cb><v>TitleCase<><>


### Convention - Types

<cb><v>TitleCase<><>


### Convention - Type Parameters

<cb><v>TitleCase<><>

<cb><v>T<><>

Short concise name in TitleCase.
Some recommend a single uppercase letter.


### Convention - Variables

<cb><v>snake_case<><>


### Convention - Variables - Constants

<cb><v>UPPER_SNAKE_CASE<><>



### Convention - Variables - Unused

<cb><v>_leading_underscore<><>

The compiler will ignore unused variables when they have a leading underscore.



# Reference - Directories


## Linux / Mac


### Linux / Mac - User Cargo Directory

<cb>$HOME/.cargo<>

Cargo's user root directory.


### Linux / Mac - User Cargo Bin Directory

<cb>$HOME/.cargo/bin<>

Contains Cargo commands such as:

<indent><c>cargo, rustc, rustup<><>
@
@ .cargo/bin, bin


### Linux / Mac - User Cargo Environment Directory

<cb>$HOME/.cargo/env<>
@
@ .cargo/env, env


### Linux / Mac - User Rustup Directory

<cb>$HOME/.rustup<>

Contains metadata, toolchains.

Configure to this directory with <c>RUSTUP_HOME<>
@
@ .rustup



# Reference - Symbols

Official Rust Docs: <l https://doc.rust-lang.org/book/appendix-02-operators.html>Operator Appendix<>
@
@ symbols-only, symbol-only, sym-only


### Symbol ;

Command Terminator

<cb>println!("This is terminated by a semicolon");<>
@
@ semicolon



### Symbol ;

Array Type Size Separator

<cb>let <v>array_1<>: [<v>T<>; <v>size<>] = <v>...<>;<>
@
@ semicolon



### Symbol .

Dot Operator

The dot operator identifies the next item as an instance field or method.
@
@ dot operator



### Symbol ..

Iterator

Returns values starting with the minimum value to up to the value before the end value.

<cb>= <v>start<>..<v>end_plus_one<><>
@
@ dot operator



### Symbol ..

Struct Copy Operator

Creates a copy of a struct item.

<cb>= <v>Struct1<> { ..<v>item1<> }<>
@
@ dot operator, struct



### Symbol ..=

Iterator

Returns values starting with the starting value to up to and including the end value.

<cb>= <v>start<>..=<v>end<><>
@
@ dot operator



### Symbol :

Type Definition

<cb>let <v>value<>: <v>Type<>;<>



### Symbol :

Generic Type Bound

Bounds the trait and lifetime of a type.

<cb>fn <v>function_1<>\<<v>T<>: <v>PartialEq<>> () {}<>

<cb>fn <v>function_1<>\<<v>T<>: '<v>a<>> () {}<>



### Symbol :

Structure Field Assignment

<cb>let <v>value<> = <v>Struct1<> {
	<v>field<>: <v>value<>
};<>



### Symbol ::

Namespace Path Separator

<cb><v>std<>::<v>vec<>::<v>Vec<><>
@
@ double colon



### Symbol ::

Associative Function (static method) Accessor:

<cb><v>Type<>::<v>function<>()<>
@
@ double colon



### Symbol ::*

Import all public items from the module.

<cb>used <v>library<>::<v>module<>::*<>
@
@ double colon



### Symbol ::\<>

Type Annotation / Turbofish.

<cb>::\<><>

<cb>= <v>item<>.into::\<<v>TargetType<>>()<>
@
@ ::\<>, turbofish



### Symbol :?

Return Debug String (Format)

<cb>println!("{:?}", <v>value<>);<>
@
@ {:?}



### Symbol :#?

Return Formatted Debug String (Format)

<cb>println!("{:#?}", <v>value<>);<>
@
@ {:?}, {:#?}, #?



### Symbol '

Defines Loop Name

<cb>'<v>loop_name<> {
	<v>...<>
	break <v>loop_name<>;
}<>



### Symbol ''

A Character Literal

<cb>= '<v>c<>'<>



### Symbol '_

Anonymous Lifetime (compiler inferred lifetime)

<cb><v>function_1<>\<'_> {
	<v>...<>
}<>



### Symbol 'a

Defines Lifetime

<cb><v>function_1<>\<'<v>a<>>() {
	<v>...<>
}<>

<cb><v>function_1<>\<'<v>a<>, '<v>b<>>() {
	<v>...<>
}<>
@
@ 'b, 'c



### Symbol 'static

Static Lifetime (the item remains as long as the program runs).



### Symbol ""

A String Literal

<cb>= "<v>A String<>"<>



### Symbol *

Dereference 

Dereferences a reference (pointer).
Points to actual data.

<cb>= *<v>a<><>



### Symbol *const

Raw Pointer (Unsafe)

<cb>let *const <v>a<>;<>



### Symbol *mut

Raw Mutable Pointer (Unsafe)

<cb>let *mut <v>a<>;<>



### Symbol !

Bitwise Complement / Inverse Operator

<cb>= !<v>value<><>



### Symbol !

A Rust Macro

<cb><v>macro<>!();

= <v>macro<>!()<>



### Symbol !

The Never Type

Returned by the compiler to indicate a code block that has nowhere to go on completion.



### Symbol &

Reference (pointer) to a Memory Location


Examples:

New reference to a variable:

<cb>let <v>a<> = &<v>b<>;<>

Pointer parameter to outside variable:

<cb>fn print(<v>value<>: &str) {
	<v>...<>
}<>
@
@ pointer



### Symbol &

Borrow Resource

<cb>= &<v>variable_1<><>


Examples:

<cb>let <v>owner<> = "42".to_string();

let <v>borrower<> = &<v>owner<>;

println!("{}", &<v>owner<>);
println!("{}", <v>borrower<>);

<#>// Prints:
//
//    "42"
//    "42"<><>



### Symbol &

Bitwise And

<cb>= <v>a<> & <v>b<><>


Example:

<cb>let <v>a<> = 0b1100;
let <v>b<> = 0b0101;

let <v>bitwise_and<> = <v>a<> & <v>b<>;

println!("Bitwise And = {:b}.", <v>bitwise_and<>);

<#>// Prints "Bitwise And = 100"<><>
@
@ binary



### Symbol &&

Logical And Operator

<cb>= <v>a<> && <v>b<><>


Example:

<cb>let <v>a<> = true;
let <v>b<> = false;

let <v>logical_and<> = <v>a<> && <v>b<>;

println!("Locigal And = {}", <v>logical_and<>);

<#>// Prints "Locigal And = false"<><>
@
@ double ampersand



### Symbol &&

Double Reference (reference to a reference)

<cb>= &&<v>a<><>
@
@ double ampersand



### Symbol &*

A pointer to the dereferenced value behind a variable.

<cb>= &*<v>a<><>


Why: Because you need to pass a reference to the underlying type when the container is of a different type.
@
@ ampersand asterisk



### Symbol &mut

Reference (pointer) to a Mutable Memory Location

<cb>let <v>a<>: &mut:i32 = 42;<>
@
@ pointer



### Symbol &mut

Borrow a Mutable Resource with Intent to Change It

<cb>= &mut <v>variable_1<><>



### Symbol |

Bitwise Or

<cb>= <v>a<> | <v>b<><>


Examples:

<cb>let <v>a<> = 0b1100;
let <v>b<> = 0b0101;

let <v>bitwise_or<> = <v>a<> | <v>b<>;

println!("Bitwise Or = {:b}.", <v>bitwise_or<>);

<#>// Prints "Bitwise Or = 1101"<><>
@
@ binary



### Symbol ||

A Logical Or Operator

<cb>= <v>a<> || <v>b<><>

A Closure With No Parameters:

<cb>= || <v>...<><>

A Closure With A Parameter:

<cb>= |<v>param_1<>: <v>type<>| <v>...<><>


Examples:

Logical Or:

<cb>let <v>a<> = true;
let <v>b<> = false;

let <v>logical_or<> = <v>a<> || <v>b<>;

println!("Locigal Or = {}", <v>logical_or<>);

<#>// Prints "Locigal Or = true"<><>

Closure:

<cb>let <v>closure_1<> = || println!("This is a closure.");

<v>closure_1<>();

<#>// Prints "This is a closure."<><>
@
@ double pipe



### Symbol ^

Bitwise XOR

<cb>= <v>a<> ^ <v>b<><>


Examples:

<cb>let <v>a<> = 0b1100;
let <v>b<> = 0b0101;

let <v>bitwise_xor<> = <v>a<> ^ <v>b<>;

println!("Bitwise XOR = {:b}.", <v>bitwise_xor<>);

<#>// Prints "Bitwise XOR = 1001"<><>
@
@ binary



### Symbol []

Defines an Array

<cb>let <v>array_1<>: [<v>Type<>, <v>size<>];<>

<cb>= [<v>value_1<>, <v>value_2<>, <v>value_3<>]<>



### Symbol []

Access an Array Element

<cb>= <v>array_1<>[0]<>



### Symbol ()

Tuple

<cb>= (<v>value_1<>, <v>value_2<>, <v>value_3<>)<>



### Symbol ()

Unit

<cb> = ()<>

The empty value returned by a function that does not return a value.
@
@ unit



### Symbol //

Comment.

<cb><#>/// this is a comment.<><>



### Symbol ///

Document Comment

<cb><#>/// Function document.<>
fn <v>function_1<>() {
	<v>...<>
}<>


### Symbol #[]

Attribute

Applies to item or module.

<cb>#[<v>...<>]<>


Example:

<cb>#[deprecated]<>
@
@ #[, ], hash square bracket



### Symbol #![]

Attribute

Applies to the entire crate.

<cb>#![<v>...<>]<>


Example:

<cb>#![allow(dead_code)]<>
@
@ #![, ], hash bang, Exclamation



### Symbol _

Identifies an intentionally unused variable.

<cb>let <v>_unused_variable<> = 0;<>
@
@ leading underscore



### Symbol ?

Question Mark Operator (Error Propagation Operator).

Propagates a <c>Result::Err<> error to the parent function.


<cb>fn <v>some_function<> -> Result\<T, E> {
	<v>some_subfunction<>()?;
}<>
@
@ question mark, propagation, error



### Symbol dyn

Defines a dynamically dispatched trait.



# Memory

<*>Data Memory
Stack Memory
Heap Memory<>



### Memory - Data Memory
Used for data that is both static and fixed in size data.

Static - Data that is alive for the entire life of the application.

Example: String


### Memory - Stack Memory
Stores function variables.

Memory locations wouldn't change for the life of the function call.
The compiler optimizes this memory very efficiently.


### Memory - Heap Memory
For dynamically allocated memory, memory that may need to be moved, resized, added, deleted, etc.

This is the slowest and relatively most costly memory to use.


#### Heap Memory - Allocation
Allocating new data to the heap memory.


#### Heap Memory - Deallocation
Removing existing data from the heap memory.



### Memory - Where Is My Data Stored?

str:

<*>Stack
Heap
Application Binary<>


Primitives:
Structs with Primitives Only:

<*>Stack
(by default unless explicitly put on heap)<>


Size Known Only at Runtime (e.g. String, Vec):
Explicitly Placed on Heap (e.g. Box)

<*>Heap
(always dynamically allocated)<>



# Reserved Words

A reserved word is a keyword that has special meaning or purpose to Rust.
It can not be used as the name of variable, function or anything else.

<in><table><col><c>abstract<>       <><col><s>(For Future Use)<><>
<col><c>as<><><col>Casts a Variable, or Renames a Item<>
<col><c>async<><><col>Returns a Future<>
<col><c>await<><><col>Suspend Execution Until Future Is Done<>
<col><c>become<><><col><s>(For Future Use)<><>
<col><c>box<><><col><s>(For Future Use)<><>
<col><c>break<><><col>Exits a Loop<>
<col><c>const<><><col>Defines a Constant<>
<col><c>continue<><><col>Continue to Next Loop Iteration<>
<col><c>crate<><><col>Links to an External Crate<>
<col><c>do<><><col><s>(For Future Use)<><>
<col><c>dyn<><><col>Dynamic Dispatch To Trait<>
<col><c>else<><><col>Conditional If Statement, Fallback Clause<>
<col><c>enum<><><col>Defines an Enum<>
<col><c>extern<><><col>Link To an External Crate, Function, or Variable<>
<col><c>false<><><col>Boolean Literal<>
<col><c>final<><><col><s>(For Future Use)<><>
<col><c>fn<><><col>Defines a Function or Function Pointer<>
<col><c>for<><><col>For Loop, or Implements a Trait, or Specifies a Higher-ranked Lifetime<>
<col><c>if<><><col>Conditional If Statement<>
<col><c>impl<><><col>Implement Inherent or Trait<>
<col><c>in<><><col>For Loop<>
<col><c>let<><><col>Create a Variable<>
<col><c>loop<><><col>Unconditional Loop<>
<col><c>macro<><><col><s>(For Future Use)<><>
<col><c>match<><><col>Match Control Statement<>
<col><c>mod<><><col>Defines a Module<>
<col><c>move<><><col>Gives Ownership To Closure<>
<col><c>mut<><><col>Mutable Value / Pointer<>
<col><c>override<><><col><s>(For Future Use)<><>
<col><c>priv<><><col><s>(For Future Use)<><>
<col><c>pub<><><col>Set Public Visibility<>
<col><c>ref<><><col>Reference Binding<>
<col><c>return<><><col>Return A Value<>
<col><c>Self<><><col>Alias For Type Being Defined or Being Implemented<>
<col><c>self<><><col>Method Subject or Current Module<>
<col><c>static<><><col>Global Variable<>
<col><c>struct<><><col>Defines a Structure<>
<col><c>super<><><col>Parent Module<>
<col><c>trait<><><col>Defines a Trait<>
<col><c>true<><><col>Boolean Literal<>
<col><c>try<><><col><s>(For Future Use)<><>
<col><c>type<><><col>Defines an Alias<>
<col><c>typeof<><><col><s>(For Future Use)<><>
<col><c>union<><><col>Defines a Union<>
<col><c>unsafe<><><col>Enables Unsafe Operations<>
<col><c>unsized<><><col><s>(For Future Use)<><>
<col><c>use<><><col>Bring Into Scope<>
<col><c>virtual<><><col><s>(For Future Use)<><>
<col><c>where<><><col>Type Constraint<>
<col><c>while<><><col>Conditional Loop<>
<col><c>yield<><><col><s>(For Future Use)<><><><>
@
@ abstract, as, async, await, become, box
@ break, const, continue, crate, do, dyn
@ else, enum, extern, false, final, fn
@ for, if, impl, in, let, loop, macro
@ match, mod, move, mut, override, priv
@ pub, ref, return, Self, self, static
@ struct, super, trait, true, try, type
@ typeof, union, unsafe, unsized, use
@ virtual, where, while, yield
@ keywords, key words
@ reserved-words-only, reserved-only
@ keyword-only, keywords-only, key-word-only



# Reference - Cargo.toml

Rust Docs: <l https://doc.rust-lang.org/cargo/reference/manifest.html>Cargo Format Specification<>
@
@ settings, project
@ cargo.toml, cargo.toml-only, toml-only, config-only, configuration-only


### Cargo.toml - Comment

<cb><#># Comments<><>
@
@ comments



### Cargo.toml - Dependency - Include Crate

<cb>[dependencies]
<v>library_1<> = "<v>v<>.<v>v<>.<v>v<>"
<v>library_2<> = "^<v>v<>.<v>v<>"<>


Imports a crate into the project workspace.


Example:

<cb>[dependencies]
<>
@
@ dependency, crate, library, libraries, include
@ [depedencies], [dependency]



### Cargo.toml - Depencency - Include Development Only

<cb>[dev-dependencies]
<v>library_1<> = "<v>v<>.<v>v<>.<v>v<>"
<v>library_2<> = "^<v>v<>.<v>v<>"<>


Imports a crate into the project workspace during development only.

Use for importing test classes.


Example:

<cb>[dev-dependencies]
serde = { version = "1", features = ["derive"] }
serde_json = "1"
thiserror = "1.0"<>
@
@ dependencies, crate, library, libraries, tests,include, add, features
@ [dev-dependencies], [dev-dependency]



### Cargo.toml - Dependency - Include Local Library

<cb>[dependencies]
<v>library_1<> = { path = "<v>path<>/<v>to<>/<v>library<>"}<>


Imports a local library into the project workspace.

Relative library paths are fine.


Example:

<cb>[dependencies]
<v>utils<> = "../<v>utils-lib<>"<>
@
@ dependencies, libraries, include, add, path
@ [dependencies], [dependency]



### Cargo.toml - Dependency - Rename Crate

<cb>[dependencies]
<v>new_name<> = { version = "<v>v<>.<v>v<>.<v>v<>", package = "<v>crate_name<>" }<>


Imports a crate into the project workspace using the provided name.
@
@ dependency, crate, library, libraries, include
@ [dependencies], [dependency]



### Cargo.toml - Workspace - Define

<cb>[workspace]
members = [
    "<v>sub_project_1<>",
	"<v>sub_project_2<>",
	"<v>...<>",
]<>


Defines all projects that belong to a workspace. 

Allows Cargo to run commands across all sub-projects.
Place in the root directory of the project workspace.
@
@ sub-projects, sub projects, subprojects, libraries



### Setting - Project Name

<cb>[package]
name = "<v>project_name<>"<>

Used by crates.io.



### Setting - Authors

<cb>[package]
authors = ["<v>Author 1<>", "<v>Author 2<>", "<v>Author 3<>"]<>
@
@ [package]



### Setting - License

<cb>[package]
license = "<v>license-type"<>


The license type must be a standard SPDX license id.

License SPDX IDs:
<l>https://spdx.org/licenses/<>
@
@ [package]



### Setting - Library Root File Name - Rename

<cb>[lib]
path="src/<v>new_name.rs<>"<>

Overrides the default "lib.rs" name for the main library file.

This helps remove confusion when working on multiple libraries all listed as 'lib' in your IDE.
@
@ set, override default, 
@ lib.rs, change, [lib], path=, main, local



### Setting - Version

<cb>[package]
version = "<v>1<>.<v>2<>.<v>3<>"<>

Uses Semantic Versioning:

<cb><v>major<>.<v>minor<>.<v>patch<><>

Semantic Versioning: <l>https://semver.org/<>
@
@ [package]



# Reference - Rust Conventions


### Prelude Module

Expose commonly accessed functions, types, and traits from a single place.

<cb>use <v>module<>::prelude::*;<>

Use a <c>prelude<> module to expose commonly accessed functions, types, and traits from one single module. These items can be defined elsewhere but are exposed collectively here (<c>pub use <v>T<>;<>). Consumers will then only need to import the <c>prelude<> module to gain access to them.

Use prelude inside your app to allow internal modules to access most commonly used items. This will make it easy for other modules to access those items.

For a library, expose the most commonly used or needed items here. Including required items in one place will help consumers of the library work more effectively.

Tip: Less is more. Don't overload your prelude file.


Example:

<c>/src/prelude.rs<>:

<cb>pub use crate::<v>types<>::<v>ImportantType<>
pub use crate::<v>traits<>::<v>ImportantTrait<><>
@
@ prelude, ::prelude::*;, prelude::*, prelude.r



# Reference - Coming From Other Languages


### ++, -- Operators

Not supported in Rust.

Use Instead:

<cb><v>a<> += 1;
<v>a<> -= 1;<>
@
@ increment, decrement



### Classes
Rust does not support classes.

Use <go? "struct-only">structures<> and <go? "trait-only">traits<> instead.



### Class Constructors
Rust does not support constructors.

Implement a static function called <c>new<> instead.
<c>new<> is by convention.

Example:

<cb>pub struct <v>Item<> {
	pub <v>id<>: usize,
	pub <v>name<>: Option\<String>
}

impl <v>Item<> {
	pub fn new(<v>name<>: &str) {
		let <v>id<> = <v>next_id_function<>();
		<v>Item<> {
			<v>id<>: <v>id<>,
			<v>name<>: Some(<v>name<>.to_owned())
		}
	}
}<>



### Dictionary, Map, Table

Use: <go "?hashmap">HashMap<>
@
@ dict, dicts, maps, associative arrays, hash table



### Dictionary, Map, Table - Ordered

Use: <go "?btreemap">BtreeMap<>
@
@ dict, dicts, maps, ordered, sorted, associative arrays



### List

Use: <l "?q=array-only">Array (immutable sequence)<>, <l "?q=vec-only">Vec (mutable sequence)<>
@
@ lists



### Null

Null is not supported directly in the language and there is no Null type.

Use: <l "?q=option-only">Option<>
@
@ nulls type



### Set

Use: <l "?q=hashset-only">HashSet<>
@
@ sets



### Set - Ordered

Use: <l "?q=btreeset-only">BTreeSet<>
@
@ sets, ordered, sorted



### Stack

Use: <l "?q=vec-only">Vec<>

<cb>let <v>vec_1<>: Vec\<<v>V<>> = Vec::new();

<v>vec_1<>.push(<v>value<>);

<v>last<> = <v>vec_1<>.pop();
<v>size<> = <v>vec_1<>.len();<>
@
@ stacks, stack-only, stacks-only



### Switch, Case Statement

For switch or case statement use match statement.

Use: <l "?q=match-only">Match<>



### Tree

Use: <l "?q=btreemap-only">BTreeMap<> or <l "?q=btreeset-only">BTreeSet<>
@
@ trees
@ tree-only, trees-only



# Rust Patterns
@
@ pattern-only, patterns-only


### Pattern - Enum Match Guard

<cb>let <v>value<> = match <v>enum_1<> {
	<v>GuardVariant<> => return <v>...<>;
	<v>NeededVariant<>(<v>value<>) => <v>value<>,
}<>

or

<cb>let <v>value<> = match <v>enum_1<> {
	<v>NeededVariant<>(<v>value<>) => <v>value<>,
	<v>_<> => return <v>...<>;
}<>


Assigns the needed value or returns immediately for other types.

The guard returns immediately when a non needed value or guard value is encountered.
Why? Keeps the remaining code much simpler (no nests of match / if statements).
@
@ assign



### Pattern - NewType

<cb>pub struct <v>NewType1<>(<v>WrappedType<>);<>


Defines a new type by wrapping an existing type.

This is a zero cost abstraction.
Why? Adds clarity to the value.


Example:

<cb>pub struct <v>Seconds<>(i64);

<v>seconds<> = <v>Seconds<>(60);
println("{}", seconds.0)

<#>// Prints: 60<><>
@
@ new type, wraps type, external trait
@ newtype-only



### Pattern - NewType - External Trait and Type

<cb>pub struct <v>NewType1<>(<v>ExternalType<>);

impl <v>ExternalTrait<> for <v>NewType1<> {
	<v>...<>
}<>


Implements a trait for an external trait and type.

Why? Allows you to add a trait to a type when both are external to your code.
@
@ new type, wraps type, external trait
@ newtype-only



# Whats the Difference
@
@ vs, versus



### Array vs Slice

Array:

<*>Fixed Size
Stores Data Directly<>

Slice:

<*>A View into an Array or Sliceable Data Type
Assigned Dynamically
Size Assigned by App as Needed<>



### Copy vs Clone Traits

Copy:

<*>Does a bitwise copy of a type's data.
Implements "copy semantics" (automatic copy on assignment).<>

Clone:

<*>Provides an explicit clone function to copy the type.
Copies are made explicitly only (.clone())<>


### From vs Into Traits

Prefer From.

Both:

<*>Define how to convert one type into another.
Both are non failing (must complete successfully).<>

From:

<*>Prefer From over Into.
Is implemented on the target type (to type).<>

Into:

<*>Is implemented on the source type (from type).
Often requires type annotations (turbofish) to work
... because the inference engine has difficulty determining the target type.<>
@
@ Traits



### Function vs Method

Function:

<*>A standalone function.
Called directly.<>

<*><c><v>function_1<>()<><>


Associated Function:

<*>A function associated with a type.
Defined in an impl clause.
Referenced through the type name.
Referenced with "::"<>

<*><c><v>Type<>::<v>function_1<>()<><>


Method:

<*>A function associated with an instance of a type
Defined in an impl clause and starts with the <c>self<> parameter.
Referenced from the instance variable.
Referenced with "."<>

<*><c><v>item_1<>.<v>method_1<>()<><>
@
@ associated



### Eq vs PartialEq Traits

Eq:

<*>Use when x == x is always true.
Requires full equivalence (reflexive property is true).<>

<*>Required by HashSet, HashMap<>


PartialEq:

<*>Use when x == x may not always true.
Example - NaN != Nan
Implements partial equivalence only (reflexive property is not true).<>

<*>NOT usable in HashSet, HashMap<>
@
@ traits



### iter() vs iter_mut() vs into_iter()

All iterate over a collections elements.


iter():

<*><b>Borrows<> the elements.
Returns <c>&T<>.<>


iter_mut():

<*><b>Mutably borrows<> the elements.
Returns <c>&mut T<>.<>


into_iter():

<*>Takes <b>ownership<> of the collection elements.
Returns <c>T<>.<>
@
@ .iter(), .into_iter()



### Iterator vs IntoIterator Traits

Iterator:

<*>Iterates over a sequence of values.<>


IntoIterator:

<*>Returns an iterator.<>



### todo!() vs unimplemented!()

Both will panic when executed.

Use todo!() for future features.
Use unimplemented!() for things that must be implemented now.
@
@ macros



# Acronyms
@
@ glossary, glossary-only, acronyms-only, acronym-only


### ABI
Application Binary Interface (C's equivalent of Rust's FFI)



### ADT
Algebraic Data Type



### ARC
Atomically Reference Counted

See: <l "#arc">ARC<>



### COW
Clone on Write



### DST
Dynamically Sized Type



### FFI
Foreign Function Interface



### HOF
Higher Order Functions



### MPSC
Multi-Producer Single-Consumer



### RAII
Resource Acquisition Is Initialization
@
@ RALL



### RC
Reference Counted

See: <l "#rc">RC<>



### RLIB
Rust Library



### SPDX
Software Package Data Exchange



# Terms
@
@ glossary, definition, term-only, terms-only


### Algebraic Data Type (ADT)
A kind of composite type.

Contains 2 types:

Sum Type
Product Type



### Algebraic Data Types - Product Type
An item contains one or more items. A has a B and a C (contains fields).

Rust implements product types using <l "?q=struct-only">structs<>.



### Algebraic Data Types - Sum Type
An item is a variation of something. It is one of a limited set.  A is a B or A is a C (variants).

Rust implements sum types using <l "?q=enum-only">enums<>.



### Arena Tree / Index-based Tree
A tree that references elements by their indices instead of direct pointers.

Stores data in a contiguous block of memory (such as a vec).
The tree then stores the index location of the elements, instead of pointers.
This avoids mutable reference or lifetime issues caused by the borrow checker.

Also Called: Index-based Tree
@
@ arena-based, index-based



### Attribute
Metadata that relates to some crate, module or item.

It is used by the compiler.



### Borrow Checker
A component of the compiler that tracks lifetime and borrowing of a resource.

It ensures the borrows are valid and end before the owner is destroyed.



### Cargo
Rust's build system and package manager.



### Clippy
Rust's included code linter.
@
@ lint, linter



### Copy Semantics
The automatic duplication of an object's value when the object is assigned or passed.

Primitive types implement copy semantics by default.
Other types must implement the Copy trait to use copy semantics.

vs "Move Semantics"



### Crate
A compiled unit of a program.
A library that can be pulled into a project. Includes a list of dependencies.



### Count - Strong Count
A count of owners of an ARC or RC pointer.

Allows shared ownership of a resource.
The resource is deleted when count = 0.
Will delete even if the weak count is > 0.


VS: <l "?q=term+weak+count>Weak Count<>



### Count - Weak Count
A count of non-owning instances of an ARC or RC pointer.

Used where you need to have more than one reference to a resource (e.g. doubly linked list, or anything with circular references).
Must check when using the resource to see it still exists.
Can be upgradet to a strong pointer if needed.


VS: <l "?q=term+strong+count>Strong Count<>



### Destructor
An object's destructor releases any owned resources, freeing up memory.

Rust automatically calls an objects destructor when the object goes out of scope.
Rust calls the <c>Drop<> trait to execute the destructor.
@
@ drop



### Divergent Expression
An expression that exits out of the current block to somewhere else.

Think <c>return<> or <c>panic!()<>.
@
@ divergence



### Dynamic Dispatch
Where Rust determines the trait functions to call dynamically at runtime.

Used when the trait is known but not the actual type until runtime.
Rust implements a vtable lookup to find the correct function to call.

<cb>&dyn <v>Trait1<>
Box\<dyn <v>Trait1<>><>
@
@ dynamically dispatched



### Dynamically Sized Type (DST)

Also Called: Unsized Type
@
@ unsized type



### Epoch
The time at Unix Time 0.

January 1st, 1970 at 00:00:00 UTC.
@ 
@ unix time



### Epoch Time / Unix Time
The time that has passed in seconds since the Unix epoch (January 1st, 1970).



### Expression
Something that evaluates to a value.



### Fat Pointer
A fat pointer is structure containing a pointer and some metadata. The internal pointer stores the data's location. The metadata describes that data.

It can be used to track an instance that implements a trait of some kind but the actual instance isn't known until runtime.


Example  -  <c>&str<>:

This fat pointer contains a pointer to a string (the pointer) and the length of that string (the metadata).


Example  -  <c>&dyn <v>Trait1<><>:

Consists of 2 internal pointers, one pointing to the implementing structure data (the pointer), the other pointing to the vtable for the Trait methods (the metadata).



### Ferris
The unofficial mascot of Rust
@
@ mascot



### Foreign Function Interface (FFI)
This is Rust's interface to other programming languages and vice versa.

It is based on C's ABI (Application Binary Interface)



### Function Overloading
Not supported in Rust.

Use traits instead.



### Gorilla
Here is a gorilla  🦍



### Higher Order Functions (HOF)

These do either or both:

<*>Take One or More Functions as Parameters
Return a Functions<>



### Implicit Casting
Not supported in Rust.

Always explicitly cast your variables.



### Interior Mutability
The ability to mutate internal data especially when you have an immutable reference to it.

This is important when Rust's borrow checker would ordinarily disallow it.

Use these types:

<cb><l "=?q=cell-only">Cell\<<v>T<>><>
<l "=?q=refcell-only">RefCell\<<v>T<>><>
<l "=?q=mutex-only">Mutex\<<v>T<>><>
<l "=?q=rwlock-only">RwLock\<<v>T<>><><>



### Marker Trait
A marker trait is a trait that is used to identify a property of a type.

Marker traits do not have any methods associated with them
and therefore do not requiry any method implementation.



### Method - Instance Method

This is a method associated with an instance of a type and is accessed with the <c>.<> operator.



### Method - Static Method

This is a method associated with a type and is accessed with the <c>::<> operator.



### Method Overloading
Not supported in Rust.

Use traits instead.



### Module
A group of functions and types within a crate.



### Move Semantics
The transfer of an object's ownership when the object is assigned or passed.

vs "Copy Semantics"



### Multi-Producer Single-Consumer (MPSC)
A first in first out (FIFO) queue used to communicate between threads.



### Panic
An unrecoverable error.



### Pinning
Pinning prevents a value from being moved from it's current memory location.

Used in async/await code.
@
@ pinned



### Pointer
A variable that points to a location on the memory heap.

Pointers store memory addresses.
Pointers themselves are stored in the stack.

The most common pointer in Rust is the reference (<c>&<>)

<cb>*pointer<>



### Primitive
A data type built into the language.



### Resource Acquisition Is Initialization (RAII)
This simply means the constructor acquires a resource, the destructor releases it.

Rust enforces this. So when a resource goes out of scope, it's destructor is called and the resource is released.

(yes, RAII is a terrible name)



### Rust Library (RLIB)
The intermediate compiled libraries created by Rust.



### Rustacean
Someone who likes and uses Rust.



### RustC
Rust's compiler.


### RustFMT
Rust's included code formatting tool.
@
@ formatter, fmt



### Rustup
Rust's included installer and Rust version switcher.

<l>https://rustup.rs<>



### Smart Pointer
A structure that acts like a pointer but has extra functionality (typically relating to memory management).

Smart pointers implement traits:

<cb>Deref
Drop<>

Most Common Standard Library Smart Pointers:

<cb>Arc\<<v>T<>>
Box\<<v>T<>>
Cell\<<v>T<>>
COW\<<v>T<>>
Rc\<<v>T<>>
Ref\<<v>T<>>
RefMut\<<v>T<>>
RefCell\<<v>T<>>
RwLock\<<v>T<>>
Weak\<<v>T<>><>



### String Slice
The name for the <c>&str<> data type.



### Statement
A command that performs some action but does not return a value.
This is usually in aid of evaluating an expression.



### Threads - Green Threads
A thread that runs concurrently (not true parallel) and is controlled by program.

Multiple green threads will run concurrently on a single native thread.

Rust supports this through 3rd party libraries.



### Threads - Native / OS Thread
A thread that runs in parallel and is controlled by the operating system.

Core Rust only supports native threads.


### Trait - Orphan Rule
You can only implement a trait when either the trait or the type is defined locally in the current crate.

This rule ensures type safety across different crates by preventing conflicting implementations.



### Type Annotation / Turbofish
Used to explitly define generic type returned from a call where the inferencing engine can't automatically determine it.

<cb>::\<><>

<cb>= <v>item<>.into::\<String>()<>

In cases where type inferencing is needed to determine the type (eg into() or collect()), the compiler needs to know which type to convert to. To solve this problem, you annotate the function name with the return type.


Also called: Turbofish
@
@ ::\<>, fish



### Unit
An empty tuple.

These are returned by functions that do not return any value.



### vtable
Defines details for a type instance that implements a trait but the actual type isn't known until runtime.

Referenced from a fat pointer (<c>&dyn <v>Trait1<><>).
Each trait defines a separate vtable.



### Zero Cost Abstraction
These absractions give you high-level language features (such as safety and expressiveness) without sacrificing performance.


